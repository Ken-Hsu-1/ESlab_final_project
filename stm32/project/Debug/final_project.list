
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d74  08012cd8  08012cd8  00013cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a4c  08013a4c  00015284  2**0
                  CONTENTS
  4 .ARM          00000008  08013a4c  08013a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a54  08013a54  00015284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a54  08013a54  00014a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013a58  08013a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  08013a5c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030d0  20000284  08013ce0  00015284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003354  08013ce0  00015354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b289  00000000  00000000  000152b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056b5  00000000  00000000  0004053d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026e0  00000000  00000000  00045bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e45  00000000  00000000  000482d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000074d4  00000000  00000000  0004a11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ce0d  00000000  00000000  000515f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f27a  00000000  00000000  0007e3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018d678  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd28  00000000  00000000  0018d6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001993e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000284 	.word	0x20000284
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012cbc 	.word	0x08012cbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000288 	.word	0x20000288
 80001cc:	08012cbc 	.word	0x08012cbc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000fec:	1d39      	adds	r1, r7, #4
 8000fee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <__io_putchar+0x20>)
 8000ff6:	f009 f813 	bl	800a020 <HAL_UART_Transmit>
	return ch;
 8000ffa:	687b      	ldr	r3, [r7, #4]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000420 	.word	0x20000420

08001008 <WIFI_init_connect>:

void WIFI_init_connect(void)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af04      	add	r7, sp, #16
	if(WIFI_Init() ==  WIFI_STATUS_OK)
 800100e:	f002 ffd9 	bl	8003fc4 <WIFI_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	f040 8091 	bne.w	800113c <WIFI_init_connect+0x134>
	  {
	    printf("> WIFI Module Initialized.\n");
 800101a:	484b      	ldr	r0, [pc, #300]	@ (8001148 <WIFI_init_connect+0x140>)
 800101c:	f00d fffa 	bl	800f014 <puts>
	    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8001020:	2106      	movs	r1, #6
 8001022:	484a      	ldr	r0, [pc, #296]	@ (800114c <WIFI_init_connect+0x144>)
 8001024:	f003 f81c 	bl	8004060 <WIFI_GetMAC_Address>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d11a      	bne.n	8001064 <WIFI_init_connect+0x5c>
	    {
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
	               MAC_Addr[0],
 800102e:	4b47      	ldr	r3, [pc, #284]	@ (800114c <WIFI_init_connect+0x144>)
 8001030:	781b      	ldrb	r3, [r3, #0]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001032:	4618      	mov	r0, r3
	               MAC_Addr[1],
 8001034:	4b45      	ldr	r3, [pc, #276]	@ (800114c <WIFI_init_connect+0x144>)
 8001036:	785b      	ldrb	r3, [r3, #1]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001038:	461c      	mov	r4, r3
	               MAC_Addr[2],
 800103a:	4b44      	ldr	r3, [pc, #272]	@ (800114c <WIFI_init_connect+0x144>)
 800103c:	789b      	ldrb	r3, [r3, #2]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 800103e:	461d      	mov	r5, r3
	               MAC_Addr[3],
 8001040:	4b42      	ldr	r3, [pc, #264]	@ (800114c <WIFI_init_connect+0x144>)
 8001042:	78db      	ldrb	r3, [r3, #3]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001044:	461a      	mov	r2, r3
	               MAC_Addr[4],
 8001046:	4b41      	ldr	r3, [pc, #260]	@ (800114c <WIFI_init_connect+0x144>)
 8001048:	791b      	ldrb	r3, [r3, #4]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 800104a:	4619      	mov	r1, r3
	               MAC_Addr[5]);
 800104c:	4b3f      	ldr	r3, [pc, #252]	@ (800114c <WIFI_init_connect+0x144>)
 800104e:	795b      	ldrb	r3, [r3, #5]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	9101      	str	r1, [sp, #4]
 8001054:	9200      	str	r2, [sp, #0]
 8001056:	462b      	mov	r3, r5
 8001058:	4622      	mov	r2, r4
 800105a:	4601      	mov	r1, r0
 800105c:	483c      	ldr	r0, [pc, #240]	@ (8001150 <WIFI_init_connect+0x148>)
 800105e:	f00d ff71 	bl	800ef44 <iprintf>
 8001062:	e002      	b.n	800106a <WIFI_init_connect+0x62>
	    }
	    else
	    {
	      printf("> ERROR : CANNOT get MAC address\n");
 8001064:	483b      	ldr	r0, [pc, #236]	@ (8001154 <WIFI_init_connect+0x14c>)
 8001066:	f00d ffd5 	bl	800f014 <puts>
	    }

	    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 800106a:	2203      	movs	r2, #3
 800106c:	493a      	ldr	r1, [pc, #232]	@ (8001158 <WIFI_init_connect+0x150>)
 800106e:	483b      	ldr	r0, [pc, #236]	@ (800115c <WIFI_init_connect+0x154>)
 8001070:	f002 ffd4 	bl	800401c <WIFI_Connect>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d15c      	bne.n	8001134 <WIFI_init_connect+0x12c>
	    {
	      printf("> es-wifi module connected \n");
 800107a:	4839      	ldr	r0, [pc, #228]	@ (8001160 <WIFI_init_connect+0x158>)
 800107c:	f00d ffca 	bl	800f014 <puts>
	      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8001080:	2104      	movs	r1, #4
 8001082:	4838      	ldr	r0, [pc, #224]	@ (8001164 <WIFI_init_connect+0x15c>)
 8001084:	f003 f80c 	bl	80040a0 <WIFI_GetIP_Address>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d14e      	bne.n	800112c <WIFI_init_connect+0x124>
	      {
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
	               IP_Addr[0],
 800108e:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <WIFI_init_connect+0x15c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8001092:	4619      	mov	r1, r3
	               IP_Addr[1],
 8001094:	4b33      	ldr	r3, [pc, #204]	@ (8001164 <WIFI_init_connect+0x15c>)
 8001096:	785b      	ldrb	r3, [r3, #1]
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8001098:	461a      	mov	r2, r3
	               IP_Addr[2],
 800109a:	4b32      	ldr	r3, [pc, #200]	@ (8001164 <WIFI_init_connect+0x15c>)
 800109c:	789b      	ldrb	r3, [r3, #2]
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 800109e:	4618      	mov	r0, r3
	               IP_Addr[3]);
 80010a0:	4b30      	ldr	r3, [pc, #192]	@ (8001164 <WIFI_init_connect+0x15c>)
 80010a2:	78db      	ldrb	r3, [r3, #3]
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4603      	mov	r3, r0
 80010a8:	482f      	ldr	r0, [pc, #188]	@ (8001168 <WIFI_init_connect+0x160>)
 80010aa:	f00d ff4b 	bl	800ef44 <iprintf>

	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
	               RemoteIP[0],
 80010ae:	4b2f      	ldr	r3, [pc, #188]	@ (800116c <WIFI_init_connect+0x164>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80010b2:	4619      	mov	r1, r3
	               RemoteIP[1],
 80010b4:	4b2d      	ldr	r3, [pc, #180]	@ (800116c <WIFI_init_connect+0x164>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80010b8:	4618      	mov	r0, r3
	               RemoteIP[2],
 80010ba:	4b2c      	ldr	r3, [pc, #176]	@ (800116c <WIFI_init_connect+0x164>)
 80010bc:	789b      	ldrb	r3, [r3, #2]
	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80010be:	461c      	mov	r4, r3
	               RemoteIP[3],
 80010c0:	4b2a      	ldr	r3, [pc, #168]	@ (800116c <WIFI_init_connect+0x164>)
 80010c2:	78db      	ldrb	r3, [r3, #3]
	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80010c4:	461a      	mov	r2, r3
 80010c6:	f641 7342 	movw	r3, #8002	@ 0x1f42
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	9200      	str	r2, [sp, #0]
 80010ce:	4623      	mov	r3, r4
 80010d0:	4602      	mov	r2, r0
 80010d2:	4827      	ldr	r0, [pc, #156]	@ (8001170 <WIFI_init_connect+0x168>)
 80010d4:	f00d ff36 	bl	800ef44 <iprintf>
								 RemotePORT);

	        while (Trials--)
 80010d8:	e014      	b.n	8001104 <WIFI_init_connect+0xfc>
	        {
	          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80010da:	2300      	movs	r3, #0
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	f641 7342 	movw	r3, #8002	@ 0x1f42
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	4b21      	ldr	r3, [pc, #132]	@ (800116c <WIFI_init_connect+0x164>)
 80010e6:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <WIFI_init_connect+0x16c>)
 80010e8:	2100      	movs	r1, #0
 80010ea:	2000      	movs	r0, #0
 80010ec:	f002 fffc 	bl	80040e8 <WIFI_OpenClientConnection>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d106      	bne.n	8001104 <WIFI_init_connect+0xfc>
	          {
	            printf("> TCP Connection opened successfully.\n");
 80010f6:	4820      	ldr	r0, [pc, #128]	@ (8001178 <WIFI_init_connect+0x170>)
 80010f8:	f00d ff8c 	bl	800f014 <puts>
	            Socket = 0;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <WIFI_init_connect+0x174>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
	            break;
 8001102:	e00a      	b.n	800111a <WIFI_init_connect+0x112>
	        while (Trials--)
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <WIFI_init_connect+0x178>)
 8001106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110a:	b29a      	uxth	r2, r3
 800110c:	3a01      	subs	r2, #1
 800110e:	b292      	uxth	r2, r2
 8001110:	b211      	sxth	r1, r2
 8001112:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <WIFI_init_connect+0x178>)
 8001114:	8011      	strh	r1, [r2, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1df      	bne.n	80010da <WIFI_init_connect+0xd2>
	          }
	        }
	        if(Socket == -1)
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <WIFI_init_connect+0x174>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001122:	d10e      	bne.n	8001142 <WIFI_init_connect+0x13a>
	        {
	          printf("> ERROR : Cannot open Connection\n");
 8001124:	4817      	ldr	r0, [pc, #92]	@ (8001184 <WIFI_init_connect+0x17c>)
 8001126:	f00d ff75 	bl	800f014 <puts>
	  else
	  {
	    printf("> ERROR : WIFI Module cannot be initialized.\n");
	  }

}
 800112a:	e00a      	b.n	8001142 <WIFI_init_connect+0x13a>
	        printf("> ERROR : es-wifi module CANNOT get IP address\n");
 800112c:	4816      	ldr	r0, [pc, #88]	@ (8001188 <WIFI_init_connect+0x180>)
 800112e:	f00d ff71 	bl	800f014 <puts>
}
 8001132:	e006      	b.n	8001142 <WIFI_init_connect+0x13a>
	      printf("> ERROR : es-wifi module NOT connected\n");
 8001134:	4815      	ldr	r0, [pc, #84]	@ (800118c <WIFI_init_connect+0x184>)
 8001136:	f00d ff6d 	bl	800f014 <puts>
}
 800113a:	e002      	b.n	8001142 <WIFI_init_connect+0x13a>
	    printf("> ERROR : WIFI Module cannot be initialized.\n");
 800113c:	4814      	ldr	r0, [pc, #80]	@ (8001190 <WIFI_init_connect+0x188>)
 800113e:	f00d ff69 	bl	800f014 <puts>
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bdb0      	pop	{r4, r5, r7, pc}
 8001148:	08012d1c 	.word	0x08012d1c
 800114c:	20000eb8 	.word	0x20000eb8
 8001150:	08012d38 	.word	0x08012d38
 8001154:	08012d6c 	.word	0x08012d6c
 8001158:	08012d90 	.word	0x08012d90
 800115c:	08012da0 	.word	0x08012da0
 8001160:	08012dac 	.word	0x08012dac
 8001164:	20000ec0 	.word	0x20000ec0
 8001168:	08012dc8 	.word	0x08012dc8
 800116c:	20000000 	.word	0x20000000
 8001170:	08012df8 	.word	0x08012df8
 8001174:	08012e2c 	.word	0x08012e2c
 8001178:	08012e38 	.word	0x08012e38
 800117c:	20000004 	.word	0x20000004
 8001180:	20000008 	.word	0x20000008
 8001184:	08012e60 	.word	0x08012e60
 8001188:	08012e84 	.word	0x08012e84
 800118c:	08012eb4 	.word	0x08012eb4
 8001190:	08012edc 	.word	0x08012edc

08001194 <my_lsm6dsl_init>:

void my_lsm6dsl_init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	isr_times = 0;
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <my_lsm6dsl_init+0x60>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 800119e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011a2:	4815      	ldr	r0, [pc, #84]	@ (80011f8 <my_lsm6dsl_init+0x64>)
 80011a4:	f004 fa0e 	bl	80055c4 <HAL_GPIO_TogglePin>
	init_position = 1;
 80011a8:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <my_lsm6dsl_init+0x68>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
	volume_mode = 0;
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <my_lsm6dsl_init+0x6c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
	wifi_volume_mode = 0;
 80011b4:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <my_lsm6dsl_init+0x70>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
	angle = 0;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <my_lsm6dsl_init+0x74>)
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
	calculate_times = 0;
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <my_lsm6dsl_init+0x78>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
	// 6D/4D orientation detection
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1, 0x80);
 80011c8:	2280      	movs	r2, #128	@ 0x80
 80011ca:	2158      	movs	r1, #88	@ 0x58
 80011cc:	20d4      	movs	r0, #212	@ 0xd4
 80011ce:	f003 f905 	bl	80043dc <SENSOR_IO_Write>
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_THS_6D, 0x40);
 80011d2:	2240      	movs	r2, #64	@ 0x40
 80011d4:	2159      	movs	r1, #89	@ 0x59
 80011d6:	20d4      	movs	r0, #212	@ 0xd4
 80011d8:	f003 f900 	bl	80043dc <SENSOR_IO_Write>
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL, 0x01);
 80011dc:	2201      	movs	r2, #1
 80011de:	2117      	movs	r1, #23
 80011e0:	20d4      	movs	r0, #212	@ 0xd4
 80011e2:	f003 f8fb 	bl	80043dc <SENSOR_IO_Write>
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, 0x04);
 80011e6:	2204      	movs	r2, #4
 80011e8:	215e      	movs	r1, #94	@ 0x5e
 80011ea:	20d4      	movs	r0, #212	@ 0xd4
 80011ec:	f003 f8f6 	bl	80043dc <SENSOR_IO_Write>

	// Relative tilt
//	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL10_C, 0x0c);
//	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, 0x02);
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000eed 	.word	0x20000eed
 80011f8:	48000400 	.word	0x48000400
 80011fc:	20000eee 	.word	0x20000eee
 8001200:	20000ee0 	.word	0x20000ee0
 8001204:	20000ee1 	.word	0x20000ee1
 8001208:	20000ee4 	.word	0x20000ee4
 800120c:	20000eec 	.word	0x20000eec

08001210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001214:	f003 fc10 	bl	8004a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001218:	f000 f870 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121c:	f000 fa12 	bl	8001644 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001220:	f000 f8ce 	bl	80013c0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001224:	f000 f904 	bl	8001430 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001228:	f000 f940 	bl	80014ac <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800122c:	f000 f964 	bl	80014f8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001230:	f000 f9d8 	bl	80015e4 <MX_USART1_UART_Init>
  //MX_USART3_UART_Init();
  //MX_USB_OTG_FS_PCD_Init();
  MX_TIM6_Init();
 8001234:	f000 f99e 	bl	8001574 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  BSP_ACCELERO_Init();
 8001238:	f003 f926 	bl	8004488 <BSP_ACCELERO_Init>

  BSP_GYRO_Init();
 800123c:	f003 f97a 	bl	8004534 <BSP_GYRO_Init>


  if(wifi_connect == 1){
	  WIFI_init_connect();
 8001240:	f7ff fee2 	bl	8001008 <WIFI_init_connect>
	  printf("wifi init finish\n");
 8001244:	481d      	ldr	r0, [pc, #116]	@ (80012bc <main+0xac>)
 8001246:	f00d fee5 	bl	800f014 <puts>
  }

  my_lsm6dsl_init();
 800124a:	f7ff ffa3 	bl	8001194 <my_lsm6dsl_init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800124e:	f009 fc79 	bl	800ab44 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of timerEvt */
  timerEvtHandle = osSemaphoreNew(1, 0, &timerEvt_attributes);
 8001252:	4a1b      	ldr	r2, [pc, #108]	@ (80012c0 <main+0xb0>)
 8001254:	2100      	movs	r1, #0
 8001256:	2001      	movs	r0, #1
 8001258:	f009 fd6b 	bl	800ad32 <osSemaphoreNew>
 800125c:	4603      	mov	r3, r0
 800125e:	4a19      	ldr	r2, [pc, #100]	@ (80012c4 <main+0xb4>)
 8001260:	6013      	str	r3, [r2, #0]

  /* creation of convStart */
  convStartHandle = osSemaphoreNew(1, 0, &convStart_attributes);
 8001262:	4a19      	ldr	r2, [pc, #100]	@ (80012c8 <main+0xb8>)
 8001264:	2100      	movs	r1, #0
 8001266:	2001      	movs	r0, #1
 8001268:	f009 fd63 	bl	800ad32 <osSemaphoreNew>
 800126c:	4603      	mov	r3, r0
 800126e:	4a17      	ldr	r2, [pc, #92]	@ (80012cc <main+0xbc>)
 8001270:	6013      	str	r3, [r2, #0]

  /* creation of commStart */
  commStartHandle = osSemaphoreNew(1, 0, &commStart_attributes);
 8001272:	4a17      	ldr	r2, [pc, #92]	@ (80012d0 <main+0xc0>)
 8001274:	2100      	movs	r1, #0
 8001276:	2001      	movs	r0, #1
 8001278:	f009 fd5b 	bl	800ad32 <osSemaphoreNew>
 800127c:	4603      	mov	r3, r0
 800127e:	4a15      	ldr	r2, [pc, #84]	@ (80012d4 <main+0xc4>)
 8001280:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001282:	4a15      	ldr	r2, [pc, #84]	@ (80012d8 <main+0xc8>)
 8001284:	2100      	movs	r1, #0
 8001286:	4815      	ldr	r0, [pc, #84]	@ (80012dc <main+0xcc>)
 8001288:	f009 fca6 	bl	800abd8 <osThreadNew>
 800128c:	4603      	mov	r3, r0
 800128e:	4a14      	ldr	r2, [pc, #80]	@ (80012e0 <main+0xd0>)
 8001290:	6013      	str	r3, [r2, #0]

  /* creation of acqTask */
  acqTaskHandle = osThreadNew(StartacqTask, NULL, &acqTask_attributes);
 8001292:	4a14      	ldr	r2, [pc, #80]	@ (80012e4 <main+0xd4>)
 8001294:	2100      	movs	r1, #0
 8001296:	4814      	ldr	r0, [pc, #80]	@ (80012e8 <main+0xd8>)
 8001298:	f009 fc9e 	bl	800abd8 <osThreadNew>
 800129c:	4603      	mov	r3, r0
 800129e:	4a13      	ldr	r2, [pc, #76]	@ (80012ec <main+0xdc>)
 80012a0:	6013      	str	r3, [r2, #0]

  /* creation of commTask */
  commTaskHandle = osThreadNew(StartcommTask, NULL, &commTask_attributes);
 80012a2:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <main+0xe0>)
 80012a4:	2100      	movs	r1, #0
 80012a6:	4813      	ldr	r0, [pc, #76]	@ (80012f4 <main+0xe4>)
 80012a8:	f009 fc96 	bl	800abd8 <osThreadNew>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <main+0xe8>)
 80012b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012b2:	f009 fc6b 	bl	800ab8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012b6:	bf00      	nop
 80012b8:	e7fd      	b.n	80012b6 <main+0xa6>
 80012ba:	bf00      	nop
 80012bc:	08012f0c 	.word	0x08012f0c
 80012c0:	08013514 	.word	0x08013514
 80012c4:	20000bc8 	.word	0x20000bc8
 80012c8:	08013524 	.word	0x08013524
 80012cc:	20000c1c 	.word	0x20000c1c
 80012d0:	08013534 	.word	0x08013534
 80012d4:	20000c70 	.word	0x20000c70
 80012d8:	080134a8 	.word	0x080134a8
 80012dc:	08001b2d 	.word	0x08001b2d
 80012e0:	200004a8 	.word	0x200004a8
 80012e4:	080134cc 	.word	0x080134cc
 80012e8:	08001d69 	.word	0x08001d69
 80012ec:	20000708 	.word	0x20000708
 80012f0:	080134f0 	.word	0x080134f0
 80012f4:	08001f81 	.word	0x08001f81
 80012f8:	20000968 	.word	0x20000968

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b096      	sub	sp, #88	@ 0x58
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2244      	movs	r2, #68	@ 0x44
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f00d ff92 	bl	800f234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	463b      	mov	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800131e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001322:	f004 fff1 	bl	8006308 <HAL_PWREx_ControlVoltageScaling>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800132c:	f000 fef0 	bl	8002110 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001330:	f004 ffcc 	bl	80062cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001334:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <SystemClock_Config+0xc0>)
 8001336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800133a:	4a20      	ldr	r2, [pc, #128]	@ (80013bc <SystemClock_Config+0xc0>)
 800133c:	f023 0318 	bic.w	r3, r3, #24
 8001340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001344:	2314      	movs	r3, #20
 8001346:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800134c:	2301      	movs	r3, #1
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001354:	2360      	movs	r3, #96	@ 0x60
 8001356:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001358:	2302      	movs	r3, #2
 800135a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800135c:	2301      	movs	r3, #1
 800135e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001364:	2328      	movs	r3, #40	@ 0x28
 8001366:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001368:	2307      	movs	r3, #7
 800136a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800136c:	2302      	movs	r3, #2
 800136e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001370:	2302      	movs	r3, #2
 8001372:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4618      	mov	r0, r3
 800137a:	f005 f8d7 	bl	800652c <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001384:	f000 fec4 	bl	8002110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2303      	movs	r3, #3
 800138e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	2104      	movs	r1, #4
 80013a0:	4618      	mov	r0, r3
 80013a2:	f005 fc9f 	bl	8006ce4 <HAL_RCC_ClockConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013ac:	f000 feb0 	bl	8002110 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013b0:	f006 f9a6 	bl	8007700 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013b4:	bf00      	nop
 80013b6:	3758      	adds	r7, #88	@ 0x58
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000

080013c0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80013c4:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 80013c6:	4a19      	ldr	r2, [pc, #100]	@ (800142c <MX_DFSDM1_Init+0x6c>)
 80013c8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80013d6:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 80013d8:	2202      	movs	r2, #2
 80013da:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 80013ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ee:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 80013f8:	2204      	movs	r2, #4
 80013fa:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 8001404:	2201      	movs	r2, #1
 8001406:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 800140a:	2200      	movs	r2, #0
 800140c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 8001410:	2200      	movs	r2, #0
 8001412:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_DFSDM1_Init+0x68>)
 8001416:	f003 fcb9 	bl	8004d8c <HAL_DFSDM_ChannelInit>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001420:	f000 fe76 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200002a0 	.word	0x200002a0
 800142c:	40016020 	.word	0x40016020

08001430 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <MX_I2C2_Init+0x74>)
 8001436:	4a1c      	ldr	r2, [pc, #112]	@ (80014a8 <MX_I2C2_Init+0x78>)
 8001438:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_I2C2_Init+0x74>)
 800143c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001440:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001442:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <MX_I2C2_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001448:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <MX_I2C2_Init+0x74>)
 800144a:	2201      	movs	r2, #1
 800144c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <MX_I2C2_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <MX_I2C2_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800145a:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <MX_I2C2_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <MX_I2C2_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <MX_I2C2_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800146c:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_I2C2_Init+0x74>)
 800146e:	f004 f8db 	bl	8005628 <HAL_I2C_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001478:	f000 fe4a 	bl	8002110 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	4809      	ldr	r0, [pc, #36]	@ (80014a4 <MX_I2C2_Init+0x74>)
 8001480:	f004 fe8c 	bl	800619c <HAL_I2CEx_ConfigAnalogFilter>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800148a:	f000 fe41 	bl	8002110 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800148e:	2100      	movs	r1, #0
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <MX_I2C2_Init+0x74>)
 8001492:	f004 fece 	bl	8006232 <HAL_I2CEx_ConfigDigitalFilter>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800149c:	f000 fe38 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200002d8 	.word	0x200002d8
 80014a8:	40005800 	.word	0x40005800

080014ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_QUADSPI_Init+0x44>)
 80014b2:	4a10      	ldr	r2, [pc, #64]	@ (80014f4 <MX_QUADSPI_Init+0x48>)
 80014b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_QUADSPI_Init+0x44>)
 80014b8:	2202      	movs	r2, #2
 80014ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_QUADSPI_Init+0x44>)
 80014be:	2204      	movs	r2, #4
 80014c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <MX_QUADSPI_Init+0x44>)
 80014c4:	2210      	movs	r2, #16
 80014c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_QUADSPI_Init+0x44>)
 80014ca:	2217      	movs	r2, #23
 80014cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <MX_QUADSPI_Init+0x44>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_QUADSPI_Init+0x44>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_QUADSPI_Init+0x44>)
 80014dc:	f004 ff6a 	bl	80063b4 <HAL_QSPI_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80014e6:	f000 fe13 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000032c 	.word	0x2000032c
 80014f4:	a0001000 	.word	0xa0001000

080014f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <MX_SPI3_Init+0x74>)
 80014fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001570 <MX_SPI3_Init+0x78>)
 8001500:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_SPI3_Init+0x74>)
 8001504:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001508:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <MX_SPI3_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001510:	4b16      	ldr	r3, [pc, #88]	@ (800156c <MX_SPI3_Init+0x74>)
 8001512:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001516:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_SPI3_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_SPI3_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_SPI3_Init+0x74>)
 8001526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800152a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_SPI3_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_SPI3_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_SPI3_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <MX_SPI3_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_SPI3_Init+0x74>)
 8001546:	2207      	movs	r2, #7
 8001548:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <MX_SPI3_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_SPI3_Init+0x74>)
 8001552:	2208      	movs	r2, #8
 8001554:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_SPI3_Init+0x74>)
 8001558:	f006 fab4 	bl	8007ac4 <HAL_SPI_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001562:	f000 fdd5 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000370 	.word	0x20000370
 8001570:	40003c00 	.word	0x40003c00

08001574 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <MX_TIM6_Init+0x68>)
 8001586:	4a16      	ldr	r2, [pc, #88]	@ (80015e0 <MX_TIM6_Init+0x6c>)
 8001588:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_TIM6_Init+0x68>)
 800158c:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001590:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001592:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <MX_TIM6_Init+0x68>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001598:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <MX_TIM6_Init+0x68>)
 800159a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800159e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015a0:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <MX_TIM6_Init+0x68>)
 80015a2:	2280      	movs	r2, #128	@ 0x80
 80015a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015a6:	480d      	ldr	r0, [pc, #52]	@ (80015dc <MX_TIM6_Init+0x68>)
 80015a8:	f008 f97b 	bl	80098a2 <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80015b2:	f000 fdad 	bl	8002110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	@ (80015dc <MX_TIM6_Init+0x68>)
 80015c4:	f008 fc38 	bl	8009e38 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80015ce:	f000 fd9f 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200003d4 	.word	0x200003d4
 80015e0:	40001000 	.word	0x40001000

080015e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e8:	4b14      	ldr	r3, [pc, #80]	@ (800163c <MX_USART1_UART_Init+0x58>)
 80015ea:	4a15      	ldr	r2, [pc, #84]	@ (8001640 <MX_USART1_UART_Init+0x5c>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <MX_USART1_UART_Init+0x58>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <MX_USART1_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <MX_USART1_UART_Init+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <MX_USART1_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <MX_USART1_UART_Init+0x58>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <MX_USART1_UART_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b09      	ldr	r3, [pc, #36]	@ (800163c <MX_USART1_UART_Init+0x58>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161a:	4b08      	ldr	r3, [pc, #32]	@ (800163c <MX_USART1_UART_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <MX_USART1_UART_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_USART1_UART_Init+0x58>)
 8001628:	f008 fcac 	bl	8009f84 <HAL_UART_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001632:	f000 fd6d 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000420 	.word	0x20000420
 8001640:	40013800 	.word	0x40013800

08001644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800165a:	4bbd      	ldr	r3, [pc, #756]	@ (8001950 <MX_GPIO_Init+0x30c>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	4abc      	ldr	r2, [pc, #752]	@ (8001950 <MX_GPIO_Init+0x30c>)
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001666:	4bba      	ldr	r3, [pc, #744]	@ (8001950 <MX_GPIO_Init+0x30c>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	4bb7      	ldr	r3, [pc, #732]	@ (8001950 <MX_GPIO_Init+0x30c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	4ab6      	ldr	r2, [pc, #728]	@ (8001950 <MX_GPIO_Init+0x30c>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167e:	4bb4      	ldr	r3, [pc, #720]	@ (8001950 <MX_GPIO_Init+0x30c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4bb1      	ldr	r3, [pc, #708]	@ (8001950 <MX_GPIO_Init+0x30c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	4ab0      	ldr	r2, [pc, #704]	@ (8001950 <MX_GPIO_Init+0x30c>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001696:	4bae      	ldr	r3, [pc, #696]	@ (8001950 <MX_GPIO_Init+0x30c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4bab      	ldr	r3, [pc, #684]	@ (8001950 <MX_GPIO_Init+0x30c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	4aaa      	ldr	r2, [pc, #680]	@ (8001950 <MX_GPIO_Init+0x30c>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ae:	4ba8      	ldr	r3, [pc, #672]	@ (8001950 <MX_GPIO_Init+0x30c>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ba:	4ba5      	ldr	r3, [pc, #660]	@ (8001950 <MX_GPIO_Init+0x30c>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	4aa4      	ldr	r2, [pc, #656]	@ (8001950 <MX_GPIO_Init+0x30c>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c6:	4ba2      	ldr	r3, [pc, #648]	@ (8001950 <MX_GPIO_Init+0x30c>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80016d8:	489e      	ldr	r0, [pc, #632]	@ (8001954 <MX_GPIO_Init+0x310>)
 80016da:	f003 ff5b 	bl	8005594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	f248 1104 	movw	r1, #33028	@ 0x8104
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e8:	f003 ff54 	bl	8005594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80016ec:	2200      	movs	r2, #0
 80016ee:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80016f2:	4899      	ldr	r0, [pc, #612]	@ (8001958 <MX_GPIO_Init+0x314>)
 80016f4:	f003 ff4e 	bl	8005594 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f241 0181 	movw	r1, #4225	@ 0x1081
 80016fe:	4897      	ldr	r0, [pc, #604]	@ (800195c <MX_GPIO_Init+0x318>)
 8001700:	f003 ff48 	bl	8005594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800170a:	4894      	ldr	r0, [pc, #592]	@ (800195c <MX_GPIO_Init+0x318>)
 800170c:	f003 ff42 	bl	8005594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001716:	4892      	ldr	r0, [pc, #584]	@ (8001960 <MX_GPIO_Init+0x31c>)
 8001718:	f003 ff3c 	bl	8005594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	2120      	movs	r1, #32
 8001720:	488d      	ldr	r0, [pc, #564]	@ (8001958 <MX_GPIO_Init+0x314>)
 8001722:	f003 ff37 	bl	8005594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	2101      	movs	r1, #1
 800172a:	488a      	ldr	r0, [pc, #552]	@ (8001954 <MX_GPIO_Init+0x310>)
 800172c:	f003 ff32 	bl	8005594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001730:	f240 1315 	movw	r3, #277	@ 0x115
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4882      	ldr	r0, [pc, #520]	@ (8001954 <MX_GPIO_Init+0x310>)
 800174a:	f003 fc6d 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800174e:	236a      	movs	r3, #106	@ 0x6a
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001752:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	487c      	ldr	r0, [pc, #496]	@ (8001954 <MX_GPIO_Init+0x310>)
 8001764:	f003 fc60 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800176e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	4878      	ldr	r0, [pc, #480]	@ (8001960 <MX_GPIO_Init+0x31c>)
 8001780:	f003 fc52 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001784:	233f      	movs	r3, #63	@ 0x3f
 8001786:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001788:	230b      	movs	r3, #11
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4872      	ldr	r0, [pc, #456]	@ (8001960 <MX_GPIO_Init+0x31c>)
 8001798:	f003 fc46 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800179c:	2303      	movs	r3, #3
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017ac:	2308      	movs	r3, #8
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ba:	f003 fc35 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80017be:	f248 1304 	movw	r3, #33028	@ 0x8104
 80017c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017da:	f003 fc25 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80017de:	2308      	movs	r3, #8
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ee:	2301      	movs	r3, #1
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fc:	f003 fc14 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001800:	2310      	movs	r3, #16
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001804:	230b      	movs	r3, #11
 8001806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001816:	f003 fc07 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800181a:	23e0      	movs	r3, #224	@ 0xe0
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800182a:	2305      	movs	r3, #5
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001838:	f003 fbf6 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800183c:	2301      	movs	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001840:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4841      	ldr	r0, [pc, #260]	@ (8001958 <MX_GPIO_Init+0x314>)
 8001852:	f003 fbe9 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001856:	2302      	movs	r3, #2
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800185a:	230b      	movs	r3, #11
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	483b      	ldr	r0, [pc, #236]	@ (8001958 <MX_GPIO_Init+0x314>)
 800186a:	f003 fbdd 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800186e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8001872:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4834      	ldr	r0, [pc, #208]	@ (8001958 <MX_GPIO_Init+0x314>)
 8001888:	f003 fbce 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800188c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001890:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001892:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	482e      	ldr	r0, [pc, #184]	@ (800195c <MX_GPIO_Init+0x318>)
 80018a4:	f003 fbc0 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80018a8:	f243 0381 	movw	r3, #12417	@ 0x3081
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4826      	ldr	r0, [pc, #152]	@ (800195c <MX_GPIO_Init+0x318>)
 80018c2:	f003 fbb1 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80018c6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80018ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4820      	ldr	r0, [pc, #128]	@ (8001960 <MX_GPIO_Init+0x31c>)
 80018e0:	f003 fba2 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80018e4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	4819      	ldr	r0, [pc, #100]	@ (8001960 <MX_GPIO_Init+0x31c>)
 80018fc:	f003 fb94 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001900:	2302      	movs	r3, #2
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001910:	2305      	movs	r3, #5
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	4810      	ldr	r0, [pc, #64]	@ (800195c <MX_GPIO_Init+0x318>)
 800191c:	f003 fb84 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001920:	2378      	movs	r3, #120	@ 0x78
 8001922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001930:	2307      	movs	r3, #7
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4808      	ldr	r0, [pc, #32]	@ (800195c <MX_GPIO_Init+0x318>)
 800193c:	f003 fb74 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001940:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001946:	2312      	movs	r3, #18
 8001948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	e00a      	b.n	8001964 <MX_GPIO_Init+0x320>
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	48001000 	.word	0x48001000
 8001958:	48000400 	.word	0x48000400
 800195c:	48000c00 	.word	0x48000c00
 8001960:	48000800 	.word	0x48000800
 8001964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800196a:	2304      	movs	r3, #4
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	480b      	ldr	r0, [pc, #44]	@ (80019a4 <MX_GPIO_Init+0x360>)
 8001976:	f003 fb57 	bl	8005028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2105      	movs	r1, #5
 800197e:	2017      	movs	r0, #23
 8001980:	f003 f9cd 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001984:	2017      	movs	r0, #23
 8001986:	f003 f9e6 	bl	8004d56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2105      	movs	r1, #5
 800198e:	2028      	movs	r0, #40	@ 0x28
 8001990:	f003 f9c5 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001994:	2028      	movs	r0, #40	@ 0x28
 8001996:	f003 f9de 	bl	8004d56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	@ 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	48000400 	.word	0x48000400

080019a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019b8:	d02e      	beq.n	8001a18 <HAL_GPIO_EXTI_Callback+0x70>
 80019ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019be:	dc6a      	bgt.n	8001a96 <HAL_GPIO_EXTI_Callback+0xee>
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_EXTI_Callback+0x24>
 80019c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_EXTI_Callback+0x2a>
      }
      break;
    }
    default:
    {
      break;
 80019ca:	e064      	b.n	8001a96 <HAL_GPIO_EXTI_Callback+0xee>
      SPI_WIFI_ISR();
 80019cc:	f002 faea 	bl	8003fa4 <SPI_WIFI_ISR>
      break;
 80019d0:	e068      	b.n	8001aa4 <HAL_GPIO_EXTI_Callback+0xfc>
      printf("interrupt\n");
 80019d2:	4836      	ldr	r0, [pc, #216]	@ (8001aac <HAL_GPIO_EXTI_Callback+0x104>)
 80019d4:	f00d fb1e 	bl	800f014 <puts>
      current_orientation = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_D6D_SRC);
 80019d8:	211d      	movs	r1, #29
 80019da:	20d4      	movs	r0, #212	@ 0xd4
 80019dc:	f002 fd18 	bl	8004410 <SENSOR_IO_Read>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b32      	ldr	r3, [pc, #200]	@ (8001ab0 <HAL_GPIO_EXTI_Callback+0x108>)
 80019e6:	701a      	strb	r2, [r3, #0]
      if(volume_mode == 1) break;
 80019e8:	4b32      	ldr	r3, [pc, #200]	@ (8001ab4 <HAL_GPIO_EXTI_Callback+0x10c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d054      	beq.n	8001a9a <HAL_GPIO_EXTI_Callback+0xf2>
      isr_times++;
 80019f0:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <HAL_GPIO_EXTI_Callback+0x110>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab8 <HAL_GPIO_EXTI_Callback+0x110>)
 80019fa:	701a      	strb	r2, [r3, #0]
      if(isr_times == 1){
 80019fc:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab8 <HAL_GPIO_EXTI_Callback+0x110>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d14c      	bne.n	8001a9e <HAL_GPIO_EXTI_Callback+0xf6>
    	  new_orientation = current_orientation;
 8001a04:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab0 <HAL_GPIO_EXTI_Callback+0x108>)
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	4b2c      	ldr	r3, [pc, #176]	@ (8001abc <HAL_GPIO_EXTI_Callback+0x114>)
 8001a0a:	701a      	strb	r2, [r3, #0]
    	  osSemaphoreRelease(convStartHandle);
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <HAL_GPIO_EXTI_Callback+0x118>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f009 fa69 	bl	800aee8 <osSemaphoreRelease>
      break;
 8001a16:	e042      	b.n	8001a9e <HAL_GPIO_EXTI_Callback+0xf6>
      printf("button\n");
 8001a18:	482a      	ldr	r0, [pc, #168]	@ (8001ac4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001a1a:	f00d fafb 	bl	800f014 <puts>
      if(volume_mode == 0){
 8001a1e:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d118      	bne.n	8001a58 <HAL_GPIO_EXTI_Callback+0xb0>
    	  if(init_position == 0) break;
 8001a26:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <HAL_GPIO_EXTI_Callback+0x120>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d039      	beq.n	8001aa2 <HAL_GPIO_EXTI_Callback+0xfa>
    	  volume_mode = 1;
 8001a2e:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
    	  angle = 0;
 8001a34:	4b25      	ldr	r3, [pc, #148]	@ (8001acc <HAL_GPIO_EXTI_Callback+0x124>)
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
    	  calculate_times = 0;
 8001a3c:	4b24      	ldr	r3, [pc, #144]	@ (8001ad0 <HAL_GPIO_EXTI_Callback+0x128>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
    	  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001a42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a46:	4823      	ldr	r0, [pc, #140]	@ (8001ad4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001a48:	f003 fdbc 	bl	80055c4 <HAL_GPIO_TogglePin>
    		  osSemaphoreRelease(commStartHandle);
 8001a4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ad8 <HAL_GPIO_EXTI_Callback+0x130>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f009 fa49 	bl	800aee8 <osSemaphoreRelease>
      break;
 8001a56:	e025      	b.n	8001aa4 <HAL_GPIO_EXTI_Callback+0xfc>
    	  HAL_TIM_Base_Stop_IT(&htim6);
 8001a58:	4820      	ldr	r0, [pc, #128]	@ (8001adc <HAL_GPIO_EXTI_Callback+0x134>)
 8001a5a:	f007 ffe9 	bl	8009a30 <HAL_TIM_Base_Stop_IT>
    	  volume_mode = 0;
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
    	  isr_times = 0;
 8001a64:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <HAL_GPIO_EXTI_Callback+0x110>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
    	  if(current_orientation == 0x60){
 8001a6a:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <HAL_GPIO_EXTI_Callback+0x108>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b60      	cmp	r3, #96	@ 0x60
 8001a70:	d108      	bne.n	8001a84 <HAL_GPIO_EXTI_Callback+0xdc>
    		  init_position = 1;
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_GPIO_EXTI_Callback+0x120>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
    		  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001a78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a7c:	4815      	ldr	r0, [pc, #84]	@ (8001ad4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001a7e:	f003 fda1 	bl	80055c4 <HAL_GPIO_TogglePin>
 8001a82:	e002      	b.n	8001a8a <HAL_GPIO_EXTI_Callback+0xe2>
    	  else init_position = 0;
 8001a84:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_GPIO_EXTI_Callback+0x120>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
    		  osSemaphoreRelease(commStartHandle);
 8001a8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <HAL_GPIO_EXTI_Callback+0x130>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f009 fa2a 	bl	800aee8 <osSemaphoreRelease>
      break;
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_EXTI_Callback+0xfc>
      break;
 8001a96:	bf00      	nop
 8001a98:	e004      	b.n	8001aa4 <HAL_GPIO_EXTI_Callback+0xfc>
      if(volume_mode == 1) break;
 8001a9a:	bf00      	nop
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_EXTI_Callback+0xfc>
      break;
 8001a9e:	bf00      	nop
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_EXTI_Callback+0xfc>
    	  if(init_position == 0) break;
 8001aa2:	bf00      	nop
    }
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	08012f20 	.word	0x08012f20
 8001ab0:	20000ef0 	.word	0x20000ef0
 8001ab4:	20000ee0 	.word	0x20000ee0
 8001ab8:	20000eed 	.word	0x20000eed
 8001abc:	20000eef 	.word	0x20000eef
 8001ac0:	20000c1c 	.word	0x20000c1c
 8001ac4:	08012f2c 	.word	0x08012f2c
 8001ac8:	20000eee 	.word	0x20000eee
 8001acc:	20000ee4 	.word	0x20000ee4
 8001ad0:	20000eec 	.word	0x20000eec
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	20000c70 	.word	0x20000c70
 8001adc:	200003d4 	.word	0x200003d4

08001ae0 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <SPI3_IRQHandler+0x10>)
 8001ae6:	f007 f865 	bl	8008bb4 <HAL_SPI_IRQHandler>
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000f08 	.word	0x20000f08

08001af4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	if(htim == &htim6 && volume_mode == 1){
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a08      	ldr	r2, [pc, #32]	@ (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d108      	bne.n	8001b16 <HAL_TIM_PeriodElapsedCallback+0x22>
 8001b04:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d104      	bne.n	8001b16 <HAL_TIM_PeriodElapsedCallback+0x22>
		osSemaphoreRelease(timerEvtHandle);
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f009 f9e9 	bl	800aee8 <osSemaphoreRelease>
	}
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200003d4 	.word	0x200003d4
 8001b24:	20000ee0 	.word	0x20000ee0
 8001b28:	20000bc8 	.word	0x20000bc8

08001b2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  	osSemaphoreAcquire(convStartHandle, osWaitForever);
 8001b34:	4b79      	ldr	r3, [pc, #484]	@ (8001d1c <StartDefaultTask+0x1f0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f009 f981 	bl	800ae44 <osSemaphoreAcquire>
		uint8_t legal = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]

		while(isr_times >= 1){
 8001b46:	e00d      	b.n	8001b64 <StartDefaultTask+0x38>
			osDelay(500);
 8001b48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b4c:	f009 f8d6 	bl	800acfc <osDelay>
			isr_times = (isr_times == 1) ? 0 : 1;
 8001b50:	4b73      	ldr	r3, [pc, #460]	@ (8001d20 <StartDefaultTask+0x1f4>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b6f      	ldr	r3, [pc, #444]	@ (8001d20 <StartDefaultTask+0x1f4>)
 8001b62:	701a      	strb	r2, [r3, #0]
		while(isr_times >= 1){
 8001b64:	4b6e      	ldr	r3, [pc, #440]	@ (8001d20 <StartDefaultTask+0x1f4>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ed      	bne.n	8001b48 <StartDefaultTask+0x1c>
		}

		if(new_orientation == current_orientation) legal = 1;
 8001b6c:	4b6d      	ldr	r3, [pc, #436]	@ (8001d24 <StartDefaultTask+0x1f8>)
 8001b6e:	781a      	ldrb	r2, [r3, #0]
 8001b70:	4b6d      	ldr	r3, [pc, #436]	@ (8001d28 <StartDefaultTask+0x1fc>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d101      	bne.n	8001b7c <StartDefaultTask+0x50>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]


		if(legal == 1){
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	f040 80c1 	bne.w	8001d06 <StartDefaultTask+0x1da>
	//		printf("%x\n",new_orientation);
			legal = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
			switch (new_orientation)
 8001b88:	4b66      	ldr	r3, [pc, #408]	@ (8001d24 <StartDefaultTask+0x1f8>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	3b41      	subs	r3, #65	@ 0x41
 8001b8e:	2b1f      	cmp	r3, #31
 8001b90:	f200 80b0 	bhi.w	8001cf4 <StartDefaultTask+0x1c8>
 8001b94:	a201      	add	r2, pc, #4	@ (adr r2, 8001b9c <StartDefaultTask+0x70>)
 8001b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9a:	bf00      	nop
 8001b9c:	08001cc5 	.word	0x08001cc5
 8001ba0:	08001c95 	.word	0x08001c95
 8001ba4:	08001cf5 	.word	0x08001cf5
 8001ba8:	08001c35 	.word	0x08001c35
 8001bac:	08001cf5 	.word	0x08001cf5
 8001bb0:	08001cf5 	.word	0x08001cf5
 8001bb4:	08001cf5 	.word	0x08001cf5
 8001bb8:	08001c65 	.word	0x08001c65
 8001bbc:	08001cf5 	.word	0x08001cf5
 8001bc0:	08001cf5 	.word	0x08001cf5
 8001bc4:	08001cf5 	.word	0x08001cf5
 8001bc8:	08001cf5 	.word	0x08001cf5
 8001bcc:	08001cf5 	.word	0x08001cf5
 8001bd0:	08001cf5 	.word	0x08001cf5
 8001bd4:	08001cf5 	.word	0x08001cf5
 8001bd8:	08001cf5 	.word	0x08001cf5
 8001bdc:	08001cf5 	.word	0x08001cf5
 8001be0:	08001cf5 	.word	0x08001cf5
 8001be4:	08001cf5 	.word	0x08001cf5
 8001be8:	08001cf5 	.word	0x08001cf5
 8001bec:	08001cf5 	.word	0x08001cf5
 8001bf0:	08001cf5 	.word	0x08001cf5
 8001bf4:	08001cf5 	.word	0x08001cf5
 8001bf8:	08001cf5 	.word	0x08001cf5
 8001bfc:	08001cf5 	.word	0x08001cf5
 8001c00:	08001cf5 	.word	0x08001cf5
 8001c04:	08001cf5 	.word	0x08001cf5
 8001c08:	08001cf5 	.word	0x08001cf5
 8001c0c:	08001cf5 	.word	0x08001cf5
 8001c10:	08001cf5 	.word	0x08001cf5
 8001c14:	08001cf5 	.word	0x08001cf5
 8001c18:	08001c1d 	.word	0x08001c1d
			{
				case (0x60) :
							{
								printf("back to inital\n");
 8001c1c:	4843      	ldr	r0, [pc, #268]	@ (8001d2c <StartDefaultTask+0x200>)
 8001c1e:	f00d f9f9 	bl	800f014 <puts>
								init_position = 1;
 8001c22:	4b43      	ldr	r3, [pc, #268]	@ (8001d30 <StartDefaultTask+0x204>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
								HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001c28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c2c:	4841      	ldr	r0, [pc, #260]	@ (8001d34 <StartDefaultTask+0x208>)
 8001c2e:	f003 fcc9 	bl	80055c4 <HAL_GPIO_TogglePin>
								break;
 8001c32:	e068      	b.n	8001d06 <StartDefaultTask+0x1da>
							}
				case (0x44) :
							{
								if(init_position == 1){
 8001c34:	4b3e      	ldr	r3, [pc, #248]	@ (8001d30 <StartDefaultTask+0x204>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d15d      	bne.n	8001cf8 <StartDefaultTask+0x1cc>
									printf("right\n");
 8001c3c:	483e      	ldr	r0, [pc, #248]	@ (8001d38 <StartDefaultTask+0x20c>)
 8001c3e:	f00d f9e9 	bl	800f014 <puts>
									init_position = 0;
 8001c42:	4b3b      	ldr	r3, [pc, #236]	@ (8001d30 <StartDefaultTask+0x204>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001c48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c4c:	4839      	ldr	r0, [pc, #228]	@ (8001d34 <StartDefaultTask+0x208>)
 8001c4e:	f003 fcb9 	bl	80055c4 <HAL_GPIO_TogglePin>

									send_command = TxData_right;
 8001c52:	4b3a      	ldr	r3, [pc, #232]	@ (8001d3c <StartDefaultTask+0x210>)
 8001c54:	4a3a      	ldr	r2, [pc, #232]	@ (8001d40 <StartDefaultTask+0x214>)
 8001c56:	601a      	str	r2, [r3, #0]
									send_command_len = sizeof(TxData_right);
 8001c58:	4b3a      	ldr	r3, [pc, #232]	@ (8001d44 <StartDefaultTask+0x218>)
 8001c5a:	2206      	movs	r2, #6
 8001c5c:	801a      	strh	r2, [r3, #0]
									legal = 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	73fb      	strb	r3, [r7, #15]
								}
								break;
 8001c62:	e049      	b.n	8001cf8 <StartDefaultTask+0x1cc>
							}
				case (0x48) :
							{
								if(init_position == 1){
 8001c64:	4b32      	ldr	r3, [pc, #200]	@ (8001d30 <StartDefaultTask+0x204>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d147      	bne.n	8001cfc <StartDefaultTask+0x1d0>
									printf("left\n");
 8001c6c:	4836      	ldr	r0, [pc, #216]	@ (8001d48 <StartDefaultTask+0x21c>)
 8001c6e:	f00d f9d1 	bl	800f014 <puts>
									init_position = 0;
 8001c72:	4b2f      	ldr	r3, [pc, #188]	@ (8001d30 <StartDefaultTask+0x204>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001c78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c7c:	482d      	ldr	r0, [pc, #180]	@ (8001d34 <StartDefaultTask+0x208>)
 8001c7e:	f003 fca1 	bl	80055c4 <HAL_GPIO_TogglePin>

									send_command = TxData_left;
 8001c82:	4b2e      	ldr	r3, [pc, #184]	@ (8001d3c <StartDefaultTask+0x210>)
 8001c84:	4a31      	ldr	r2, [pc, #196]	@ (8001d4c <StartDefaultTask+0x220>)
 8001c86:	601a      	str	r2, [r3, #0]
									send_command_len = sizeof(TxData_left);
 8001c88:	4b2e      	ldr	r3, [pc, #184]	@ (8001d44 <StartDefaultTask+0x218>)
 8001c8a:	2205      	movs	r2, #5
 8001c8c:	801a      	strh	r2, [r3, #0]
									legal = 1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	73fb      	strb	r3, [r7, #15]
								}
								break;
 8001c92:	e033      	b.n	8001cfc <StartDefaultTask+0x1d0>
							}
				case (0x42) :
							{
								if(init_position == 1){
 8001c94:	4b26      	ldr	r3, [pc, #152]	@ (8001d30 <StartDefaultTask+0x204>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d131      	bne.n	8001d00 <StartDefaultTask+0x1d4>
									printf("down\n");
 8001c9c:	482c      	ldr	r0, [pc, #176]	@ (8001d50 <StartDefaultTask+0x224>)
 8001c9e:	f00d f9b9 	bl	800f014 <puts>
									init_position = 0;
 8001ca2:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <StartDefaultTask+0x204>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001ca8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cac:	4821      	ldr	r0, [pc, #132]	@ (8001d34 <StartDefaultTask+0x208>)
 8001cae:	f003 fc89 	bl	80055c4 <HAL_GPIO_TogglePin>

									send_command = TxData_down;
 8001cb2:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <StartDefaultTask+0x210>)
 8001cb4:	4a27      	ldr	r2, [pc, #156]	@ (8001d54 <StartDefaultTask+0x228>)
 8001cb6:	601a      	str	r2, [r3, #0]
									send_command_len = sizeof(TxData_down);
 8001cb8:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <StartDefaultTask+0x218>)
 8001cba:	2205      	movs	r2, #5
 8001cbc:	801a      	strh	r2, [r3, #0]
									legal = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
								}
								break;
 8001cc2:	e01d      	b.n	8001d00 <StartDefaultTask+0x1d4>
							}
				case (0x41) :
							{
								if(init_position == 1){
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <StartDefaultTask+0x204>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d11b      	bne.n	8001d04 <StartDefaultTask+0x1d8>
									printf("up\n");
 8001ccc:	4822      	ldr	r0, [pc, #136]	@ (8001d58 <StartDefaultTask+0x22c>)
 8001cce:	f00d f9a1 	bl	800f014 <puts>
									init_position = 0;
 8001cd2:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <StartDefaultTask+0x204>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001cd8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cdc:	4815      	ldr	r0, [pc, #84]	@ (8001d34 <StartDefaultTask+0x208>)
 8001cde:	f003 fc71 	bl	80055c4 <HAL_GPIO_TogglePin>

									send_command = TxData_up;
 8001ce2:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <StartDefaultTask+0x210>)
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d5c <StartDefaultTask+0x230>)
 8001ce6:	601a      	str	r2, [r3, #0]
									send_command_len = sizeof(TxData_up);
 8001ce8:	4b16      	ldr	r3, [pc, #88]	@ (8001d44 <StartDefaultTask+0x218>)
 8001cea:	2203      	movs	r2, #3
 8001cec:	801a      	strh	r2, [r3, #0]
									legal = 1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
								}
								break;
 8001cf2:	e007      	b.n	8001d04 <StartDefaultTask+0x1d8>
							}
				default : break;
 8001cf4:	bf00      	nop
 8001cf6:	e006      	b.n	8001d06 <StartDefaultTask+0x1da>
								break;
 8001cf8:	bf00      	nop
 8001cfa:	e004      	b.n	8001d06 <StartDefaultTask+0x1da>
								break;
 8001cfc:	bf00      	nop
 8001cfe:	e002      	b.n	8001d06 <StartDefaultTask+0x1da>
								break;
 8001d00:	bf00      	nop
 8001d02:	e000      	b.n	8001d06 <StartDefaultTask+0x1da>
								break;
 8001d04:	bf00      	nop
			}
		}

		if(wifi_connect == 1 && legal == 1)
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	f47f af13 	bne.w	8001b34 <StartDefaultTask+0x8>
			osSemaphoreRelease(commStartHandle);
 8001d0e:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <StartDefaultTask+0x234>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f009 f8e8 	bl	800aee8 <osSemaphoreRelease>
  {
 8001d18:	e70c      	b.n	8001b34 <StartDefaultTask+0x8>
 8001d1a:	bf00      	nop
 8001d1c:	20000c1c 	.word	0x20000c1c
 8001d20:	20000eed 	.word	0x20000eed
 8001d24:	20000eef 	.word	0x20000eef
 8001d28:	20000ef0 	.word	0x20000ef0
 8001d2c:	08012f34 	.word	0x08012f34
 8001d30:	20000eee 	.word	0x20000eee
 8001d34:	48000400 	.word	0x48000400
 8001d38:	08012f44 	.word	0x08012f44
 8001d3c:	20000ef4 	.word	0x20000ef4
 8001d40:	2000000c 	.word	0x2000000c
 8001d44:	20000ef8 	.word	0x20000ef8
 8001d48:	08012f4c 	.word	0x08012f4c
 8001d4c:	20000014 	.word	0x20000014
 8001d50:	08012f54 	.word	0x08012f54
 8001d54:	20000020 	.word	0x20000020
 8001d58:	08012f5c 	.word	0x08012f5c
 8001d5c:	2000001c 	.word	0x2000001c
 8001d60:	20000c70 	.word	0x20000c70
 8001d64:	00000000 	.word	0x00000000

08001d68 <StartacqTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartacqTask */
void StartacqTask(void *argument)
{
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartacqTask */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(timerEvtHandle, osWaitForever);
 8001d70:	4b79      	ldr	r3, [pc, #484]	@ (8001f58 <StartacqTask+0x1f0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f009 f863 	bl	800ae44 <osSemaphoreAcquire>

	//get acc and gro data

	BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8001d7e:	4877      	ldr	r0, [pc, #476]	@ (8001f5c <StartacqTask+0x1f4>)
 8001d80:	f002 fbc0 	bl	8004504 <BSP_ACCELERO_AccGetXYZ>

	BSP_GYRO_GetXYZ(pfDataXYZ);
 8001d84:	4876      	ldr	r0, [pc, #472]	@ (8001f60 <StartacqTask+0x1f8>)
 8001d86:	f002 fc17 	bl	80045b8 <BSP_GYRO_GetXYZ>

	float pos_or_neg = 0.0;
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
	if(pDataXYZ[0] > 0) pos_or_neg = -1.0;
 8001d90:	4b72      	ldr	r3, [pc, #456]	@ (8001f5c <StartacqTask+0x1f4>)
 8001d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	dd02      	ble.n	8001da0 <StartacqTask+0x38>
 8001d9a:	4b72      	ldr	r3, [pc, #456]	@ (8001f64 <StartacqTask+0x1fc>)
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e002      	b.n	8001da6 <StartacqTask+0x3e>
	else pos_or_neg = 1.0;
 8001da0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001da4:	617b      	str	r3, [r7, #20]

	float acc_angle;
	if(pDataXYZ[2] == 0) acc_angle = pos_or_neg * 90.0;
 8001da6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f5c <StartacqTask+0x1f4>)
 8001da8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d108      	bne.n	8001dc2 <StartacqTask+0x5a>
 8001db0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001db4:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001f68 <StartacqTask+0x200>
 8001db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dbc:	edc7 7a04 	vstr	s15, [r7, #16]
 8001dc0:	e032      	b.n	8001e28 <StartacqTask+0xc0>
	else acc_angle = pos_or_neg*atan2f(abs(pDataXYZ[0]),abs(pDataXYZ[2]))*(180.0/PI);
 8001dc2:	4b66      	ldr	r3, [pc, #408]	@ (8001f5c <StartacqTask+0x1f4>)
 8001dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bfb8      	it	lt
 8001dcc:	425b      	neglt	r3, r3
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd8:	4b60      	ldr	r3, [pc, #384]	@ (8001f5c <StartacqTask+0x1f4>)
 8001dda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bfb8      	it	lt
 8001de2:	425b      	neglt	r3, r3
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	ee07 3a10 	vmov	s14, r3
 8001dea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dee:	eef0 0a47 	vmov.f32	s1, s14
 8001df2:	eeb0 0a67 	vmov.f32	s0, s15
 8001df6:	f010 fde3 	bl	80129c0 <atan2f>
 8001dfa:	eeb0 7a40 	vmov.f32	s14, s0
 8001dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e06:	ee17 0a90 	vmov	r0, s15
 8001e0a:	f7fe fb9d 	bl	8000548 <__aeabi_f2d>
 8001e0e:	a34a      	add	r3, pc, #296	@ (adr r3, 8001f38 <StartacqTask+0x1d0>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe fbf0 	bl	80005f8 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f7fe fee2 	bl	8000be8 <__aeabi_d2f>
 8001e24:	4603      	mov	r3, r0
 8001e26:	613b      	str	r3, [r7, #16]

	angle = weight_gyo * ( angle + (1/50)*(pfDataXYZ[1]+gy_offset)/1000 ) + (1.0 - weight_gyo) * acc_angle;
 8001e28:	4b50      	ldr	r3, [pc, #320]	@ (8001f6c <StartacqTask+0x204>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb8b 	bl	8000548 <__aeabi_f2d>
 8001e32:	4604      	mov	r4, r0
 8001e34:	460d      	mov	r5, r1
 8001e36:	4b4a      	ldr	r3, [pc, #296]	@ (8001f60 <StartacqTask+0x1f8>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fb84 	bl	8000548 <__aeabi_f2d>
 8001e40:	a33f      	add	r3, pc, #252	@ (adr r3, 8001f40 <StartacqTask+0x1d8>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f7fe fa21 	bl	800028c <__adddf3>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	f7fe fbcd 	bl	80005f8 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	4b41      	ldr	r3, [pc, #260]	@ (8001f70 <StartacqTask+0x208>)
 8001e6c:	f7fe fcee 	bl	800084c <__aeabi_ddiv>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4620      	mov	r0, r4
 8001e76:	4629      	mov	r1, r5
 8001e78:	f7fe fa08 	bl	800028c <__adddf3>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	a330      	add	r3, pc, #192	@ (adr r3, 8001f48 <StartacqTask+0x1e0>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	f7fe fbb5 	bl	80005f8 <__aeabi_dmul>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4614      	mov	r4, r2
 8001e94:	461d      	mov	r5, r3
 8001e96:	6938      	ldr	r0, [r7, #16]
 8001e98:	f7fe fb56 	bl	8000548 <__aeabi_f2d>
 8001e9c:	a32c      	add	r3, pc, #176	@ (adr r3, 8001f50 <StartacqTask+0x1e8>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fba9 	bl	80005f8 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7fe f9ed 	bl	800028c <__adddf3>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe95 	bl	8000be8 <__aeabi_d2f>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f6c <StartacqTask+0x204>)
 8001ec2:	6013      	str	r3, [r2, #0]

	if(wifi_connect == 0)
			printf("%f\n",angle);

	int32_t angle_int = (int32_t) angle;
 8001ec4:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <StartacqTask+0x204>)
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ece:	ee17 3a90 	vmov	r3, s15
 8001ed2:	60fb      	str	r3, [r7, #12]
	int32_to_u8(send_angle, angle_int);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <StartacqTask+0x20c>)
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	121b      	asrs	r3, r3, #8
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <StartacqTask+0x20c>)
 8001ee4:	705a      	strb	r2, [r3, #1]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	141b      	asrs	r3, r3, #16
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <StartacqTask+0x20c>)
 8001eee:	709a      	strb	r2, [r3, #2]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	161b      	asrs	r3, r3, #24
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <StartacqTask+0x20c>)
 8001ef8:	70da      	strb	r2, [r3, #3]


	if((wifi_connect == 1) && (++calculate_times >= 10) && (angle_int <= 90) && (angle_int >= -90)){
 8001efa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <StartacqTask+0x210>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <StartacqTask+0x210>)
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <StartacqTask+0x210>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b09      	cmp	r3, #9
 8001f0c:	f67f af30 	bls.w	8001d70 <StartacqTask+0x8>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b5a      	cmp	r3, #90	@ 0x5a
 8001f14:	f73f af2c 	bgt.w	8001d70 <StartacqTask+0x8>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 8001f1e:	f6ff af27 	blt.w	8001d70 <StartacqTask+0x8>
		osSemaphoreRelease(commStartHandle);
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <StartacqTask+0x214>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f008 ffde 	bl	800aee8 <osSemaphoreRelease>
		calculate_times = 0;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <StartacqTask+0x210>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
  {
 8001f32:	e71d      	b.n	8001d70 <StartacqTask+0x8>
 8001f34:	f3af 8000 	nop.w
 8001f38:	1af05a77 	.word	0x1af05a77
 8001f3c:	404ca5dc 	.word	0x404ca5dc
 8001f40:	00000000 	.word	0x00000000
 8001f44:	40ac2200 	.word	0x40ac2200
 8001f48:	66666666 	.word	0x66666666
 8001f4c:	3fe66666 	.word	0x3fe66666
 8001f50:	33333334 	.word	0x33333334
 8001f54:	3fd33333 	.word	0x3fd33333
 8001f58:	20000bc8 	.word	0x20000bc8
 8001f5c:	20000ecc 	.word	0x20000ecc
 8001f60:	20000ed4 	.word	0x20000ed4
 8001f64:	bf800000 	.word	0xbf800000
 8001f68:	42b40000 	.word	0x42b40000
 8001f6c:	20000ee4 	.word	0x20000ee4
 8001f70:	408f4000 	.word	0x408f4000
 8001f74:	20000ee8 	.word	0x20000ee8
 8001f78:	20000eec 	.word	0x20000eec
 8001f7c:	20000c70 	.word	0x20000c70

08001f80 <StartcommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartcommTask */
void StartcommTask(void *argument)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af02      	add	r7, sp, #8
 8001f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartcommTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(commStartHandle, osWaitForever);
 8001f88:	4b51      	ldr	r3, [pc, #324]	@ (80020d0 <StartcommTask+0x150>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	4618      	mov	r0, r3
 8001f92:	f008 ff57 	bl	800ae44 <osSemaphoreAcquire>
	  if(Socket != -1)
 8001f96:	4b4f      	ldr	r3, [pc, #316]	@ (80020d4 <StartcommTask+0x154>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9e:	d0f3      	beq.n	8001f88 <StartcommTask+0x8>
	      {
		  	ret = WIFI_STATUS_OK;
 8001fa0:	4b4d      	ldr	r3, [pc, #308]	@ (80020d8 <StartcommTask+0x158>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
		  	if(reliable == 1)
		  		ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 8001fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80020d4 <StartcommTask+0x154>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80020dc <StartcommTask+0x15c>)
 8001fb4:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001fb8:	4949      	ldr	r1, [pc, #292]	@ (80020e0 <StartcommTask+0x160>)
 8001fba:	f002 f8f3 	bl	80041a4 <WIFI_ReceiveData>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b45      	ldr	r3, [pc, #276]	@ (80020d8 <StartcommTask+0x158>)
 8001fc4:	601a      	str	r2, [r3, #0]

	        if(ret == WIFI_STATUS_OK)
 8001fc6:	4b44      	ldr	r3, [pc, #272]	@ (80020d8 <StartcommTask+0x158>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d178      	bne.n	80020c0 <StartcommTask+0x140>
	        {
	          if(Datalen > 0 || reliable == 0)
 8001fce:	4b43      	ldr	r3, [pc, #268]	@ (80020dc <StartcommTask+0x15c>)
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0d8      	beq.n	8001f88 <StartcommTask+0x8>
	          {
	        	if(reliable == 1){
	        		RxData[Datalen]=0;
 8001fd6:	4b41      	ldr	r3, [pc, #260]	@ (80020dc <StartcommTask+0x15c>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b40      	ldr	r3, [pc, #256]	@ (80020e0 <StartcommTask+0x160>)
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]
	        		printf("Received: %s\n",RxData);
 8001fe2:	493f      	ldr	r1, [pc, #252]	@ (80020e0 <StartcommTask+0x160>)
 8001fe4:	483f      	ldr	r0, [pc, #252]	@ (80020e4 <StartcommTask+0x164>)
 8001fe6:	f00c ffad 	bl	800ef44 <iprintf>
	        	}



	            if(volume_mode == 0 && wifi_volume_mode == 0){
 8001fea:	4b3f      	ldr	r3, [pc, #252]	@ (80020e8 <StartcommTask+0x168>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d115      	bne.n	800201e <StartcommTask+0x9e>
 8001ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80020ec <StartcommTask+0x16c>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d111      	bne.n	800201e <StartcommTask+0x9e>
	            	ret = WIFI_SendData(Socket, send_command, send_command_len, &Datalen, WIFI_WRITE_TIMEOUT);
 8001ffa:	4b36      	ldr	r3, [pc, #216]	@ (80020d4 <StartcommTask+0x154>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	4b3b      	ldr	r3, [pc, #236]	@ (80020f0 <StartcommTask+0x170>)
 8002002:	6819      	ldr	r1, [r3, #0]
 8002004:	4b3b      	ldr	r3, [pc, #236]	@ (80020f4 <StartcommTask+0x174>)
 8002006:	881a      	ldrh	r2, [r3, #0]
 8002008:	f242 7310 	movw	r3, #10000	@ 0x2710
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4b33      	ldr	r3, [pc, #204]	@ (80020dc <StartcommTask+0x15c>)
 8002010:	f002 f8a6 	bl	8004160 <WIFI_SendData>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <StartcommTask+0x158>)
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e047      	b.n	80020ae <StartcommTask+0x12e>
	            }
	            else if(volume_mode == 0 && wifi_volume_mode == 1){
 800201e:	4b32      	ldr	r3, [pc, #200]	@ (80020e8 <StartcommTask+0x168>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <StartcommTask+0xd4>
 8002026:	4b31      	ldr	r3, [pc, #196]	@ (80020ec <StartcommTask+0x16c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d112      	bne.n	8002054 <StartcommTask+0xd4>
	            	wifi_volume_mode = 0;
 800202e:	4b2f      	ldr	r3, [pc, #188]	@ (80020ec <StartcommTask+0x16c>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
	            	ret = WIFI_SendData(Socket, TxData_stop, sizeof(TxData_stop), &Datalen, WIFI_WRITE_TIMEOUT);
 8002034:	4b27      	ldr	r3, [pc, #156]	@ (80020d4 <StartcommTask+0x154>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	4b26      	ldr	r3, [pc, #152]	@ (80020dc <StartcommTask+0x15c>)
 8002042:	220c      	movs	r2, #12
 8002044:	492c      	ldr	r1, [pc, #176]	@ (80020f8 <StartcommTask+0x178>)
 8002046:	f002 f88b 	bl	8004160 <WIFI_SendData>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <StartcommTask+0x158>)
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e02c      	b.n	80020ae <StartcommTask+0x12e>
	            }
	            else if(volume_mode == 1 && wifi_volume_mode == 0){
 8002054:	4b24      	ldr	r3, [pc, #144]	@ (80020e8 <StartcommTask+0x168>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d119      	bne.n	8002090 <StartcommTask+0x110>
 800205c:	4b23      	ldr	r3, [pc, #140]	@ (80020ec <StartcommTask+0x16c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d115      	bne.n	8002090 <StartcommTask+0x110>
	            	wifi_volume_mode = 1;
 8002064:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <StartcommTask+0x16c>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
	            	ret = WIFI_SendData(Socket, TxData_start, sizeof(TxData_start), &Datalen, WIFI_WRITE_TIMEOUT);
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <StartcommTask+0x154>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <StartcommTask+0x15c>)
 8002078:	220d      	movs	r2, #13
 800207a:	4920      	ldr	r1, [pc, #128]	@ (80020fc <StartcommTask+0x17c>)
 800207c:	f002 f870 	bl	8004160 <WIFI_SendData>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <StartcommTask+0x158>)
 8002086:	601a      	str	r2, [r3, #0]
	            	HAL_TIM_Base_Start_IT(&htim6);
 8002088:	481d      	ldr	r0, [pc, #116]	@ (8002100 <StartcommTask+0x180>)
 800208a:	f007 fc61 	bl	8009950 <HAL_TIM_Base_Start_IT>
 800208e:	e00e      	b.n	80020ae <StartcommTask+0x12e>
	            }
	            else{
	            	ret = WIFI_SendData(Socket, send_angle, 2, &Datalen, WIFI_WRITE_TIMEOUT);
 8002090:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <StartcommTask+0x154>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f242 7310 	movw	r3, #10000	@ 0x2710
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <StartcommTask+0x15c>)
 800209e:	2202      	movs	r2, #2
 80020a0:	4918      	ldr	r1, [pc, #96]	@ (8002104 <StartcommTask+0x184>)
 80020a2:	f002 f85d 	bl	8004160 <WIFI_SendData>
 80020a6:	4603      	mov	r3, r0
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <StartcommTask+0x158>)
 80020ac:	601a      	str	r2, [r3, #0]
	            }

	            if (ret != WIFI_STATUS_OK)
 80020ae:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <StartcommTask+0x158>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f43f af68 	beq.w	8001f88 <StartcommTask+0x8>
	            {
	              printf("> ERROR : Failed to Send Data, connection closed\n");
 80020b8:	4813      	ldr	r0, [pc, #76]	@ (8002108 <StartcommTask+0x188>)
 80020ba:	f00c ffab 	bl	800f014 <puts>
	              break;
 80020be:	e002      	b.n	80020c6 <StartcommTask+0x146>
	            }
	          }
	        }
	        else
	        {
	          printf("> ERROR : Failed to Receive Data, connection closed\n");
 80020c0:	4812      	ldr	r0, [pc, #72]	@ (800210c <StartcommTask+0x18c>)
 80020c2:	f00c ffa7 	bl	800f014 <puts>
	          break;
	        }
	      }
  }
  /* USER CODE END StartcommTask */
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000c70 	.word	0x20000c70
 80020d4:	20000004 	.word	0x20000004
 80020d8:	20000ec8 	.word	0x20000ec8
 80020dc:	20000ec4 	.word	0x20000ec4
 80020e0:	20000cc4 	.word	0x20000cc4
 80020e4:	08012f60 	.word	0x08012f60
 80020e8:	20000ee0 	.word	0x20000ee0
 80020ec:	20000ee1 	.word	0x20000ee1
 80020f0:	20000ef4 	.word	0x20000ef4
 80020f4:	20000ef8 	.word	0x20000ef8
 80020f8:	20000038 	.word	0x20000038
 80020fc:	20000028 	.word	0x20000028
 8002100:	200003d4 	.word	0x200003d4
 8002104:	20000ee8 	.word	0x20000ee8
 8002108:	08012f70 	.word	0x08012f70
 800210c:	08012fa4 	.word	0x08012fa4

08002110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002114:	b672      	cpsid	i
}
 8002116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <Error_Handler+0x8>

0800211c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <HAL_MspInit+0x4c>)
 8002124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002126:	4a10      	ldr	r2, [pc, #64]	@ (8002168 <HAL_MspInit+0x4c>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6613      	str	r3, [r2, #96]	@ 0x60
 800212e:	4b0e      	ldr	r3, [pc, #56]	@ (8002168 <HAL_MspInit+0x4c>)
 8002130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_MspInit+0x4c>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <HAL_MspInit+0x4c>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002144:	6593      	str	r3, [r2, #88]	@ 0x58
 8002146:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <HAL_MspInit+0x4c>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	210f      	movs	r1, #15
 8002156:	f06f 0001 	mvn.w	r0, #1
 800215a:	f002 fde0 	bl	8004d1e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000

0800216c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b0ac      	sub	sp, #176	@ 0xb0
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	2288      	movs	r2, #136	@ 0x88
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f00d f851 	bl	800f234 <memset>
  if(DFSDM1_Init == 0)
 8002192:	4b25      	ldr	r3, [pc, #148]	@ (8002228 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d142      	bne.n	8002220 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800219a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800219e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 ffbe 	bl	800712c <HAL_RCCEx_PeriphCLKConfig>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80021b6:	f7ff ffab 	bl	8002110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80021ba:	4b1c      	ldr	r3, [pc, #112]	@ (800222c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021be:	4a1b      	ldr	r2, [pc, #108]	@ (800222c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021c6:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021d2:	4b16      	ldr	r3, [pc, #88]	@ (800222c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	4a15      	ldr	r2, [pc, #84]	@ (800222c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021d8:	f043 0310 	orr.w	r3, r3, #16
 80021dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021de:	4b13      	ldr	r3, [pc, #76]	@ (800222c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80021ea:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80021ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002204:	2306      	movs	r3, #6
 8002206:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800220a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800220e:	4619      	mov	r1, r3
 8002210:	4807      	ldr	r0, [pc, #28]	@ (8002230 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002212:	f002 ff09 	bl	8005028 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8002216:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	4a02      	ldr	r2, [pc, #8]	@ (8002228 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800221e:	6013      	str	r3, [r2, #0]
  }

}
 8002220:	bf00      	nop
 8002222:	37b0      	adds	r7, #176	@ 0xb0
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000efc 	.word	0x20000efc
 800222c:	40021000 	.word	0x40021000
 8002230:	48001000 	.word	0x48001000

08002234 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b0ac      	sub	sp, #176	@ 0xb0
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2288      	movs	r2, #136	@ 0x88
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f00c ffed 	bl	800f234 <memset>
  if(hi2c->Instance==I2C2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a21      	ldr	r2, [pc, #132]	@ (80022e4 <HAL_I2C_MspInit+0xb0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d13b      	bne.n	80022dc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002268:	2300      	movs	r3, #0
 800226a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4618      	mov	r0, r3
 8002272:	f004 ff5b 	bl	800712c <HAL_RCCEx_PeriphCLKConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800227c:	f7ff ff48 	bl	8002110 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002280:	4b19      	ldr	r3, [pc, #100]	@ (80022e8 <HAL_I2C_MspInit+0xb4>)
 8002282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002284:	4a18      	ldr	r2, [pc, #96]	@ (80022e8 <HAL_I2C_MspInit+0xb4>)
 8002286:	f043 0302 	orr.w	r3, r3, #2
 800228a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800228c:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <HAL_I2C_MspInit+0xb4>)
 800228e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002298:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800229c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a0:	2312      	movs	r3, #18
 80022a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022b2:	2304      	movs	r3, #4
 80022b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022bc:	4619      	mov	r1, r3
 80022be:	480b      	ldr	r0, [pc, #44]	@ (80022ec <HAL_I2C_MspInit+0xb8>)
 80022c0:	f002 feb2 	bl	8005028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022c4:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <HAL_I2C_MspInit+0xb4>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	4a07      	ldr	r2, [pc, #28]	@ (80022e8 <HAL_I2C_MspInit+0xb4>)
 80022ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <HAL_I2C_MspInit+0xb4>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80022dc:	bf00      	nop
 80022de:	37b0      	adds	r7, #176	@ 0xb0
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40005800 	.word	0x40005800
 80022e8:	40021000 	.word	0x40021000
 80022ec:	48000400 	.word	0x48000400

080022f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0b      	ldr	r2, [pc, #44]	@ (800232c <HAL_I2C_MspDeInit+0x3c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10f      	bne.n	8002322 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002302:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_I2C_MspDeInit+0x40>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <HAL_I2C_MspDeInit+0x40>)
 8002308:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800230c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800230e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002312:	4808      	ldr	r0, [pc, #32]	@ (8002334 <HAL_I2C_MspDeInit+0x44>)
 8002314:	f003 f832 	bl	800537c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002318:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800231c:	4805      	ldr	r0, [pc, #20]	@ (8002334 <HAL_I2C_MspDeInit+0x44>)
 800231e:	f003 f82d 	bl	800537c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40005800 	.word	0x40005800
 8002330:	40021000 	.word	0x40021000
 8002334:	48000400 	.word	0x48000400

08002338 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	@ 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <HAL_QSPI_MspInit+0x7c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d128      	bne.n	80023ac <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800235a:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <HAL_QSPI_MspInit+0x80>)
 800235c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800235e:	4a16      	ldr	r2, [pc, #88]	@ (80023b8 <HAL_QSPI_MspInit+0x80>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002364:	6513      	str	r3, [r2, #80]	@ 0x50
 8002366:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <HAL_QSPI_MspInit+0x80>)
 8002368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800236a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002372:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_QSPI_MspInit+0x80>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	4a10      	ldr	r2, [pc, #64]	@ (80023b8 <HAL_QSPI_MspInit+0x80>)
 8002378:	f043 0310 	orr.w	r3, r3, #16
 800237c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <HAL_QSPI_MspInit+0x80>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800238a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800238e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800239c:	230a      	movs	r3, #10
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	4805      	ldr	r0, [pc, #20]	@ (80023bc <HAL_QSPI_MspInit+0x84>)
 80023a8:	f002 fe3e 	bl	8005028 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80023ac:	bf00      	nop
 80023ae:	3728      	adds	r7, #40	@ 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	a0001000 	.word	0xa0001000
 80023b8:	40021000 	.word	0x40021000
 80023bc:	48001000 	.word	0x48001000

080023c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	@ 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a17      	ldr	r2, [pc, #92]	@ (800243c <HAL_SPI_MspInit+0x7c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d128      	bne.n	8002434 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80023e2:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <HAL_SPI_MspInit+0x80>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e6:	4a16      	ldr	r2, [pc, #88]	@ (8002440 <HAL_SPI_MspInit+0x80>)
 80023e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ee:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <HAL_SPI_MspInit+0x80>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023fa:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <HAL_SPI_MspInit+0x80>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fe:	4a10      	ldr	r2, [pc, #64]	@ (8002440 <HAL_SPI_MspInit+0x80>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <HAL_SPI_MspInit+0x80>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002412:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002424:	2306      	movs	r3, #6
 8002426:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	4805      	ldr	r0, [pc, #20]	@ (8002444 <HAL_SPI_MspInit+0x84>)
 8002430:	f002 fdfa 	bl	8005028 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002434:	bf00      	nop
 8002436:	3728      	adds	r7, #40	@ 0x28
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40003c00 	.word	0x40003c00
 8002440:	40021000 	.word	0x40021000
 8002444:	48000800 	.word	0x48000800

08002448 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a08      	ldr	r2, [pc, #32]	@ (8002478 <HAL_SPI_MspDeInit+0x30>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d10a      	bne.n	8002470 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800245a:	4b08      	ldr	r3, [pc, #32]	@ (800247c <HAL_SPI_MspDeInit+0x34>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245e:	4a07      	ldr	r2, [pc, #28]	@ (800247c <HAL_SPI_MspDeInit+0x34>)
 8002460:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002464:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8002466:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800246a:	4805      	ldr	r0, [pc, #20]	@ (8002480 <HAL_SPI_MspDeInit+0x38>)
 800246c:	f002 ff86 	bl	800537c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40003c00 	.word	0x40003c00
 800247c:	40021000 	.word	0x40021000
 8002480:	48000800 	.word	0x48000800

08002484 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0d      	ldr	r2, [pc, #52]	@ (80024c8 <HAL_TIM_Base_MspInit+0x44>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d113      	bne.n	80024be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002496:	4b0d      	ldr	r3, [pc, #52]	@ (80024cc <HAL_TIM_Base_MspInit+0x48>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249a:	4a0c      	ldr	r2, [pc, #48]	@ (80024cc <HAL_TIM_Base_MspInit+0x48>)
 800249c:	f043 0310 	orr.w	r3, r3, #16
 80024a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80024a2:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <HAL_TIM_Base_MspInit+0x48>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2105      	movs	r1, #5
 80024b2:	2036      	movs	r0, #54	@ 0x36
 80024b4:	f002 fc33 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024b8:	2036      	movs	r0, #54	@ 0x36
 80024ba:	f002 fc4c 	bl	8004d56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40001000 	.word	0x40001000
 80024cc:	40021000 	.word	0x40021000

080024d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b0ae      	sub	sp, #184	@ 0xb8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	2288      	movs	r2, #136	@ 0x88
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f00c fe9f 	bl	800f234 <memset>
  if(huart->Instance==USART1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a42      	ldr	r2, [pc, #264]	@ (8002604 <HAL_UART_MspInit+0x134>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d13b      	bne.n	8002578 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002500:	2301      	movs	r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002504:	2300      	movs	r3, #0
 8002506:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002508:	f107 031c 	add.w	r3, r7, #28
 800250c:	4618      	mov	r0, r3
 800250e:	f004 fe0d 	bl	800712c <HAL_RCCEx_PeriphCLKConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002518:	f7ff fdfa 	bl	8002110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800251c:	4b3a      	ldr	r3, [pc, #232]	@ (8002608 <HAL_UART_MspInit+0x138>)
 800251e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002520:	4a39      	ldr	r2, [pc, #228]	@ (8002608 <HAL_UART_MspInit+0x138>)
 8002522:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002526:	6613      	str	r3, [r2, #96]	@ 0x60
 8002528:	4b37      	ldr	r3, [pc, #220]	@ (8002608 <HAL_UART_MspInit+0x138>)
 800252a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002534:	4b34      	ldr	r3, [pc, #208]	@ (8002608 <HAL_UART_MspInit+0x138>)
 8002536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002538:	4a33      	ldr	r2, [pc, #204]	@ (8002608 <HAL_UART_MspInit+0x138>)
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002540:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <HAL_UART_MspInit+0x138>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800254c:	23c0      	movs	r3, #192	@ 0xc0
 800254e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002564:	2307      	movs	r3, #7
 8002566:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800256e:	4619      	mov	r1, r3
 8002570:	4826      	ldr	r0, [pc, #152]	@ (800260c <HAL_UART_MspInit+0x13c>)
 8002572:	f002 fd59 	bl	8005028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002576:	e040      	b.n	80025fa <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a24      	ldr	r2, [pc, #144]	@ (8002610 <HAL_UART_MspInit+0x140>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d13b      	bne.n	80025fa <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002582:	2304      	movs	r3, #4
 8002584:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002586:	2300      	movs	r3, #0
 8002588:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800258a:	f107 031c 	add.w	r3, r7, #28
 800258e:	4618      	mov	r0, r3
 8002590:	f004 fdcc 	bl	800712c <HAL_RCCEx_PeriphCLKConfig>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800259a:	f7ff fdb9 	bl	8002110 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800259e:	4b1a      	ldr	r3, [pc, #104]	@ (8002608 <HAL_UART_MspInit+0x138>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a2:	4a19      	ldr	r2, [pc, #100]	@ (8002608 <HAL_UART_MspInit+0x138>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80025aa:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <HAL_UART_MspInit+0x138>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b6:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_UART_MspInit+0x138>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ba:	4a13      	ldr	r2, [pc, #76]	@ (8002608 <HAL_UART_MspInit+0x138>)
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_UART_MspInit+0x138>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80025ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e2:	2303      	movs	r3, #3
 80025e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025e8:	2307      	movs	r3, #7
 80025ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025f2:	4619      	mov	r1, r3
 80025f4:	4807      	ldr	r0, [pc, #28]	@ (8002614 <HAL_UART_MspInit+0x144>)
 80025f6:	f002 fd17 	bl	8005028 <HAL_GPIO_Init>
}
 80025fa:	bf00      	nop
 80025fc:	37b8      	adds	r7, #184	@ 0xb8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40013800 	.word	0x40013800
 8002608:	40021000 	.word	0x40021000
 800260c:	48000400 	.word	0x48000400
 8002610:	40004800 	.word	0x40004800
 8002614:	48000c00 	.word	0x48000c00

08002618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <NMI_Handler+0x4>

08002620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <HardFault_Handler+0x4>

08002628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <MemManage_Handler+0x4>

08002630 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <BusFault_Handler+0x4>

08002638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <UsageFault_Handler+0x4>

08002640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002652:	f002 fa45 	bl	8004ae0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002656:	f00a fbc9 	bl	800cdec <xTaskGetSchedulerState>
 800265a:	4603      	mov	r3, r0
 800265c:	2b01      	cmp	r3, #1
 800265e:	d001      	beq.n	8002664 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002660:	f00b fac2 	bl	800dbe8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}

08002668 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800266c:	2020      	movs	r0, #32
 800266e:	f002 ffc3 	bl	80055f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002672:	2040      	movs	r0, #64	@ 0x40
 8002674:	f002 ffc0 	bl	80055f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002678:	2080      	movs	r0, #128	@ 0x80
 800267a:	f002 ffbd 	bl	80055f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800267e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002682:	f002 ffb9 	bl	80055f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}

0800268a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800268e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002692:	f002 ffb1 	bl	80055f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002696:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800269a:	f002 ffad 	bl	80055f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800269e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80026a2:	f002 ffa9 	bl	80055f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80026a6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80026aa:	f002 ffa5 	bl	80055f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80026ae:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80026b2:	f002 ffa1 	bl	80055f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026c0:	4802      	ldr	r0, [pc, #8]	@ (80026cc <TIM6_DAC_IRQHandler+0x10>)
 80026c2:	f007 f9e4 	bl	8009a8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200003d4 	.word	0x200003d4

080026d0 <EXTI1_IRQHandler>:
//void PendSV_Handler(void)
//{
//}

void EXTI1_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80026d4:	2002      	movs	r0, #2
 80026d6:	f002 ff8f 	bl	80055f8 <HAL_GPIO_EXTI_IRQHandler>
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}

080026de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  return 1;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <_kill>:

int _kill(int pid, int sig)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026f8:	f00c fe86 	bl	800f408 <__errno>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2216      	movs	r2, #22
 8002700:	601a      	str	r2, [r3, #0]
  return -1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_exit>:

void _exit (int status)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002716:	f04f 31ff 	mov.w	r1, #4294967295
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffe7 	bl	80026ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <_exit+0x12>

08002724 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	e00a      	b.n	800274c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002736:	f3af 8000 	nop.w
 800273a:	4601      	mov	r1, r0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	60ba      	str	r2, [r7, #8]
 8002742:	b2ca      	uxtb	r2, r1
 8002744:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3301      	adds	r3, #1
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	dbf0      	blt.n	8002736 <_read+0x12>
  }

  return len;
 8002754:	687b      	ldr	r3, [r7, #4]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	e009      	b.n	8002784 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	60ba      	str	r2, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe fc33 	bl	8000fe4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3301      	adds	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	dbf1      	blt.n	8002770 <_write+0x12>
  }
  return len;
 800278c:	687b      	ldr	r3, [r7, #4]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <_close>:

int _close(int file)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027be:	605a      	str	r2, [r3, #4]
  return 0;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <_isatty>:

int _isatty(int file)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027d6:	2301      	movs	r3, #1
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002808:	4a14      	ldr	r2, [pc, #80]	@ (800285c <_sbrk+0x5c>)
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <_sbrk+0x60>)
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002814:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <_sbrk+0x64>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800281c:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <_sbrk+0x64>)
 800281e:	4a12      	ldr	r2, [pc, #72]	@ (8002868 <_sbrk+0x68>)
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002822:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <_sbrk+0x64>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	429a      	cmp	r2, r3
 800282e:	d207      	bcs.n	8002840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002830:	f00c fdea 	bl	800f408 <__errno>
 8002834:	4603      	mov	r3, r0
 8002836:	220c      	movs	r2, #12
 8002838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295
 800283e:	e009      	b.n	8002854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002840:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <_sbrk+0x64>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002846:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <_sbrk+0x64>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	4a05      	ldr	r2, [pc, #20]	@ (8002864 <_sbrk+0x64>)
 8002850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002852:	68fb      	ldr	r3, [r7, #12]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20018000 	.word	0x20018000
 8002860:	00000400 	.word	0x00000400
 8002864:	20000f00 	.word	0x20000f00
 8002868:	20003358 	.word	0x20003358

0800286c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <SystemInit+0x20>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002876:	4a05      	ldr	r2, [pc, #20]	@ (800288c <SystemInit+0x20>)
 8002878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800287c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002890:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002894:	f7ff ffea 	bl	800286c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002898:	480c      	ldr	r0, [pc, #48]	@ (80028cc <LoopForever+0x6>)
  ldr r1, =_edata
 800289a:	490d      	ldr	r1, [pc, #52]	@ (80028d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800289c:	4a0d      	ldr	r2, [pc, #52]	@ (80028d4 <LoopForever+0xe>)
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028a0:	e002      	b.n	80028a8 <LoopCopyDataInit>

080028a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a6:	3304      	adds	r3, #4

080028a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ac:	d3f9      	bcc.n	80028a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ae:	4a0a      	ldr	r2, [pc, #40]	@ (80028d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028b0:	4c0a      	ldr	r4, [pc, #40]	@ (80028dc <LoopForever+0x16>)
  movs r3, #0
 80028b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b4:	e001      	b.n	80028ba <LoopFillZerobss>

080028b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b8:	3204      	adds	r2, #4

080028ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028bc:	d3fb      	bcc.n	80028b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028be:	f00c fda9 	bl	800f414 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028c2:	f7fe fca5 	bl	8001210 <main>

080028c6 <LoopForever>:

LoopForever:
    b LoopForever
 80028c6:	e7fe      	b.n	80028c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d0:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 80028d4:	08013a5c 	.word	0x08013a5c
  ldr r2, =_sbss
 80028d8:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 80028dc:	20003354 	.word	0x20003354

080028e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028e0:	e7fe      	b.n	80028e0 <ADC1_2_IRQHandler>

080028e2 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80028f0:	d906      	bls.n	8002900 <Hex2Num+0x1e>
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	2b39      	cmp	r3, #57	@ 0x39
 80028f6:	d803      	bhi.n	8002900 <Hex2Num+0x1e>
        return a - '0';
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	3b30      	subs	r3, #48	@ 0x30
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e014      	b.n	800292a <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	2b60      	cmp	r3, #96	@ 0x60
 8002904:	d906      	bls.n	8002914 <Hex2Num+0x32>
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	2b66      	cmp	r3, #102	@ 0x66
 800290a:	d803      	bhi.n	8002914 <Hex2Num+0x32>
        return (a - 'a') + 10;
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	3b57      	subs	r3, #87	@ 0x57
 8002910:	b2db      	uxtb	r3, r3
 8002912:	e00a      	b.n	800292a <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	2b40      	cmp	r3, #64	@ 0x40
 8002918:	d906      	bls.n	8002928 <Hex2Num+0x46>
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	2b46      	cmp	r3, #70	@ 0x46
 800291e:	d803      	bhi.n	8002928 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	3b37      	subs	r3, #55	@ 0x37
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e000      	b.n	800292a <Hex2Num+0x48>
    }

    return 0;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8002948:	e012      	b.n	8002970 <ParseHexNumber+0x3a>
        sum <<= 4;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ffc4 	bl	80028e2 <Hex2Num>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	4413      	add	r3, r2
 8002962:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3301      	adds	r3, #1
 8002968:	607b      	str	r3, [r7, #4]
        done_count++;
 800296a:	7bbb      	ldrb	r3, [r7, #14]
 800296c:	3301      	adds	r3, #1
 800296e:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b2f      	cmp	r3, #47	@ 0x2f
 8002976:	d903      	bls.n	8002980 <ParseHexNumber+0x4a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b39      	cmp	r3, #57	@ 0x39
 800297e:	d90f      	bls.n	80029a0 <ParseHexNumber+0x6a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b60      	cmp	r3, #96	@ 0x60
 8002986:	d903      	bls.n	8002990 <ParseHexNumber+0x5a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b66      	cmp	r3, #102	@ 0x66
 800298e:	d907      	bls.n	80029a0 <ParseHexNumber+0x6a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b40      	cmp	r3, #64	@ 0x40
 8002996:	d906      	bls.n	80029a6 <ParseHexNumber+0x70>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b46      	cmp	r3, #70	@ 0x46
 800299e:	d802      	bhi.n	80029a6 <ParseHexNumber+0x70>
 80029a0:	7bbb      	ldrb	r3, [r7, #14]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d9d1      	bls.n	800294a <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <ParseHexNumber+0x7c>
        *cnt = done_count;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	7bba      	ldrb	r2, [r7, #14]
 80029b0:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b2d      	cmp	r3, #45	@ 0x2d
 80029d8:	d119      	bne.n	8002a0e <ParseNumber+0x52>
        minus = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3301      	adds	r3, #1
 80029e2:	607b      	str	r3, [r7, #4]
        done_count++;
 80029e4:	7bbb      	ldrb	r3, [r7, #14]
 80029e6:	3301      	adds	r3, #1
 80029e8:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 80029ea:	e010      	b.n	8002a0e <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	461a      	mov	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	3b30      	subs	r3, #48	@ 0x30
 80029fe:	4413      	add	r3, r2
 8002a00:	60bb      	str	r3, [r7, #8]
        ptr++;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3301      	adds	r3, #1
 8002a06:	607b      	str	r3, [r7, #4]
        done_count++;
 8002a08:	7bbb      	ldrb	r3, [r7, #14]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b2f      	cmp	r3, #47	@ 0x2f
 8002a14:	d903      	bls.n	8002a1e <ParseNumber+0x62>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b39      	cmp	r3, #57	@ 0x39
 8002a1c:	d9e6      	bls.n	80029ec <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <ParseNumber+0x6e>
        *cnt = done_count;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	7bba      	ldrb	r2, [r7, #14]
 8002a28:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <ParseNumber+0x7a>
        return 0 - sum;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	425b      	negs	r3, r3
 8002a34:	e000      	b.n	8002a38 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8002a36:	68bb      	ldr	r3, [r7, #8]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d027      	beq.n	8002aaa <ParseMAC+0x66>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d024      	beq.n	8002aaa <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8002a60:	e018      	b.n	8002a94 <ParseMAC+0x50>
    uint8_t done_count = 1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b3a      	cmp	r3, #58	@ 0x3a
 8002a6c:	d00d      	beq.n	8002a8a <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8002a6e:	7dfb      	ldrb	r3, [r7, #23]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	75fa      	strb	r2, [r7, #23]
 8002a74:	461a      	mov	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	189c      	adds	r4, r3, r2
 8002a7a:	f107 0316 	add.w	r3, r7, #22
 8002a7e:	4619      	mov	r1, r3
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f7ff ff58 	bl	8002936 <ParseHexNumber>
 8002a86:	4603      	mov	r3, r0
 8002a88:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 8002a8a:	7dbb      	ldrb	r3, [r7, #22]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4413      	add	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d906      	bls.n	8002aaa <ParseMAC+0x66>
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d803      	bhi.n	8002aaa <ParseMAC+0x66>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1db      	bne.n	8002a62 <ParseMAC+0x1e>
   }
  }
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd90      	pop	{r4, r7, pc}

08002ab2 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d027      	beq.n	8002b18 <ParseIP+0x66>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d024      	beq.n	8002b18 <ParseIP+0x66>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d921      	bls.n	8002b18 <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8002ad4:	e019      	b.n	8002b0a <ParseIP+0x58>
    uint8_t done_count = 1;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ae0:	d00e      	beq.n	8002b00 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8002ae2:	f107 0316 	add.w	r3, r7, #22
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff ff67 	bl	80029bc <ParseNumber>
 8002aee:	4601      	mov	r1, r0
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	75fa      	strb	r2, [r7, #23]
 8002af6:	461a      	mov	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4413      	add	r3, r2
 8002afc:	b2ca      	uxtb	r2, r1
 8002afe:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8002b00:	7dbb      	ldrb	r3, [r7, #22]
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d803      	bhi.n	8002b18 <ParseIP+0x66>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1de      	bne.n	8002ad6 <ParseIP+0x24>
   }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	3302      	adds	r3, #2
 8002b32:	4940      	ldr	r1, [pc, #256]	@ (8002c34 <AT_ParseInfo+0x114>)
 8002b34:	4618      	mov	r0, r3
 8002b36:	f00c fbab 	bl	800f290 <strtok>
 8002b3a:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8002b3c:	e071      	b.n	8002c22 <AT_ParseInfo+0x102>
    switch (num++) {
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	72fa      	strb	r2, [r7, #11]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d866      	bhi.n	8002c16 <AT_ParseInfo+0xf6>
 8002b48:	a201      	add	r2, pc, #4	@ (adr r2, 8002b50 <AT_ParseInfo+0x30>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002b6d 	.word	0x08002b6d
 8002b54:	08002b81 	.word	0x08002b81
 8002b58:	08002b99 	.word	0x08002b99
 8002b5c:	08002bb1 	.word	0x08002bb1
 8002b60:	08002bc9 	.word	0x08002bc9
 8002b64:	08002be1 	.word	0x08002be1
 8002b68:	08002bf5 	.word	0x08002bf5
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	221f      	movs	r2, #31
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f00c fb78 	bl	800f268 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	77da      	strb	r2, [r3, #31]
      break;
 8002b7e:	e04b      	b.n	8002c18 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3320      	adds	r3, #32
 8002b84:	2217      	movs	r2, #23
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f00c fb6d 	bl	800f268 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 8002b96:	e03f      	b.n	8002c18 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3338      	adds	r3, #56	@ 0x38
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	68f9      	ldr	r1, [r7, #12]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f00c fb61 	bl	800f268 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8002bae:	e033      	b.n	8002c18 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3348      	adds	r3, #72	@ 0x48
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	68f9      	ldr	r1, [r7, #12]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f00c fb55 	bl	800f268 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 8002bc6:	e027      	b.n	8002c18 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3358      	adds	r3, #88	@ 0x58
 8002bcc:	220f      	movs	r2, #15
 8002bce:	68f9      	ldr	r1, [r7, #12]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f00c fb49 	bl	800f268 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 8002bde:	e01b      	b.n	8002c18 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8002be0:	2100      	movs	r1, #0
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff feea 	bl	80029bc <ParseNumber>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 8002bf2:	e011      	b.n	8002c18 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8002bf4:	4910      	ldr	r1, [pc, #64]	@ (8002c38 <AT_ParseInfo+0x118>)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f00c fb4a 	bl	800f290 <strtok>
 8002bfc:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3368      	adds	r3, #104	@ 0x68
 8002c02:	221f      	movs	r2, #31
 8002c04:	68f9      	ldr	r1, [r7, #12]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f00c fb2e 	bl	800f268 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 8002c14:	e000      	b.n	8002c18 <AT_ParseInfo+0xf8>

    default: break;
 8002c16:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8002c18:	4906      	ldr	r1, [pc, #24]	@ (8002c34 <AT_ParseInfo+0x114>)
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f00c fb38 	bl	800f290 <strtok>
 8002c20:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d18a      	bne.n	8002b3e <AT_ParseInfo+0x1e>
  }
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	08013008 	.word	0x08013008
 8002c38:	0801300c 	.word	0x0801300c

08002c3c <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	4959      	ldr	r1, [pc, #356]	@ (8002db4 <AT_ParseConnSettings+0x178>)
 8002c50:	4618      	mov	r0, r3
 8002c52:	f00c fb1d 	bl	800f290 <strtok>
 8002c56:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8002c58:	e0a2      	b.n	8002da0 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	73fa      	strb	r2, [r7, #15]
 8002c60:	2b0b      	cmp	r3, #11
 8002c62:	f200 808c 	bhi.w	8002d7e <AT_ParseConnSettings+0x142>
 8002c66:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <AT_ParseConnSettings+0x30>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002c9d 	.word	0x08002c9d
 8002c70:	08002cb3 	.word	0x08002cb3
 8002c74:	08002ccb 	.word	0x08002ccb
 8002c78:	08002cdf 	.word	0x08002cdf
 8002c7c:	08002cf3 	.word	0x08002cf3
 8002c80:	08002d07 	.word	0x08002d07
 8002c84:	08002d17 	.word	0x08002d17
 8002c88:	08002d27 	.word	0x08002d27
 8002c8c:	08002d37 	.word	0x08002d37
 8002c90:	08002d47 	.word	0x08002d47
 8002c94:	08002d57 	.word	0x08002d57
 8002c98:	08002d6b 	.word	0x08002d6b
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f00c fae0 	bl	800f268 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8002cb0:	e066      	b.n	8002d80 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	3321      	adds	r3, #33	@ 0x21
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f00c fad4 	bl	800f268 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 8002cc8:	e05a      	b.n	8002d80 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8002cca:	2100      	movs	r1, #0
 8002ccc:	68b8      	ldr	r0, [r7, #8]
 8002cce:	f7ff fe75 	bl	80029bc <ParseNumber>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8002cdc:	e050      	b.n	8002d80 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8002cde:	2100      	movs	r1, #0
 8002ce0:	68b8      	ldr	r0, [r7, #8]
 8002ce2:	f7ff fe6b 	bl	80029bc <ParseNumber>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 8002cf0:	e046      	b.n	8002d80 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	68b8      	ldr	r0, [r7, #8]
 8002cf6:	f7ff fe61 	bl	80029bc <ParseNumber>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8002d04:	e03c      	b.n	8002d80 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	3348      	adds	r3, #72	@ 0x48
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	68b8      	ldr	r0, [r7, #8]
 8002d10:	f7ff fecf 	bl	8002ab2 <ParseIP>
      break;
 8002d14:	e034      	b.n	8002d80 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	334c      	adds	r3, #76	@ 0x4c
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	68b8      	ldr	r0, [r7, #8]
 8002d20:	f7ff fec7 	bl	8002ab2 <ParseIP>
      break;
 8002d24:	e02c      	b.n	8002d80 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	3350      	adds	r3, #80	@ 0x50
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	68b8      	ldr	r0, [r7, #8]
 8002d30:	f7ff febf 	bl	8002ab2 <ParseIP>
      break;
 8002d34:	e024      	b.n	8002d80 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	3354      	adds	r3, #84	@ 0x54
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	68b8      	ldr	r0, [r7, #8]
 8002d40:	f7ff feb7 	bl	8002ab2 <ParseIP>
      break;
 8002d44:	e01c      	b.n	8002d80 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	3358      	adds	r3, #88	@ 0x58
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	68b8      	ldr	r0, [r7, #8]
 8002d50:	f7ff feaf 	bl	8002ab2 <ParseIP>
      break;
 8002d54:	e014      	b.n	8002d80 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8002d56:	2100      	movs	r1, #0
 8002d58:	68b8      	ldr	r0, [r7, #8]
 8002d5a:	f7ff fe2f 	bl	80029bc <ParseNumber>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8002d68:	e00a      	b.n	8002d80 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	68b8      	ldr	r0, [r7, #8]
 8002d6e:	f7ff fe25 	bl	80029bc <ParseNumber>
 8002d72:	4603      	mov	r3, r0
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 8002d7c:	e000      	b.n	8002d80 <AT_ParseConnSettings+0x144>

    default:
      break;
 8002d7e:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8002d80:	490c      	ldr	r1, [pc, #48]	@ (8002db4 <AT_ParseConnSettings+0x178>)
 8002d82:	2000      	movs	r0, #0
 8002d84:	f00c fa84 	bl	800f290 <strtok>
 8002d88:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <AT_ParseConnSettings+0x164>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b2c      	cmp	r3, #44	@ 0x2c
 8002d98:	d102      	bne.n	8002da0 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f47f af59 	bne.w	8002c5a <AT_ParseConnSettings+0x1e>
    }
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	08013008 	.word	0x08013008

08002db8 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d056      	beq.n	8002e84 <AT_ExecuteCommand+0xcc>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d051      	beq.n	8002e84 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8002de6:	68b8      	ldr	r0, [r7, #8]
 8002de8:	f7fd fa42 	bl	8000270 <strlen>
 8002dec:	4603      	mov	r3, r0
 8002dee:	b299      	uxth	r1, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8002df6:	461a      	mov	r2, r3
 8002df8:	68b8      	ldr	r0, [r7, #8]
 8002dfa:	47a0      	blx	r4
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	dd3e      	ble.n	8002e84 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8002e12:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8002e1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	dd27      	ble.n	8002e76 <AT_ExecuteCommand+0xbe>
 8002e26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e2a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002e2e:	dc22      	bgt.n	8002e76 <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8002e30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e34:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002e38:	d105      	bne.n	8002e46 <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8002e3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8002e46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8002e52:	490f      	ldr	r1, [pc, #60]	@ (8002e90 <AT_ExecuteCommand+0xd8>)
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f00c fa77 	bl	800f348 <strstr>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e010      	b.n	8002e86 <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8002e64:	490b      	ldr	r1, [pc, #44]	@ (8002e94 <AT_ExecuteCommand+0xdc>)
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f00c fa6e 	bl	800f348 <strstr>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002e72:	2305      	movs	r3, #5
 8002e74:	e007      	b.n	8002e86 <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8002e76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e7a:	f113 0f04 	cmn.w	r3, #4
 8002e7e:	d101      	bne.n	8002e84 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8002e80:	2306      	movs	r3, #6
 8002e82:	e000      	b.n	8002e86 <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8002e84:	2304      	movs	r3, #4
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd90      	pop	{r4, r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	08013020 	.word	0x08013020
 8002e94:	0801302c 	.word	0x0801302c

08002e98 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 8002eb2:	68b8      	ldr	r0, [r7, #8]
 8002eb4:	f7fd f9dc 	bl	8000270 <strlen>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8002ebc:	8a7b      	ldrh	r3, [r7, #18]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <AT_RequestSendData+0x32>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e05d      	b.n	8002f86 <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d057      	beq.n	8002f84 <AT_RequestSendData+0xec>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d052      	beq.n	8002f84 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8002eea:	8a79      	ldrh	r1, [r7, #18]
 8002eec:	68b8      	ldr	r0, [r7, #8]
 8002eee:	4798      	blx	r3
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8002ef4:	8a3a      	ldrh	r2, [r7, #16]
 8002ef6:	8a7b      	ldrh	r3, [r7, #18]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d143      	bne.n	8002f84 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8002f08:	8879      	ldrh	r1, [r7, #2]
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
 8002f0e:	4603      	mov	r3, r0
 8002f10:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8002f12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d131      	bne.n	8002f80 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8002f28:	2100      	movs	r1, #0
 8002f2a:	6a38      	ldr	r0, [r7, #32]
 8002f2c:	4798      	blx	r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8002f32:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	dd19      	ble.n	8002f6e <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8002f3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	4413      	add	r3, r2
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8002f46:	4912      	ldr	r1, [pc, #72]	@ (8002f90 <AT_RequestSendData+0xf8>)
 8002f48:	6a38      	ldr	r0, [r7, #32]
 8002f4a:	f00c f9fd 	bl	800f348 <strstr>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e016      	b.n	8002f86 <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8002f58:	490e      	ldr	r1, [pc, #56]	@ (8002f94 <AT_RequestSendData+0xfc>)
 8002f5a:	6a38      	ldr	r0, [r7, #32]
 8002f5c:	f00c f9f4 	bl	800f348 <strstr>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002f66:	2305      	movs	r3, #5
 8002f68:	e00d      	b.n	8002f86 <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e00b      	b.n	8002f86 <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8002f6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f72:	f113 0f04 	cmn.w	r3, #4
 8002f76:	d101      	bne.n	8002f7c <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8002f78:	2306      	movs	r3, #6
 8002f7a:	e004      	b.n	8002f86 <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e002      	b.n	8002f86 <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8002f80:	2302      	movs	r3, #2
 8002f82:	e000      	b.n	8002f86 <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8002f84:	2304      	movs	r3, #4
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	08013020 	.word	0x08013020
 8002f94:	0801302c 	.word	0x0801302c

08002f98 <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002fac:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8087 	beq.w	80030c8 <AT_RequestReceiveData+0x130>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8081 	beq.w	80030c8 <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8002fcc:	68b8      	ldr	r0, [r7, #8]
 8002fce:	f7fd f94f 	bl	8000270 <strlen>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	b299      	uxth	r1, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68b8      	ldr	r0, [r7, #8]
 8002fe0:	47a0      	blx	r4
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	dd6f      	ble.n	80030c8 <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	6938      	ldr	r0, [r7, #16]
 8002ff8:	4798      	blx	r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b0d      	cmp	r3, #13
 8003004:	d104      	bne.n	8003010 <AT_RequestReceiveData+0x78>
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	3301      	adds	r3, #1
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b0a      	cmp	r3, #10
 800300e:	d001      	beq.n	8003014 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 8003010:	2304      	movs	r3, #4
 8003012:	e05a      	b.n	80030ca <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3b02      	subs	r3, #2
 8003018:	617b      	str	r3, [r7, #20]
    p += 2;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	3302      	adds	r3, #2
 800301e:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b07      	cmp	r3, #7
 8003024:	d94a      	bls.n	80030bc <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 8003026:	e002      	b.n	800302e <AT_RequestReceiveData+0x96>
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3b01      	subs	r3, #1
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d006      	beq.n	8003042 <AT_RequestReceiveData+0xaa>
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	3b01      	subs	r3, #1
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b15      	cmp	r3, #21
 8003040:	d0f2      	beq.n	8003028 <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3b08      	subs	r3, #8
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	491f      	ldr	r1, [pc, #124]	@ (80030d4 <AT_RequestReceiveData+0x13c>)
 8003056:	4618      	mov	r0, r3
 8003058:	f00c f976 	bl	800f348 <strstr>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d016      	beq.n	8003090 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b08      	subs	r3, #8
 8003068:	b29a      	uxth	r2, r3
 800306a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306c:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 800306e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	429a      	cmp	r2, r3
 8003076:	d202      	bcs.n	800307e <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 8003078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 800307e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	6939      	ldr	r1, [r7, #16]
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f00c f9eb 	bl	800f462 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e01c      	b.n	80030ca <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	3b04      	subs	r3, #4
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	2204      	movs	r2, #4
 800309a:	490f      	ldr	r1, [pc, #60]	@ (80030d8 <AT_RequestReceiveData+0x140>)
 800309c:	4618      	mov	r0, r3
 800309e:	f00c f8b9 	bl	800f214 <memcmp>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 80030a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030aa:	2200      	movs	r2, #0
 80030ac:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80030ae:	2305      	movs	r3, #5
 80030b0:	e00b      	b.n	80030ca <AT_RequestReceiveData+0x132>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 80030b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b4:	2200      	movs	r2, #0
 80030b6:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80030b8:	2305      	movs	r3, #5
 80030ba:	e006      	b.n	80030ca <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f113 0f04 	cmn.w	r3, #4
 80030c2:	d101      	bne.n	80030c8 <AT_RequestReceiveData+0x130>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80030c4:	2306      	movs	r3, #6
 80030c6:	e000      	b.n	80030ca <AT_RequestReceiveData+0x132>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80030c8:	2304      	movs	r3, #4
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd90      	pop	{r4, r7, pc}
 80030d2:	bf00      	nop
 80030d4:	08013020 	.word	0x08013020
 80030d8:	08013034 	.word	0x08013034

080030dc <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80030e4:	2302      	movs	r3, #2
 80030e6:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f247 5230 	movw	r2, #30000	@ 0x7530
 80030ee:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01b      	beq.n	8003134 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003102:	2000      	movs	r0, #0
 8003104:	4798      	blx	r3
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d113      	bne.n	8003134 <ES_WIFI_Init+0x58>
  {

    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003112:	461a      	mov	r2, r3
 8003114:	490a      	ldr	r1, [pc, #40]	@ (8003140 <ES_WIFI_Init+0x64>)
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff fe4e 	bl	8002db8 <AT_ExecuteCommand>
 800311c:	4603      	mov	r3, r0
 800311e:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fcf6 	bl	8002b20 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	0801303c 	.word	0x0801303c

08003144 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <ES_WIFI_RegisterBusIO+0x2c>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <ES_WIFI_RegisterBusIO+0x2c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <ES_WIFI_RegisterBusIO+0x2c>
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <ES_WIFI_RegisterBusIO+0x2c>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8003170:	2302      	movs	r3, #2
 8003172:	e014      	b.n	800319e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	4932      	ldr	r1, [pc, #200]	@ (800328c <ES_WIFI_Connect+0xe0>)
 80031c4:	4618      	mov	r0, r3
 80031c6:	f00b ff2d 	bl	800f024 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80031d6:	461a      	mov	r2, r3
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7ff fded 	bl	8002db8 <AT_ExecuteCommand>
 80031de:	4603      	mov	r3, r0
 80031e0:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d14b      	bne.n	8003280 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4927      	ldr	r1, [pc, #156]	@ (8003290 <ES_WIFI_Connect+0xe4>)
 80031f2:	4618      	mov	r0, r3
 80031f4:	f00b ff16 	bl	800f024 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003204:	461a      	mov	r2, r3
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff fdd6 	bl	8002db8 <AT_ExecuteCommand>
 800320c:	4603      	mov	r3, r0
 800320e:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d134      	bne.n	8003280 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	491b      	ldr	r1, [pc, #108]	@ (8003294 <ES_WIFI_Connect+0xe8>)
 8003228:	4618      	mov	r0, r3
 800322a:	f00b fefb 	bl	800f024 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800323a:	461a      	mov	r2, r3
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff fdbb 	bl	8002db8 <AT_ExecuteCommand>
 8003242:	4603      	mov	r3, r0
 8003244:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8003246:	7dfb      	ldrb	r3, [r7, #23]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d119      	bne.n	8003280 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003252:	4911      	ldr	r1, [pc, #68]	@ (8003298 <ES_WIFI_Connect+0xec>)
 8003254:	4618      	mov	r0, r3
 8003256:	f00b fee5 	bl	800f024 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003266:	461a      	mov	r2, r3
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff fda5 	bl	8002db8 <AT_ExecuteCommand>
 800326e:	4603      	mov	r3, r0
 8003270:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d103      	bne.n	8003280 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	08013054 	.word	0x08013054
 8003290:	0801305c 	.word	0x0801305c
 8003294:	08013064 	.word	0x08013064
 8003298:	0801306c 	.word	0x0801306c

0800329c <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80032aa:	4913      	ldr	r1, [pc, #76]	@ (80032f8 <ES_WIFI_IsConnected+0x5c>)
 80032ac:	4618      	mov	r0, r3
 80032ae:	f00b feb9 	bl	800f024 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80032be:	461a      	mov	r2, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff fd79 	bl	8002db8 <AT_ExecuteCommand>
 80032c6:	4603      	mov	r3, r0
 80032c8:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 80032d6:	2b31      	cmp	r3, #49	@ 0x31
 80032d8:	bf0c      	ite	eq
 80032da:	2301      	moveq	r3, #1
 80032dc:	2300      	movne	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	08013070 	.word	0x08013070

080032fc <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800330a:	4910      	ldr	r1, [pc, #64]	@ (800334c <ES_WIFI_GetNetworkSettings+0x50>)
 800330c:	4618      	mov	r0, r3
 800330e:	f00b fe89 	bl	800f024 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800331e:	461a      	mov	r2, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff fd49 	bl	8002db8 <AT_ExecuteCommand>
 8003326:	4603      	mov	r3, r0
 8003328:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d108      	bne.n	8003342 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	338d      	adds	r3, #141	@ 0x8d
 800333a:	4619      	mov	r1, r3
 800333c:	4610      	mov	r0, r2
 800333e:	f7ff fc7d 	bl	8002c3c <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8003342:	7bfb      	ldrb	r3, [r7, #15]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	08013078 	.word	0x08013078

08003350 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	4613      	mov	r3, r2
 800335c:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003364:	4913      	ldr	r1, [pc, #76]	@ (80033b4 <ES_WIFI_GetMACAddress+0x64>)
 8003366:	4618      	mov	r0, r3
 8003368:	f00b fe5c 	bl	800f024 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003378:	461a      	mov	r2, r3
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f7ff fd1c 	bl	8002db8 <AT_ExecuteCommand>
 8003380:	4603      	mov	r3, r0
 8003382:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10e      	bne.n	80033a8 <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003390:	3302      	adds	r3, #2
 8003392:	4909      	ldr	r1, [pc, #36]	@ (80033b8 <ES_WIFI_GetMACAddress+0x68>)
 8003394:	4618      	mov	r0, r3
 8003396:	f00b ff7b 	bl	800f290 <strtok>
 800339a:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	461a      	mov	r2, r3
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	6938      	ldr	r0, [r7, #16]
 80033a4:	f7ff fb4e 	bl	8002a44 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	080130c8 	.word	0x080130c8
 80033b8:	080130cc 	.word	0x080130cc

080033bc <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b087      	sub	sp, #28
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <ES_WIFI_StartClientConnection+0x1e>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d105      	bne.n	80033e6 <ES_WIFI_StartClientConnection+0x2a>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	885b      	ldrh	r3, [r3, #2]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <ES_WIFI_StartClientConnection+0x2a>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e0c1      	b.n	800356a <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	785b      	ldrb	r3, [r3, #1]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4960      	ldr	r1, [pc, #384]	@ (8003574 <ES_WIFI_StartClientConnection+0x1b8>)
 80033f4:	f00b fe16 	bl	800f024 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003404:	461a      	mov	r2, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fcd6 	bl	8002db8 <AT_ExecuteCommand>
 800340c:	4603      	mov	r3, r0
 800340e:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d114      	bne.n	8003440 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	4955      	ldr	r1, [pc, #340]	@ (8003578 <ES_WIFI_StartClientConnection+0x1bc>)
 8003424:	f00b fdfe 	bl	800f024 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003434:	461a      	mov	r2, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff fcbe 	bl	8002db8 <AT_ExecuteCommand>
 800343c:	4603      	mov	r3, r0
 800343e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d114      	bne.n	8003470 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	889b      	ldrh	r3, [r3, #4]
 8003450:	461a      	mov	r2, r3
 8003452:	494a      	ldr	r1, [pc, #296]	@ (800357c <ES_WIFI_StartClientConnection+0x1c0>)
 8003454:	f00b fde6 	bl	800f024 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003464:	461a      	mov	r2, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff fca6 	bl	8002db8 <AT_ExecuteCommand>
 800346c:	4603      	mov	r3, r0
 800346e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d11c      	bne.n	80034b0 <ES_WIFI_StartClientConnection+0xf4>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <ES_WIFI_StartClientConnection+0xca>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b03      	cmp	r3, #3
 8003484:	d114      	bne.n	80034b0 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	885b      	ldrh	r3, [r3, #2]
 8003490:	461a      	mov	r2, r3
 8003492:	493b      	ldr	r1, [pc, #236]	@ (8003580 <ES_WIFI_StartClientConnection+0x1c4>)
 8003494:	f00b fdc6 	bl	800f024 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80034a4:	461a      	mov	r2, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff fc86 	bl	8002db8 <AT_ExecuteCommand>
 80034ac:	4603      	mov	r3, r0
 80034ae:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d128      	bne.n	8003508 <ES_WIFI_StartClientConnection+0x14c>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <ES_WIFI_StartClientConnection+0x10a>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d120      	bne.n	8003508 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	799b      	ldrb	r3, [r3, #6]
 80034d0:	4619      	mov	r1, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	79db      	ldrb	r3, [r3, #7]
 80034d6:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80034dc:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	9200      	str	r2, [sp, #0]
 80034e6:	4623      	mov	r3, r4
 80034e8:	460a      	mov	r2, r1
 80034ea:	4926      	ldr	r1, [pc, #152]	@ (8003584 <ES_WIFI_StartClientConnection+0x1c8>)
 80034ec:	f00b fd9a 	bl	800f024 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80034fc:	461a      	mov	r2, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fc5a 	bl	8002db8 <AT_ExecuteCommand>
 8003504:	4603      	mov	r3, r0
 8003506:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d116      	bne.n	800353c <ES_WIFI_StartClientConnection+0x180>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d112      	bne.n	800353c <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800351c:	491a      	ldr	r1, [pc, #104]	@ (8003588 <ES_WIFI_StartClientConnection+0x1cc>)
 800351e:	4618      	mov	r0, r3
 8003520:	f00b fd80 	bl	800f024 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003530:	461a      	mov	r2, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fc40 	bl	8002db8 <AT_ExecuteCommand>
 8003538:	4603      	mov	r3, r0
 800353a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d112      	bne.n	8003568 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003548:	4910      	ldr	r1, [pc, #64]	@ (800358c <ES_WIFI_StartClientConnection+0x1d0>)
 800354a:	4618      	mov	r0, r3
 800354c:	f00b fd6a 	bl	800f024 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800355c:	461a      	mov	r2, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fc2a 	bl	8002db8 <AT_ExecuteCommand>
 8003564:	4603      	mov	r3, r0
 8003566:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bd90      	pop	{r4, r7, pc}
 8003572:	bf00      	nop
 8003574:	08013130 	.word	0x08013130
 8003578:	08013138 	.word	0x08013138
 800357c:	08013140 	.word	0x08013140
 8003580:	08013148 	.word	0x08013148
 8003584:	08013150 	.word	0x08013150
 8003588:	08013160 	.word	0x08013160
 800358c:	08013168 	.word	0x08013168

08003590 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	460b      	mov	r3, r1
 800359e:	72fb      	strb	r3, [r7, #11]
 80035a0:	4613      	mov	r3, r2
 80035a2:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80035a4:	2302      	movs	r3, #2
 80035a6:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80035ae:	2301      	movs	r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e001      	b.n	80035b8 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 80035b8:	893b      	ldrh	r3, [r7, #8]
 80035ba:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80035be:	d302      	bcc.n	80035c6 <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 80035c0:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80035c4:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	893a      	ldrh	r2, [r7, #8]
 80035ca:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80035d2:	7afa      	ldrb	r2, [r7, #11]
 80035d4:	4942      	ldr	r1, [pc, #264]	@ (80036e0 <ES_WIFI_SendData+0x150>)
 80035d6:	4618      	mov	r0, r3
 80035d8:	f00b fd24 	bl	800f024 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80035e8:	461a      	mov	r2, r3
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f7ff fbe4 	bl	8002db8 <AT_ExecuteCommand>
 80035f0:	4603      	mov	r3, r0
 80035f2:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d15e      	bne.n	80036b8 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4938      	ldr	r1, [pc, #224]	@ (80036e4 <ES_WIFI_SendData+0x154>)
 8003604:	4618      	mov	r0, r3
 8003606:	f00b fd0d 	bl	800f024 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003616:	461a      	mov	r2, r3
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff fbcd 	bl	8002db8 <AT_ExecuteCommand>
 800361e:	4603      	mov	r3, r0
 8003620:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d13d      	bne.n	80036a4 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800362e:	893a      	ldrh	r2, [r7, #8]
 8003630:	492d      	ldr	r1, [pc, #180]	@ (80036e8 <ES_WIFI_SendData+0x158>)
 8003632:	4618      	mov	r0, r3
 8003634:	f00b fcf6 	bl	800f024 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003644:	893a      	ldrh	r2, [r7, #8]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f7ff fc23 	bl	8002e98 <AT_RequestSendData>
 8003652:	4603      	mov	r3, r0
 8003654:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d119      	bne.n	8003690 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003662:	4922      	ldr	r1, [pc, #136]	@ (80036ec <ES_WIFI_SendData+0x15c>)
 8003664:	4618      	mov	r0, r3
 8003666:	f00b fe6f 	bl	800f348 <strstr>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d02c      	beq.n	80036ca <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8003670:	f640 1202 	movw	r2, #2306	@ 0x902
 8003674:	491e      	ldr	r1, [pc, #120]	@ (80036f0 <ES_WIFI_SendData+0x160>)
 8003676:	481f      	ldr	r0, [pc, #124]	@ (80036f4 <ES_WIFI_SendData+0x164>)
 8003678:	f00b fc64 	bl	800ef44 <iprintf>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003682:	4619      	mov	r1, r3
 8003684:	481c      	ldr	r0, [pc, #112]	@ (80036f8 <ES_WIFI_SendData+0x168>)
 8003686:	f00b fc5d 	bl	800ef44 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800368a:	2302      	movs	r3, #2
 800368c:	74fb      	strb	r3, [r7, #19]
 800368e:	e01c      	b.n	80036ca <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8003690:	f640 1208 	movw	r2, #2312	@ 0x908
 8003694:	4916      	ldr	r1, [pc, #88]	@ (80036f0 <ES_WIFI_SendData+0x160>)
 8003696:	4817      	ldr	r0, [pc, #92]	@ (80036f4 <ES_WIFI_SendData+0x164>)
 8003698:	f00b fc54 	bl	800ef44 <iprintf>
 800369c:	4817      	ldr	r0, [pc, #92]	@ (80036fc <ES_WIFI_SendData+0x16c>)
 800369e:	f00b fcb9 	bl	800f014 <puts>
 80036a2:	e012      	b.n	80036ca <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 80036a4:	f640 120d 	movw	r2, #2317	@ 0x90d
 80036a8:	4911      	ldr	r1, [pc, #68]	@ (80036f0 <ES_WIFI_SendData+0x160>)
 80036aa:	4812      	ldr	r0, [pc, #72]	@ (80036f4 <ES_WIFI_SendData+0x164>)
 80036ac:	f00b fc4a 	bl	800ef44 <iprintf>
 80036b0:	4813      	ldr	r0, [pc, #76]	@ (8003700 <ES_WIFI_SendData+0x170>)
 80036b2:	f00b fcaf 	bl	800f014 <puts>
 80036b6:	e008      	b.n	80036ca <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 80036b8:	f640 1212 	movw	r2, #2322	@ 0x912
 80036bc:	490c      	ldr	r1, [pc, #48]	@ (80036f0 <ES_WIFI_SendData+0x160>)
 80036be:	480d      	ldr	r0, [pc, #52]	@ (80036f4 <ES_WIFI_SendData+0x164>)
 80036c0:	f00b fc40 	bl	800ef44 <iprintf>
 80036c4:	480f      	ldr	r0, [pc, #60]	@ (8003704 <ES_WIFI_SendData+0x174>)
 80036c6:	f00b fca5 	bl	800f014 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d102      	bne.n	80036d6 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	2200      	movs	r2, #0
 80036d4:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 80036d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	08013130 	.word	0x08013130
 80036e4:	080132e4 	.word	0x080132e4
 80036e8:	080132ec 	.word	0x080132ec
 80036ec:	080132f8 	.word	0x080132f8
 80036f0:	080131c0 	.word	0x080131c0
 80036f4:	080131d8 	.word	0x080131d8
 80036f8:	08013300 	.word	0x08013300
 80036fc:	0801331c 	.word	0x0801331c
 8003700:	08013338 	.word	0x08013338
 8003704:	0801334c 	.word	0x0801334c

08003708 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	461a      	mov	r2, r3
 8003714:	460b      	mov	r3, r1
 8003716:	72fb      	strb	r3, [r7, #11]
 8003718:	4613      	mov	r3, r2
 800371a:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800371c:	2302      	movs	r3, #2
 800371e:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8003726:	2301      	movs	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e001      	b.n	8003730 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8003730:	893b      	ldrh	r3, [r7, #8]
 8003732:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8003736:	f200 808b 	bhi.w	8003850 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003740:	7afa      	ldrb	r2, [r7, #11]
 8003742:	4946      	ldr	r1, [pc, #280]	@ (800385c <ES_WIFI_ReceiveData+0x154>)
 8003744:	4618      	mov	r0, r3
 8003746:	f00b fc6d 	bl	800f024 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003756:	461a      	mov	r2, r3
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7ff fb2d 	bl	8002db8 <AT_ExecuteCommand>
 800375e:	4603      	mov	r3, r0
 8003760:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d165      	bne.n	8003834 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800376e:	893a      	ldrh	r2, [r7, #8]
 8003770:	493b      	ldr	r1, [pc, #236]	@ (8003860 <ES_WIFI_ReceiveData+0x158>)
 8003772:	4618      	mov	r0, r3
 8003774:	f00b fc56 	bl	800f024 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003784:	461a      	mov	r2, r3
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff fb16 	bl	8002db8 <AT_ExecuteCommand>
 800378c:	4603      	mov	r3, r0
 800378e:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d141      	bne.n	800381a <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4931      	ldr	r1, [pc, #196]	@ (8003864 <ES_WIFI_ReceiveData+0x15c>)
 80037a0:	4618      	mov	r0, r3
 80037a2:	f00b fc3f 	bl	800f024 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80037b2:	461a      	mov	r2, r3
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7ff faff 	bl	8002db8 <AT_ExecuteCommand>
 80037ba:	4603      	mov	r3, r0
 80037bc:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d120      	bne.n	8003806 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80037ca:	4927      	ldr	r1, [pc, #156]	@ (8003868 <ES_WIFI_ReceiveData+0x160>)
 80037cc:	4618      	mov	r0, r3
 80037ce:	f00b fc29 	bl	800f024 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80037d8:	893a      	ldrh	r2, [r7, #8]
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	4613      	mov	r3, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff fbd8 	bl	8002f98 <AT_RequestReceiveData>
 80037e8:	4603      	mov	r3, r0
 80037ea:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02e      	beq.n	8003850 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 80037f2:	f640 12aa 	movw	r2, #2474	@ 0x9aa
 80037f6:	491d      	ldr	r1, [pc, #116]	@ (800386c <ES_WIFI_ReceiveData+0x164>)
 80037f8:	481d      	ldr	r0, [pc, #116]	@ (8003870 <ES_WIFI_ReceiveData+0x168>)
 80037fa:	f00b fba3 	bl	800ef44 <iprintf>
 80037fe:	481d      	ldr	r0, [pc, #116]	@ (8003874 <ES_WIFI_ReceiveData+0x16c>)
 8003800:	f00b fc08 	bl	800f014 <puts>
 8003804:	e024      	b.n	8003850 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 8003806:	f640 12af 	movw	r2, #2479	@ 0x9af
 800380a:	4918      	ldr	r1, [pc, #96]	@ (800386c <ES_WIFI_ReceiveData+0x164>)
 800380c:	4818      	ldr	r0, [pc, #96]	@ (8003870 <ES_WIFI_ReceiveData+0x168>)
 800380e:	f00b fb99 	bl	800ef44 <iprintf>
 8003812:	4819      	ldr	r0, [pc, #100]	@ (8003878 <ES_WIFI_ReceiveData+0x170>)
 8003814:	f00b fbfe 	bl	800f014 <puts>
 8003818:	e01a      	b.n	8003850 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
 800381a:	f640 12b4 	movw	r2, #2484	@ 0x9b4
 800381e:	4913      	ldr	r1, [pc, #76]	@ (800386c <ES_WIFI_ReceiveData+0x164>)
 8003820:	4813      	ldr	r0, [pc, #76]	@ (8003870 <ES_WIFI_ReceiveData+0x168>)
 8003822:	f00b fb8f 	bl	800ef44 <iprintf>
 8003826:	4815      	ldr	r0, [pc, #84]	@ (800387c <ES_WIFI_ReceiveData+0x174>)
 8003828:	f00b fbf4 	bl	800f014 <puts>
        *Receivedlen = 0;
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2200      	movs	r2, #0
 8003830:	801a      	strh	r2, [r3, #0]
 8003832:	e00d      	b.n	8003850 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
 8003834:	f640 12ba 	movw	r2, #2490	@ 0x9ba
 8003838:	490c      	ldr	r1, [pc, #48]	@ (800386c <ES_WIFI_ReceiveData+0x164>)
 800383a:	480d      	ldr	r0, [pc, #52]	@ (8003870 <ES_WIFI_ReceiveData+0x168>)
 800383c:	f00b fb82 	bl	800ef44 <iprintf>
 8003840:	480f      	ldr	r0, [pc, #60]	@ (8003880 <ES_WIFI_ReceiveData+0x178>)
 8003842:	f00b fbe7 	bl	800f014 <puts>
      issue15++;
 8003846:	4b0f      	ldr	r3, [pc, #60]	@ (8003884 <ES_WIFI_ReceiveData+0x17c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3301      	adds	r3, #1
 800384c:	4a0d      	ldr	r2, [pc, #52]	@ (8003884 <ES_WIFI_ReceiveData+0x17c>)
 800384e:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8003850:	7cfb      	ldrb	r3, [r7, #19]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	08013130 	.word	0x08013130
 8003860:	08013370 	.word	0x08013370
 8003864:	08013378 	.word	0x08013378
 8003868:	08013380 	.word	0x08013380
 800386c:	080131c0 	.word	0x080131c0
 8003870:	080131d8 	.word	0x080131d8
 8003874:	08013384 	.word	0x08013384
 8003878:	080133a4 	.word	0x080133a4
 800387c:	080133bc 	.word	0x080133bc
 8003880:	080133dc 	.word	0x080133dc
 8003884:	20000f04 	.word	0x20000f04

08003888 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08c      	sub	sp, #48	@ 0x30
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8003890:	4b57      	ldr	r3, [pc, #348]	@ (80039f0 <SPI_WIFI_MspInit+0x168>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003894:	4a56      	ldr	r2, [pc, #344]	@ (80039f0 <SPI_WIFI_MspInit+0x168>)
 8003896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800389a:	6593      	str	r3, [r2, #88]	@ 0x58
 800389c:	4b54      	ldr	r3, [pc, #336]	@ (80039f0 <SPI_WIFI_MspInit+0x168>)
 800389e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a8:	4b51      	ldr	r3, [pc, #324]	@ (80039f0 <SPI_WIFI_MspInit+0x168>)
 80038aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ac:	4a50      	ldr	r2, [pc, #320]	@ (80039f0 <SPI_WIFI_MspInit+0x168>)
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038b4:	4b4e      	ldr	r3, [pc, #312]	@ (80039f0 <SPI_WIFI_MspInit+0x168>)
 80038b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038c0:	4b4b      	ldr	r3, [pc, #300]	@ (80039f0 <SPI_WIFI_MspInit+0x168>)
 80038c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c4:	4a4a      	ldr	r2, [pc, #296]	@ (80039f0 <SPI_WIFI_MspInit+0x168>)
 80038c6:	f043 0304 	orr.w	r3, r3, #4
 80038ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038cc:	4b48      	ldr	r3, [pc, #288]	@ (80039f0 <SPI_WIFI_MspInit+0x168>)
 80038ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038d8:	4b45      	ldr	r3, [pc, #276]	@ (80039f0 <SPI_WIFI_MspInit+0x168>)
 80038da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038dc:	4a44      	ldr	r2, [pc, #272]	@ (80039f0 <SPI_WIFI_MspInit+0x168>)
 80038de:	f043 0310 	orr.w	r3, r3, #16
 80038e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038e4:	4b42      	ldr	r3, [pc, #264]	@ (80039f0 <SPI_WIFI_MspInit+0x168>)
 80038e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80038f0:	2200      	movs	r2, #0
 80038f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038f6:	483f      	ldr	r0, [pc, #252]	@ (80039f4 <SPI_WIFI_MspInit+0x16c>)
 80038f8:	f001 fe4c 	bl	8005594 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80038fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003900:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8003902:	2301      	movs	r3, #1
 8003904:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800390a:	2300      	movs	r3, #0
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800390e:	f107 031c 	add.w	r3, r7, #28
 8003912:	4619      	mov	r1, r3
 8003914:	4837      	ldr	r0, [pc, #220]	@ (80039f4 <SPI_WIFI_MspInit+0x16c>)
 8003916:	f001 fb87 	bl	8005028 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800391a:	2302      	movs	r3, #2
 800391c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800391e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003922:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003924:	2300      	movs	r3, #0
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8003928:	2300      	movs	r3, #0
 800392a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800392c:	f107 031c 	add.w	r3, r7, #28
 8003930:	4619      	mov	r1, r3
 8003932:	4831      	ldr	r0, [pc, #196]	@ (80039f8 <SPI_WIFI_MspInit+0x170>)
 8003934:	f001 fb78 	bl	8005028 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8003938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800393c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800393e:	2301      	movs	r3, #1
 8003940:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8003946:	2300      	movs	r3, #0
 8003948:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800394e:	f107 031c 	add.w	r3, r7, #28
 8003952:	4619      	mov	r1, r3
 8003954:	4828      	ldr	r0, [pc, #160]	@ (80039f8 <SPI_WIFI_MspInit+0x170>)
 8003956:	f001 fb67 	bl	8005028 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800395a:	2201      	movs	r2, #1
 800395c:	2101      	movs	r1, #1
 800395e:	4826      	ldr	r0, [pc, #152]	@ (80039f8 <SPI_WIFI_MspInit+0x170>)
 8003960:	f001 fe18 	bl	8005594 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8003964:	2301      	movs	r3, #1
 8003966:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8003968:	2301      	movs	r3, #1
 800396a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003970:	2301      	movs	r3, #1
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8003974:	f107 031c 	add.w	r3, r7, #28
 8003978:	4619      	mov	r1, r3
 800397a:	481f      	ldr	r0, [pc, #124]	@ (80039f8 <SPI_WIFI_MspInit+0x170>)
 800397c:	f001 fb54 	bl	8005028 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8003980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003984:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003986:	2302      	movs	r3, #2
 8003988:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800398e:	2301      	movs	r3, #1
 8003990:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8003992:	2306      	movs	r3, #6
 8003994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8003996:	f107 031c 	add.w	r3, r7, #28
 800399a:	4619      	mov	r1, r3
 800399c:	4817      	ldr	r0, [pc, #92]	@ (80039fc <SPI_WIFI_MspInit+0x174>)
 800399e:	f001 fb43 	bl	8005028 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80039a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039a6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80039a8:	2302      	movs	r3, #2
 80039aa:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80039b0:	2301      	movs	r3, #1
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80039b4:	2306      	movs	r3, #6
 80039b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80039b8:	f107 031c 	add.w	r3, r7, #28
 80039bc:	4619      	mov	r1, r3
 80039be:	480f      	ldr	r0, [pc, #60]	@ (80039fc <SPI_WIFI_MspInit+0x174>)
 80039c0:	f001 fb32 	bl	8005028 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 80039c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039c8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80039ca:	2302      	movs	r3, #2
 80039cc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80039ce:	2301      	movs	r3, #1
 80039d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80039d2:	2301      	movs	r3, #1
 80039d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80039d6:	2306      	movs	r3, #6
 80039d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 80039da:	f107 031c 	add.w	r3, r7, #28
 80039de:	4619      	mov	r1, r3
 80039e0:	4806      	ldr	r0, [pc, #24]	@ (80039fc <SPI_WIFI_MspInit+0x174>)
 80039e2:	f001 fb21 	bl	8005028 <HAL_GPIO_Init>
}
 80039e6:	bf00      	nop
 80039e8:	3730      	adds	r7, #48	@ 0x30
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	48000400 	.word	0x48000400
 80039f8:	48001000 	.word	0x48001000
 80039fc:	48000800 	.word	0x48000800

08003a00 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d145      	bne.n	8003aa0 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8003a14:	4b27      	ldr	r3, [pc, #156]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a16:	4a28      	ldr	r2, [pc, #160]	@ (8003ab8 <SPI_WIFI_Init+0xb8>)
 8003a18:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8003a1a:	4826      	ldr	r0, [pc, #152]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a1c:	f7ff ff34 	bl	8003888 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8003a20:	4b24      	ldr	r3, [pc, #144]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a22:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a26:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8003a28:	4b22      	ldr	r3, [pc, #136]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8003a2e:	4b21      	ldr	r3, [pc, #132]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a30:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8003a34:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8003a36:	4b1f      	ldr	r3, [pc, #124]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8003a42:	4b1c      	ldr	r3, [pc, #112]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a48:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8003a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003a50:	4b18      	ldr	r3, [pc, #96]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8003a56:	4b17      	ldr	r3, [pc, #92]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8003a5c:	4b15      	ldr	r3, [pc, #84]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 8003a62:	4b14      	ldr	r3, [pc, #80]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8003a68:	4812      	ldr	r0, [pc, #72]	@ (8003ab4 <SPI_WIFI_Init+0xb4>)
 8003a6a:	f004 f82b 	bl	8007ac4 <HAL_SPI_Init>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8003a74:	f04f 33ff 	mov.w	r3, #4294967295
 8003a78:	e018      	b.n	8003aac <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	2007      	movs	r0, #7
 8003a80:	f001 f94d 	bl	8004d1e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8003a84:	2007      	movs	r0, #7
 8003a86:	f001 f966 	bl	8004d56 <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	2033      	movs	r0, #51	@ 0x33
 8003a90:	f001 f945 	bl	8004d1e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8003a94:	2033      	movs	r0, #51	@ 0x33
 8003a96:	f001 f95e 	bl	8004d56 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8003a9a:	200a      	movs	r0, #10
 8003a9c:	f000 fa08 	bl	8003eb0 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8003aa0:	f000 f80c 	bl	8003abc <SPI_WIFI_ResetModule>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	73fb      	strb	r3, [r7, #15]

  return rc;
 8003aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20000f08 	.word	0x20000f08
 8003ab8:	40003c00 	.word	0x40003c00

08003abc <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8003ac2:	f001 f821 	bl	8004b08 <HAL_GetTick>
 8003ac6:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8003acc:	2200      	movs	r2, #0
 8003ace:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ad2:	4835      	ldr	r0, [pc, #212]	@ (8003ba8 <SPI_WIFI_ResetModule+0xec>)
 8003ad4:	f001 fd5e 	bl	8005594 <HAL_GPIO_WritePin>
 8003ad8:	200a      	movs	r0, #10
 8003ada:	f001 f821 	bl	8004b20 <HAL_Delay>
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ae4:	4830      	ldr	r0, [pc, #192]	@ (8003ba8 <SPI_WIFI_ResetModule+0xec>)
 8003ae6:	f001 fd55 	bl	8005594 <HAL_GPIO_WritePin>
 8003aea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003aee:	f001 f817 	bl	8004b20 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8003af2:	2200      	movs	r2, #0
 8003af4:	2101      	movs	r1, #1
 8003af6:	482c      	ldr	r0, [pc, #176]	@ (8003ba8 <SPI_WIFI_ResetModule+0xec>)
 8003af8:	f001 fd4c 	bl	8005594 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003afc:	200f      	movs	r0, #15
 8003afe:	f000 f9d7 	bl	8003eb0 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8003b02:	e02b      	b.n	8003b5c <SPI_WIFI_ResetModule+0xa0>
  {
    if (count > 4)
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d907      	bls.n	8003b1a <SPI_WIFI_ResetModule+0x5e>
    {
      WIFI_DISABLE_NSS();
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4826      	ldr	r0, [pc, #152]	@ (8003ba8 <SPI_WIFI_ResetModule+0xec>)
 8003b10:	f001 fd40 	bl	8005594 <HAL_GPIO_WritePin>
      return -1;
 8003b14:	f04f 33ff 	mov.w	r3, #4294967295
 8003b18:	e042      	b.n	8003ba0 <SPI_WIFI_ResetModule+0xe4>
    }
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	463a      	mov	r2, r7
 8003b1e:	18d1      	adds	r1, r2, r3
 8003b20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b24:	2201      	movs	r2, #1
 8003b26:	4821      	ldr	r0, [pc, #132]	@ (8003bac <SPI_WIFI_ResetModule+0xf0>)
 8003b28:	f004 f8c0 	bl	8007cac <HAL_SPI_Receive>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	3302      	adds	r3, #2
 8003b34:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8003b36:	f000 ffe7 	bl	8004b08 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b44:	d202      	bcs.n	8003b4c <SPI_WIFI_ResetModule+0x90>
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <SPI_WIFI_ResetModule+0xa0>
    {
      WIFI_DISABLE_NSS();
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4815      	ldr	r0, [pc, #84]	@ (8003ba8 <SPI_WIFI_ResetModule+0xec>)
 8003b52:	f001 fd1f 	bl	8005594 <HAL_GPIO_WritePin>
      return -1;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5a:	e021      	b.n	8003ba0 <SPI_WIFI_ResetModule+0xe4>
  while (WIFI_IS_CMDDATA_READY())
 8003b5c:	2102      	movs	r1, #2
 8003b5e:	4812      	ldr	r0, [pc, #72]	@ (8003ba8 <SPI_WIFI_ResetModule+0xec>)
 8003b60:	f001 fd00 	bl	8005564 <HAL_GPIO_ReadPin>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d0cc      	beq.n	8003b04 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	480e      	ldr	r0, [pc, #56]	@ (8003ba8 <SPI_WIFI_ResetModule+0xec>)
 8003b70:	f001 fd10 	bl	8005594 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8003b74:	783b      	ldrb	r3, [r7, #0]
 8003b76:	2b15      	cmp	r3, #21
 8003b78:	d10e      	bne.n	8003b98 <SPI_WIFI_ResetModule+0xdc>
 8003b7a:	787b      	ldrb	r3, [r7, #1]
 8003b7c:	2b15      	cmp	r3, #21
 8003b7e:	d10b      	bne.n	8003b98 <SPI_WIFI_ResetModule+0xdc>
 8003b80:	78bb      	ldrb	r3, [r7, #2]
 8003b82:	2b0d      	cmp	r3, #13
 8003b84:	d108      	bne.n	8003b98 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8003b86:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8003b88:	2b0a      	cmp	r3, #10
 8003b8a:	d105      	bne.n	8003b98 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8003b8c:	793b      	ldrb	r3, [r7, #4]
 8003b8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b90:	d102      	bne.n	8003b98 <SPI_WIFI_ResetModule+0xdc>
 8003b92:	797b      	ldrb	r3, [r7, #5]
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d002      	beq.n	8003b9e <SPI_WIFI_ResetModule+0xe2>
  {
    return -1;
 8003b98:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9c:	e000      	b.n	8003ba0 <SPI_WIFI_ResetModule+0xe4>
  }
  return 0;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	48001000 	.word	0x48001000
 8003bac:	20000f08 	.word	0x20000f08

08003bb0 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8003bb4:	4802      	ldr	r0, [pc, #8]	@ (8003bc0 <SPI_WIFI_DeInit+0x10>)
 8003bb6:	f004 f851 	bl	8007c5c <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000f08 	.word	0x20000f08

08003bc4 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8003bcc:	f000 ff9c 	bl	8004b08 <HAL_GetTick>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8003bd4:	e00a      	b.n	8003bec <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8003bd6:	f000 ff97 	bl	8004b08 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1ad2      	subs	r2, r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d902      	bls.n	8003bec <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bea:	e007      	b.n	8003bfc <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8003bec:	2102      	movs	r1, #2
 8003bee:	4805      	ldr	r0, [pc, #20]	@ (8003c04 <wait_cmddata_rdy_high+0x40>)
 8003bf0:	f001 fcb8 	bl	8005564 <HAL_GPIO_ReadPin>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d1ed      	bne.n	8003bd6 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	48001000 	.word	0x48001000

08003c08 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8003c10:	f000 ff7a 	bl	8004b08 <HAL_GetTick>
 8003c14:	4603      	mov	r3, r0
 8003c16:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8003c18:	e00a      	b.n	8003c30 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8003c1a:	f000 ff75 	bl	8004b08 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	1ad2      	subs	r2, r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d902      	bls.n	8003c30 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	e004      	b.n	8003c3a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8003c30:	4b04      	ldr	r3, [pc, #16]	@ (8003c44 <wait_cmddata_rdy_rising_event+0x3c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d0f0      	beq.n	8003c1a <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8003c38:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000f74 	.word	0x20000f74

08003c48 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8003c50:	f000 ff5a 	bl	8004b08 <HAL_GetTick>
 8003c54:	4603      	mov	r3, r0
 8003c56:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8003c58:	e00a      	b.n	8003c70 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8003c5a:	f000 ff55 	bl	8004b08 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1ad2      	subs	r2, r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d902      	bls.n	8003c70 <wait_spi_rx_event+0x28>
    {
      return -1;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	e004      	b.n	8003c7a <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8003c70:	4b04      	ldr	r3, [pc, #16]	@ (8003c84 <wait_spi_rx_event+0x3c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d0f0      	beq.n	8003c5a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8003c78:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000f6c 	.word	0x20000f6c

08003c88 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8003c90:	f000 ff3a 	bl	8004b08 <HAL_GetTick>
 8003c94:	4603      	mov	r3, r0
 8003c96:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8003c98:	e00a      	b.n	8003cb0 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8003c9a:	f000 ff35 	bl	8004b08 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad2      	subs	r2, r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d902      	bls.n	8003cb0 <wait_spi_tx_event+0x28>
    {
      return -1;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e004      	b.n	8003cba <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8003cb0:	4b04      	ldr	r3, [pc, #16]	@ (8003cc4 <wait_spi_tx_event+0x3c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d0f0      	beq.n	8003c9a <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8003cb8:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000f70 	.word	0x20000f70

08003cc8 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8003cda:	2201      	movs	r2, #1
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4834      	ldr	r0, [pc, #208]	@ (8003db0 <SPI_WIFI_ReceiveData+0xe8>)
 8003ce0:	f001 fc58 	bl	8005594 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8003ce4:	2003      	movs	r0, #3
 8003ce6:	f000 f8e3 	bl	8003eb0 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff ff8b 	bl	8003c08 <wait_cmddata_rdy_rising_event>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	da02      	bge.n	8003cfe <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8003cf8:	f06f 0302 	mvn.w	r3, #2
 8003cfc:	e054      	b.n	8003da8 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2101      	movs	r1, #1
 8003d02:	482b      	ldr	r0, [pc, #172]	@ (8003db0 <SPI_WIFI_ReceiveData+0xe8>)
 8003d04:	f001 fc46 	bl	8005594 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003d08:	200f      	movs	r0, #15
 8003d0a:	f000 f8d1 	bl	8003eb0 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8003d0e:	e03d      	b.n	8003d8c <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8003d10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003d14:	897b      	ldrh	r3, [r7, #10]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	db02      	blt.n	8003d20 <SPI_WIFI_ReceiveData+0x58>
 8003d1a:	897b      	ldrh	r3, [r7, #10]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d13c      	bne.n	8003d9a <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8003d20:	4b24      	ldr	r3, [pc, #144]	@ (8003db4 <SPI_WIFI_ReceiveData+0xec>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8003d26:	f107 0314 	add.w	r3, r7, #20
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4822      	ldr	r0, [pc, #136]	@ (8003db8 <SPI_WIFI_ReceiveData+0xf0>)
 8003d30:	f004 fd9c 	bl	800886c <HAL_SPI_Receive_IT>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	481c      	ldr	r0, [pc, #112]	@ (8003db0 <SPI_WIFI_ReceiveData+0xe8>)
 8003d40:	f001 fc28 	bl	8005594 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295
 8003d48:	e02e      	b.n	8003da8 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff ff7b 	bl	8003c48 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8003d52:	7d3a      	ldrb	r2, [r7, #20]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	7d7a      	ldrb	r2, [r7, #21]
 8003d5e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8003d60:	8afb      	ldrh	r3, [r7, #22]
 8003d62:	3302      	adds	r3, #2
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3302      	adds	r3, #2
 8003d6c:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 8003d6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d72:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003d76:	db09      	blt.n	8003d8c <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8003d78:	2201      	movs	r2, #1
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	480c      	ldr	r0, [pc, #48]	@ (8003db0 <SPI_WIFI_ReceiveData+0xe8>)
 8003d7e:	f001 fc09 	bl	8005594 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8003d82:	f7ff fe9b 	bl	8003abc <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8003d86:	f06f 0303 	mvn.w	r3, #3
 8003d8a:	e00d      	b.n	8003da8 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	4808      	ldr	r0, [pc, #32]	@ (8003db0 <SPI_WIFI_ReceiveData+0xe8>)
 8003d90:	f001 fbe8 	bl	8005564 <HAL_GPIO_ReadPin>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d0ba      	beq.n	8003d10 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4804      	ldr	r0, [pc, #16]	@ (8003db0 <SPI_WIFI_ReceiveData+0xe8>)
 8003da0:	f001 fbf8 	bl	8005594 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8003da4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	48001000 	.word	0x48001000
 8003db4:	20000f6c 	.word	0x20000f6c
 8003db8:	20000f08 	.word	0x20000f08

08003dbc <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fef9 	bl	8003bc4 <wait_cmddata_rdy_high>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	da02      	bge.n	8003dde <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8003dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ddc:	e04f      	b.n	8003e7e <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8003dde:	4b2a      	ldr	r3, [pc, #168]	@ (8003e88 <SPI_WIFI_SendData+0xcc>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8003de4:	2200      	movs	r2, #0
 8003de6:	2101      	movs	r1, #1
 8003de8:	4828      	ldr	r0, [pc, #160]	@ (8003e8c <SPI_WIFI_SendData+0xd0>)
 8003dea:	f001 fbd3 	bl	8005594 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003dee:	200f      	movs	r0, #15
 8003df0:	f000 f85e 	bl	8003eb0 <SPI_WIFI_DelayUs>
  if (len > 1)
 8003df4:	897b      	ldrh	r3, [r7, #10]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d919      	bls.n	8003e2e <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 8003dfa:	4b25      	ldr	r3, [pc, #148]	@ (8003e90 <SPI_WIFI_SendData+0xd4>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8003e00:	897b      	ldrh	r3, [r7, #10]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	68f9      	ldr	r1, [r7, #12]
 8003e0a:	4822      	ldr	r0, [pc, #136]	@ (8003e94 <SPI_WIFI_SendData+0xd8>)
 8003e0c:	f004 fc92 	bl	8008734 <HAL_SPI_Transmit_IT>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8003e16:	2201      	movs	r2, #1
 8003e18:	2101      	movs	r1, #1
 8003e1a:	481c      	ldr	r0, [pc, #112]	@ (8003e8c <SPI_WIFI_SendData+0xd0>)
 8003e1c:	f001 fbba 	bl	8005594 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	e02b      	b.n	8003e7e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff2d 	bl	8003c88 <wait_spi_tx_event>
  }

  if (len & 1)
 8003e2e:	897b      	ldrh	r3, [r7, #10]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d020      	beq.n	8003e7a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8003e38:	897b      	ldrh	r3, [r7, #10]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8003e44:	230a      	movs	r3, #10
 8003e46:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8003e48:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <SPI_WIFI_SendData+0xd4>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8003e4e:	f107 0314 	add.w	r3, r7, #20
 8003e52:	2201      	movs	r2, #1
 8003e54:	4619      	mov	r1, r3
 8003e56:	480f      	ldr	r0, [pc, #60]	@ (8003e94 <SPI_WIFI_SendData+0xd8>)
 8003e58:	f004 fc6c 	bl	8008734 <HAL_SPI_Transmit_IT>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8003e62:	2201      	movs	r2, #1
 8003e64:	2101      	movs	r1, #1
 8003e66:	4809      	ldr	r0, [pc, #36]	@ (8003e8c <SPI_WIFI_SendData+0xd0>)
 8003e68:	f001 fb94 	bl	8005594 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	e005      	b.n	8003e7e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff07 	bl	8003c88 <wait_spi_tx_event>
  }
  return len;
 8003e7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000f74 	.word	0x20000f74
 8003e8c:	48001000 	.word	0x48001000
 8003e90:	20000f70 	.word	0x20000f70
 8003e94:	20000f08 	.word	0x20000f08

08003e98 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fe3d 	bl	8004b20 <HAL_Delay>
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8003ec0:	4b20      	ldr	r3, [pc, #128]	@ (8003f44 <SPI_WIFI_DelayUs+0x94>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d122      	bne.n	8003f0e <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8003ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f48 <SPI_WIFI_DelayUs+0x98>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f4c <SPI_WIFI_DelayUs+0x9c>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	099b      	lsrs	r3, r3, #6
 8003ed4:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8003ede:	f000 fe13 	bl	8004b08 <HAL_GetTick>
 8003ee2:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8003ee4:	e002      	b.n	8003eec <SPI_WIFI_DelayUs+0x3c>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f9      	bne.n	8003ee6 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8003ef2:	f000 fe09 	bl	8004b08 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	4a11      	ldr	r2, [pc, #68]	@ (8003f44 <SPI_WIFI_DelayUs+0x94>)
 8003efe:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8003f00:	4b10      	ldr	r3, [pc, #64]	@ (8003f44 <SPI_WIFI_DelayUs+0x94>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d102      	bne.n	8003f0e <SPI_WIFI_DelayUs+0x5e>
 8003f08:	4b0e      	ldr	r3, [pc, #56]	@ (8003f44 <SPI_WIFI_DelayUs+0x94>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f48 <SPI_WIFI_DelayUs+0x98>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a0f      	ldr	r2, [pc, #60]	@ (8003f50 <SPI_WIFI_DelayUs+0xa0>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	0c9a      	lsrs	r2, r3, #18
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f44 <SPI_WIFI_DelayUs+0x94>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	fb02 f303 	mul.w	r3, r2, r3
 8003f2c:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8003f2e:	e002      	b.n	8003f36 <SPI_WIFI_DelayUs+0x86>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f9      	bne.n	8003f30 <SPI_WIFI_DelayUs+0x80>
  return;
 8003f3c:	bf00      	nop
}
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000f78 	.word	0x20000f78
 8003f48:	20000044 	.word	0x20000044
 8003f4c:	10624dd3 	.word	0x10624dd3
 8003f50:	431bde83 	.word	0x431bde83

08003f54 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <HAL_SPI_RxCpltCallback+0x24>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8003f64:	4b04      	ldr	r3, [pc, #16]	@ (8003f78 <HAL_SPI_RxCpltCallback+0x24>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
  }
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	20000f6c 	.word	0x20000f6c

08003f7c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8003f84:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <HAL_SPI_TxCpltCallback+0x24>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8003f8c:	4b04      	ldr	r3, [pc, #16]	@ (8003fa0 <HAL_SPI_TxCpltCallback+0x24>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
  }
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000f70 	.word	0x20000f70

08003fa4 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8003fa8:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <SPI_WIFI_ISR+0x1c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d102      	bne.n	8003fb6 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	@ (8003fc0 <SPI_WIFI_ISR+0x1c>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
   }
}
 8003fb6:	bf00      	nop
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	20000f74 	.word	0x20000f74

08003fc4 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <WIFI_Init+0x40>)
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <WIFI_Init+0x44>)
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <WIFI_Init+0x48>)
 8003fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8004010 <WIFI_Init+0x4c>)
 8003fda:	490e      	ldr	r1, [pc, #56]	@ (8004014 <WIFI_Init+0x50>)
 8003fdc:	480e      	ldr	r0, [pc, #56]	@ (8004018 <WIFI_Init+0x54>)
 8003fde:	f7ff f8b1 	bl	8003144 <ES_WIFI_RegisterBusIO>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d107      	bne.n	8003ff8 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003fe8:	480b      	ldr	r0, [pc, #44]	@ (8004018 <WIFI_Init+0x54>)
 8003fea:	f7ff f877 	bl	80030dc <ES_WIFI_Init>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	08003cc9 	.word	0x08003cc9
 8004008:	08003dbd 	.word	0x08003dbd
 800400c:	08003e99 	.word	0x08003e99
 8004010:	08003bb1 	.word	0x08003bb1
 8004014:	08003a01 	.word	0x08003a01
 8004018:	20000f7c 	.word	0x20000f7c

0800401c <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	4613      	mov	r3, r2
 8004028:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	4809      	ldr	r0, [pc, #36]	@ (800405c <WIFI_Connect+0x40>)
 8004036:	f7ff f8b9 	bl	80031ac <ES_WIFI_Connect>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d107      	bne.n	8004050 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004040:	4806      	ldr	r0, [pc, #24]	@ (800405c <WIFI_Connect+0x40>)
 8004042:	f7ff f95b 	bl	80032fc <ES_WIFI_GetNetworkSettings>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8004050:	7dfb      	ldrb	r3, [r7, #23]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000f7c 	.word	0x20000f7c

08004060 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <WIFI_GetMAC_Address+0x32>
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	461a      	mov	r2, r3
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4806      	ldr	r0, [pc, #24]	@ (800409c <WIFI_GetMAC_Address+0x3c>)
 8004084:	f7ff f964 	bl	8003350 <ES_WIFI_GetMACAddress>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20000f7c 	.word	0x20000f7c

080040a0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d010      	beq.n	80040d8 <WIFI_GetIP_Address+0x38>
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d90d      	bls.n	80040d8 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80040bc:	4809      	ldr	r0, [pc, #36]	@ (80040e4 <WIFI_GetIP_Address+0x44>)
 80040be:	f7ff f8ed 	bl	800329c <ES_WIFI_IsConnected>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d107      	bne.n	80040d8 <WIFI_GetIP_Address+0x38>
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80040c8:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <WIFI_GetIP_Address+0x44>)
 80040ca:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 80040ce:	461a      	mov	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000f7c 	.word	0x20000f7c

080040e8 <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	@ 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	460b      	mov	r3, r1
 80040f6:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8004104:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004106:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8004108:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800410a:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800410c:	7afb      	ldrb	r3, [r7, #11]
 800410e:	2b00      	cmp	r3, #0
 8004110:	bf14      	ite	ne
 8004112:	2301      	movne	r3, #1
 8004114:	2300      	moveq	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	3301      	adds	r3, #1
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	3302      	adds	r3, #2
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	3303      	adds	r3, #3
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004138:	f107 0310 	add.w	r3, r7, #16
 800413c:	4619      	mov	r1, r3
 800413e:	4807      	ldr	r0, [pc, #28]	@ (800415c <WIFI_OpenClientConnection+0x74>)
 8004140:	f7ff f93c 	bl	80033bc <ES_WIFI_StartClientConnection>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d102      	bne.n	8004150 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8004150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004154:	4618      	mov	r0, r3
 8004156:	3728      	adds	r7, #40	@ 0x28
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20000f7c 	.word	0x20000f7c

08004160 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af02      	add	r7, sp, #8
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	b2d9      	uxtb	r1, r3
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	9301      	str	r3, [sp, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	4806      	ldr	r0, [pc, #24]	@ (80041a0 <WIFI_SendData+0x40>)
 8004188:	f7ff fa02 	bl	8003590 <ES_WIFI_SendData>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8004196:	7dfb      	ldrb	r3, [r7, #23]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000f7c 	.word	0x20000f7c

080041a4 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	b2d9      	uxtb	r1, r3
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	4613      	mov	r3, r2
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	4806      	ldr	r0, [pc, #24]	@ (80041e4 <WIFI_ReceiveData+0x40>)
 80041cc:	f7ff fa9c 	bl	8003708 <ES_WIFI_ReceiveData>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80041da:	7dfb      	ldrb	r3, [r7, #23]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000f7c 	.word	0x20000f7c

080041e8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	@ 0x28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80041f0:	4b27      	ldr	r3, [pc, #156]	@ (8004290 <I2Cx_MspInit+0xa8>)
 80041f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f4:	4a26      	ldr	r2, [pc, #152]	@ (8004290 <I2Cx_MspInit+0xa8>)
 80041f6:	f043 0302 	orr.w	r3, r3, #2
 80041fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041fc:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <I2Cx_MspInit+0xa8>)
 80041fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8004208:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800420c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800420e:	2312      	movs	r3, #18
 8004210:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8004212:	2301      	movs	r3, #1
 8004214:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004216:	2303      	movs	r3, #3
 8004218:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800421a:	2304      	movs	r3, #4
 800421c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800421e:	f107 0314 	add.w	r3, r7, #20
 8004222:	4619      	mov	r1, r3
 8004224:	481b      	ldr	r0, [pc, #108]	@ (8004294 <I2Cx_MspInit+0xac>)
 8004226:	f000 feff 	bl	8005028 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	4619      	mov	r1, r3
 8004230:	4818      	ldr	r0, [pc, #96]	@ (8004294 <I2Cx_MspInit+0xac>)
 8004232:	f000 fef9 	bl	8005028 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8004236:	4b16      	ldr	r3, [pc, #88]	@ (8004290 <I2Cx_MspInit+0xa8>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	4a15      	ldr	r2, [pc, #84]	@ (8004290 <I2Cx_MspInit+0xa8>)
 800423c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004240:	6593      	str	r3, [r2, #88]	@ 0x58
 8004242:	4b13      	ldr	r3, [pc, #76]	@ (8004290 <I2Cx_MspInit+0xa8>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800424e:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <I2Cx_MspInit+0xa8>)
 8004250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004252:	4a0f      	ldr	r2, [pc, #60]	@ (8004290 <I2Cx_MspInit+0xa8>)
 8004254:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004258:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800425a:	4b0d      	ldr	r3, [pc, #52]	@ (8004290 <I2Cx_MspInit+0xa8>)
 800425c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425e:	4a0c      	ldr	r2, [pc, #48]	@ (8004290 <I2Cx_MspInit+0xa8>)
 8004260:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004264:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8004266:	2200      	movs	r2, #0
 8004268:	210f      	movs	r1, #15
 800426a:	2021      	movs	r0, #33	@ 0x21
 800426c:	f000 fd57 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004270:	2021      	movs	r0, #33	@ 0x21
 8004272:	f000 fd70 	bl	8004d56 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8004276:	2200      	movs	r2, #0
 8004278:	210f      	movs	r1, #15
 800427a:	2022      	movs	r0, #34	@ 0x22
 800427c:	f000 fd4f 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8004280:	2022      	movs	r0, #34	@ 0x22
 8004282:	f000 fd68 	bl	8004d56 <HAL_NVIC_EnableIRQ>
}
 8004286:	bf00      	nop
 8004288:	3728      	adds	r7, #40	@ 0x28
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	48000400 	.word	0x48000400

08004298 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <I2Cx_Init+0x54>)
 80042a4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a11      	ldr	r2, [pc, #68]	@ (80042f0 <I2Cx_Init+0x58>)
 80042aa:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ff89 	bl	80041e8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f001 f9a6 	bl	8005628 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80042dc:	2100      	movs	r1, #0
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f001 ff5c 	bl	800619c <HAL_I2CEx_ConfigAnalogFilter>
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40005800 	.word	0x40005800
 80042f0:	00702681 	.word	0x00702681

080042f4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	@ 0x28
 80042f8:	af04      	add	r7, sp, #16
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	4608      	mov	r0, r1
 80042fe:	4611      	mov	r1, r2
 8004300:	461a      	mov	r2, r3
 8004302:	4603      	mov	r3, r0
 8004304:	72fb      	strb	r3, [r7, #11]
 8004306:	460b      	mov	r3, r1
 8004308:	813b      	strh	r3, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004312:	7afb      	ldrb	r3, [r7, #11]
 8004314:	b299      	uxth	r1, r3
 8004316:	88f8      	ldrh	r0, [r7, #6]
 8004318:	893a      	ldrh	r2, [r7, #8]
 800431a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800431e:	9302      	str	r3, [sp, #8]
 8004320:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	4603      	mov	r3, r0
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f001 fb5a 	bl	80059e4 <HAL_I2C_Mem_Read>
 8004330:	4603      	mov	r3, r0
 8004332:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d004      	beq.n	8004344 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800433a:	7afb      	ldrb	r3, [r7, #11]
 800433c:	4619      	mov	r1, r3
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f832 	bl	80043a8 <I2Cx_Error>
  }
  return status;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b08a      	sub	sp, #40	@ 0x28
 8004352:	af04      	add	r7, sp, #16
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	4608      	mov	r0, r1
 8004358:	4611      	mov	r1, r2
 800435a:	461a      	mov	r2, r3
 800435c:	4603      	mov	r3, r0
 800435e:	72fb      	strb	r3, [r7, #11]
 8004360:	460b      	mov	r3, r1
 8004362:	813b      	strh	r3, [r7, #8]
 8004364:	4613      	mov	r3, r2
 8004366:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800436c:	7afb      	ldrb	r3, [r7, #11]
 800436e:	b299      	uxth	r1, r3
 8004370:	88f8      	ldrh	r0, [r7, #6]
 8004372:	893a      	ldrh	r2, [r7, #8]
 8004374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004378:	9302      	str	r3, [sp, #8]
 800437a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	4603      	mov	r3, r0
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f001 fa19 	bl	80057bc <HAL_I2C_Mem_Write>
 800438a:	4603      	mov	r3, r0
 800438c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800438e:	7dfb      	ldrb	r3, [r7, #23]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004394:	7afb      	ldrb	r3, [r7, #11]
 8004396:	4619      	mov	r1, r3
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f805 	bl	80043a8 <I2Cx_Error>
  }
  return status;
 800439e:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f001 f9d2 	bl	800575e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff ff6c 	bl	8004298 <I2Cx_Init>
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80043cc:	4802      	ldr	r0, [pc, #8]	@ (80043d8 <SENSOR_IO_Init+0x10>)
 80043ce:	f7ff ff63 	bl	8004298 <I2Cx_Init>
}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	2000187c 	.word	0x2000187c

080043dc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	4603      	mov	r3, r0
 80043e4:	71fb      	strb	r3, [r7, #7]
 80043e6:	460b      	mov	r3, r1
 80043e8:	71bb      	strb	r3, [r7, #6]
 80043ea:	4613      	mov	r3, r2
 80043ec:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80043ee:	79bb      	ldrb	r3, [r7, #6]
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	79f9      	ldrb	r1, [r7, #7]
 80043f4:	2301      	movs	r3, #1
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	1d7b      	adds	r3, r7, #5
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	2301      	movs	r3, #1
 80043fe:	4803      	ldr	r0, [pc, #12]	@ (800440c <SENSOR_IO_Write+0x30>)
 8004400:	f7ff ffa5 	bl	800434e <I2Cx_WriteMultiple>
}
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	2000187c 	.word	0x2000187c

08004410 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af02      	add	r7, sp, #8
 8004416:	4603      	mov	r3, r0
 8004418:	460a      	mov	r2, r1
 800441a:	71fb      	strb	r3, [r7, #7]
 800441c:	4613      	mov	r3, r2
 800441e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004424:	79bb      	ldrb	r3, [r7, #6]
 8004426:	b29a      	uxth	r2, r3
 8004428:	79f9      	ldrb	r1, [r7, #7]
 800442a:	2301      	movs	r3, #1
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	f107 030f 	add.w	r3, r7, #15
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2301      	movs	r3, #1
 8004436:	4804      	ldr	r0, [pc, #16]	@ (8004448 <SENSOR_IO_Read+0x38>)
 8004438:	f7ff ff5c 	bl	80042f4 <I2Cx_ReadMultiple>

  return read_value;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	2000187c 	.word	0x2000187c

0800444c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af02      	add	r7, sp, #8
 8004452:	603a      	str	r2, [r7, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
 800445a:	460b      	mov	r3, r1
 800445c:	71bb      	strb	r3, [r7, #6]
 800445e:	4613      	mov	r3, r2
 8004460:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004462:	79bb      	ldrb	r3, [r7, #6]
 8004464:	b29a      	uxth	r2, r3
 8004466:	79f9      	ldrb	r1, [r7, #7]
 8004468:	88bb      	ldrh	r3, [r7, #4]
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2301      	movs	r3, #1
 8004472:	4804      	ldr	r0, [pc, #16]	@ (8004484 <SENSOR_IO_ReadMultiple+0x38>)
 8004474:	f7ff ff3e 	bl	80042f4 <I2Cx_ReadMultiple>
 8004478:	4603      	mov	r3, r0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	2000187c 	.word	0x2000187c

08004488 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8004492:	2300      	movs	r3, #0
 8004494:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8004496:	4b19      	ldr	r3, [pc, #100]	@ (80044fc <BSP_ACCELERO_Init+0x74>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	4798      	blx	r3
 800449c:	4603      	mov	r3, r0
 800449e:	2b6a      	cmp	r3, #106	@ 0x6a
 80044a0:	d002      	beq.n	80044a8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
 80044a6:	e024      	b.n	80044f2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80044a8:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <BSP_ACCELERO_Init+0x78>)
 80044aa:	4a14      	ldr	r2, [pc, #80]	@ (80044fc <BSP_ACCELERO_Init+0x74>)
 80044ac:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_104Hz;
 80044ae:	2340      	movs	r3, #64	@ 0x40
 80044b0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80044b6:	2300      	movs	r3, #0
 80044b8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80044ba:	2340      	movs	r3, #64	@ 0x40
 80044bc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80044c6:	797a      	ldrb	r2, [r7, #5]
 80044c8:	7abb      	ldrb	r3, [r7, #10]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80044d0:	7a3b      	ldrb	r3, [r7, #8]
 80044d2:	f043 0304 	orr.w	r3, r3, #4
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	b21a      	sxth	r2, r3
 80044dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	b21b      	sxth	r3, r3
 80044e4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80044e6:	4b06      	ldr	r3, [pc, #24]	@ (8004500 <BSP_ACCELERO_Init+0x78>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	89ba      	ldrh	r2, [r7, #12]
 80044ee:	4610      	mov	r0, r2
 80044f0:	4798      	blx	r3
  }  

  return ret;
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000048 	.word	0x20000048
 8004500:	200018d0 	.word	0x200018d0

08004504 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800450c:	4b08      	ldr	r3, [pc, #32]	@ (8004530 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d009      	beq.n	8004528 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8004514:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	2b00      	cmp	r3, #0
 800451c:	d004      	beq.n	8004528 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800451e:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
    }
  }
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	200018d0 	.word	0x200018d0

08004534 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800453e:	2300      	movs	r3, #0
 8004540:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8004542:	4b1b      	ldr	r3, [pc, #108]	@ (80045b0 <BSP_GYRO_Init+0x7c>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	4798      	blx	r3
 8004548:	4603      	mov	r3, r0
 800454a:	2b6a      	cmp	r3, #106	@ 0x6a
 800454c:	d002      	beq.n	8004554 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
 8004552:	e028      	b.n	80045a6 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8004554:	4b17      	ldr	r3, [pc, #92]	@ (80045b4 <BSP_GYRO_Init+0x80>)
 8004556:	4a16      	ldr	r2, [pc, #88]	@ (80045b0 <BSP_GYRO_Init+0x7c>)
 8004558:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_104Hz;
 800455e:	2340      	movs	r3, #64	@ 0x40
 8004560:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800456a:	2340      	movs	r3, #64	@ 0x40
 800456c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_245;
 8004572:	2300      	movs	r3, #0
 8004574:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8004576:	7aba      	ldrb	r2, [r7, #10]
 8004578:	797b      	ldrb	r3, [r7, #5]
 800457a:	4313      	orrs	r3, r2
 800457c:	b2db      	uxtb	r3, r3
 800457e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8004580:	7a3b      	ldrb	r3, [r7, #8]
 8004582:	f043 0304 	orr.w	r3, r3, #4
 8004586:	b2db      	uxtb	r3, r3
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	b21a      	sxth	r2, r3
 800458c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	b21b      	sxth	r3, r3
 8004594:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8004596:	4b07      	ldr	r3, [pc, #28]	@ (80045b4 <BSP_GYRO_Init+0x80>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	89ba      	ldrh	r2, [r7, #12]
 800459e:	4610      	mov	r0, r2
 80045a0:	4798      	blx	r3
    
    ret = GYRO_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	2000007c 	.word	0x2000007c
 80045b4:	200018d4 	.word	0x200018d4

080045b8 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80045c0:	4b08      	ldr	r3, [pc, #32]	@ (80045e4 <BSP_GYRO_GetXYZ+0x2c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d009      	beq.n	80045dc <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80045c8:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <BSP_GYRO_GetXYZ+0x2c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80045d2:	4b04      	ldr	r3, [pc, #16]	@ (80045e4 <BSP_GYRO_GetXYZ+0x2c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	4798      	blx	r3
    }
  }
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	200018d4 	.word	0x200018d4

080045e8 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80045f6:	2110      	movs	r1, #16
 80045f8:	20d4      	movs	r0, #212	@ 0xd4
 80045fa:	f7ff ff09 	bl	8004410 <SENSOR_IO_Read>
 80045fe:	4603      	mov	r3, r0
 8004600:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004606:	7bbb      	ldrb	r3, [r7, #14]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800460e:	7bba      	ldrb	r2, [r7, #14]
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	4313      	orrs	r3, r2
 8004614:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8004616:	7bbb      	ldrb	r3, [r7, #14]
 8004618:	461a      	mov	r2, r3
 800461a:	2110      	movs	r1, #16
 800461c:	20d4      	movs	r0, #212	@ 0xd4
 800461e:	f7ff fedd 	bl	80043dc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004622:	2112      	movs	r1, #18
 8004624:	20d4      	movs	r0, #212	@ 0xd4
 8004626:	f7ff fef3 	bl	8004410 <SENSOR_IO_Read>
 800462a:	4603      	mov	r3, r0
 800462c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	0a1b      	lsrs	r3, r3, #8
 8004632:	b29b      	uxth	r3, r3
 8004634:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8004636:	7bbb      	ldrb	r3, [r7, #14]
 8004638:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800463c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800463e:	7bba      	ldrb	r2, [r7, #14]
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	4313      	orrs	r3, r2
 8004644:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004646:	7bbb      	ldrb	r3, [r7, #14]
 8004648:	461a      	mov	r2, r3
 800464a:	2112      	movs	r1, #18
 800464c:	20d4      	movs	r0, #212	@ 0xd4
 800464e:	f7ff fec5 	bl	80043dc <SENSOR_IO_Write>
}
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004660:	2300      	movs	r3, #0
 8004662:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004664:	2110      	movs	r1, #16
 8004666:	20d4      	movs	r0, #212	@ 0xd4
 8004668:	f7ff fed2 	bl	8004410 <SENSOR_IO_Read>
 800466c:	4603      	mov	r3, r0
 800466e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	461a      	mov	r2, r3
 800467c:	2110      	movs	r1, #16
 800467e:	20d4      	movs	r0, #212	@ 0xd4
 8004680:	f7ff feac 	bl	80043dc <SENSOR_IO_Write>
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8004690:	f7ff fe9a 	bl	80043c8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8004694:	210f      	movs	r1, #15
 8004696:	20d4      	movs	r0, #212	@ 0xd4
 8004698:	f7ff feba 	bl	8004410 <SENSOR_IO_Read>
 800469c:	4603      	mov	r3, r0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	4603      	mov	r3, r0
 80046aa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80046ac:	2300      	movs	r3, #0
 80046ae:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80046b0:	2115      	movs	r1, #21
 80046b2:	20d4      	movs	r0, #212	@ 0xd4
 80046b4:	f7ff feac 	bl	8004410 <SENSOR_IO_Read>
 80046b8:	4603      	mov	r3, r0
 80046ba:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	f023 0310 	bic.w	r3, r3, #16
 80046c2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	f043 0310 	orr.w	r3, r3, #16
 80046d0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	461a      	mov	r2, r3
 80046d6:	2115      	movs	r1, #21
 80046d8:	20d4      	movs	r0, #212	@ 0xd4
 80046da:	f7ff fe7f 	bl	80043dc <SENSOR_IO_Write>
}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80046fe:	2110      	movs	r1, #16
 8004700:	20d4      	movs	r0, #212	@ 0xd4
 8004702:	f7ff fe85 	bl	8004410 <SENSOR_IO_Read>
 8004706:	4603      	mov	r3, r0
 8004708:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800470a:	f107 0208 	add.w	r2, r7, #8
 800470e:	2306      	movs	r3, #6
 8004710:	2128      	movs	r1, #40	@ 0x28
 8004712:	20d4      	movs	r0, #212	@ 0xd4
 8004714:	f7ff fe9a 	bl	800444c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004718:	2300      	movs	r3, #0
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e01a      	b.n	8004754 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800471e:	7ffb      	ldrb	r3, [r7, #31]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	3301      	adds	r3, #1
 8004724:	3320      	adds	r3, #32
 8004726:	443b      	add	r3, r7
 8004728:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	b29b      	uxth	r3, r3
 8004730:	7ffa      	ldrb	r2, [r7, #31]
 8004732:	0052      	lsls	r2, r2, #1
 8004734:	3220      	adds	r2, #32
 8004736:	443a      	add	r2, r7
 8004738:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800473c:	4413      	add	r3, r2
 800473e:	b29a      	uxth	r2, r3
 8004740:	7ffb      	ldrb	r3, [r7, #31]
 8004742:	b212      	sxth	r2, r2
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	3320      	adds	r3, #32
 8004748:	443b      	add	r3, r7
 800474a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800474e:	7ffb      	ldrb	r3, [r7, #31]
 8004750:	3301      	adds	r3, #1
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	7ffb      	ldrb	r3, [r7, #31]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d9e1      	bls.n	800471e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800475a:	7dfb      	ldrb	r3, [r7, #23]
 800475c:	f003 030c 	and.w	r3, r3, #12
 8004760:	2b0c      	cmp	r3, #12
 8004762:	d829      	bhi.n	80047b8 <LSM6DSL_AccReadXYZ+0xd0>
 8004764:	a201      	add	r2, pc, #4	@ (adr r2, 800476c <LSM6DSL_AccReadXYZ+0x84>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	080047a1 	.word	0x080047a1
 8004770:	080047b9 	.word	0x080047b9
 8004774:	080047b9 	.word	0x080047b9
 8004778:	080047b9 	.word	0x080047b9
 800477c:	080047b3 	.word	0x080047b3
 8004780:	080047b9 	.word	0x080047b9
 8004784:	080047b9 	.word	0x080047b9
 8004788:	080047b9 	.word	0x080047b9
 800478c:	080047a7 	.word	0x080047a7
 8004790:	080047b9 	.word	0x080047b9
 8004794:	080047b9 	.word	0x080047b9
 8004798:	080047b9 	.word	0x080047b9
 800479c:	080047ad 	.word	0x080047ad
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80047a0:	4b18      	ldr	r3, [pc, #96]	@ (8004804 <LSM6DSL_AccReadXYZ+0x11c>)
 80047a2:	61bb      	str	r3, [r7, #24]
    break;
 80047a4:	e008      	b.n	80047b8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80047a6:	4b18      	ldr	r3, [pc, #96]	@ (8004808 <LSM6DSL_AccReadXYZ+0x120>)
 80047a8:	61bb      	str	r3, [r7, #24]
    break;
 80047aa:	e005      	b.n	80047b8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80047ac:	4b17      	ldr	r3, [pc, #92]	@ (800480c <LSM6DSL_AccReadXYZ+0x124>)
 80047ae:	61bb      	str	r3, [r7, #24]
    break;
 80047b0:	e002      	b.n	80047b8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80047b2:	4b17      	ldr	r3, [pc, #92]	@ (8004810 <LSM6DSL_AccReadXYZ+0x128>)
 80047b4:	61bb      	str	r3, [r7, #24]
    break;    
 80047b6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80047b8:	2300      	movs	r3, #0
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e01a      	b.n	80047f4 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80047be:	7ffb      	ldrb	r3, [r7, #31]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	3320      	adds	r3, #32
 80047c4:	443b      	add	r3, r7
 80047c6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80047d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047da:	7ffb      	ldrb	r3, [r7, #31]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4413      	add	r3, r2
 80047e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047e6:	ee17 2a90 	vmov	r2, s15
 80047ea:	b212      	sxth	r2, r2
 80047ec:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80047ee:	7ffb      	ldrb	r3, [r7, #31]
 80047f0:	3301      	adds	r3, #1
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	7ffb      	ldrb	r3, [r7, #31]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d9e1      	bls.n	80047be <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	3d79db23 	.word	0x3d79db23
 8004808:	3df9db23 	.word	0x3df9db23
 800480c:	3e79db23 	.word	0x3e79db23
 8004810:	3ef9db23 	.word	0x3ef9db23

08004814 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004822:	2111      	movs	r1, #17
 8004824:	20d4      	movs	r0, #212	@ 0xd4
 8004826:	f7ff fdf3 	bl	8004410 <SENSOR_IO_Read>
 800482a:	4603      	mov	r3, r0
 800482c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004832:	7bbb      	ldrb	r3, [r7, #14]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800483a:	7bba      	ldrb	r2, [r7, #14]
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	4313      	orrs	r3, r2
 8004840:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8004842:	7bbb      	ldrb	r3, [r7, #14]
 8004844:	461a      	mov	r2, r3
 8004846:	2111      	movs	r1, #17
 8004848:	20d4      	movs	r0, #212	@ 0xd4
 800484a:	f7ff fdc7 	bl	80043dc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800484e:	2112      	movs	r1, #18
 8004850:	20d4      	movs	r0, #212	@ 0xd4
 8004852:	f7ff fddd 	bl	8004410 <SENSOR_IO_Read>
 8004856:	4603      	mov	r3, r0
 8004858:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	b29b      	uxth	r3, r3
 8004860:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8004862:	7bbb      	ldrb	r3, [r7, #14]
 8004864:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8004868:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800486a:	7bba      	ldrb	r2, [r7, #14]
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	4313      	orrs	r3, r2
 8004870:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004872:	7bbb      	ldrb	r3, [r7, #14]
 8004874:	461a      	mov	r2, r3
 8004876:	2112      	movs	r1, #18
 8004878:	20d4      	movs	r0, #212	@ 0xd4
 800487a:	f7ff fdaf 	bl	80043dc <SENSOR_IO_Write>
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800488c:	2300      	movs	r3, #0
 800488e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004890:	2111      	movs	r1, #17
 8004892:	20d4      	movs	r0, #212	@ 0xd4
 8004894:	f7ff fdbc 	bl	8004410 <SENSOR_IO_Read>
 8004898:	4603      	mov	r3, r0
 800489a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	461a      	mov	r2, r3
 80048a8:	2111      	movs	r1, #17
 80048aa:	20d4      	movs	r0, #212	@ 0xd4
 80048ac:	f7ff fd96 	bl	80043dc <SENSOR_IO_Write>
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80048bc:	f7ff fd84 	bl	80043c8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80048c0:	210f      	movs	r1, #15
 80048c2:	20d4      	movs	r0, #212	@ 0xd4
 80048c4:	f7ff fda4 	bl	8004410 <SENSOR_IO_Read>
 80048c8:	4603      	mov	r3, r0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	bd80      	pop	{r7, pc}

080048ce <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	4603      	mov	r3, r0
 80048d6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80048d8:	2300      	movs	r3, #0
 80048da:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80048dc:	2116      	movs	r1, #22
 80048de:	20d4      	movs	r0, #212	@ 0xd4
 80048e0:	f7ff fd96 	bl	8004410 <SENSOR_IO_Read>
 80048e4:	4603      	mov	r3, r0
 80048e6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ee:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048fc:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	461a      	mov	r2, r3
 8004902:	2116      	movs	r1, #22
 8004904:	20d4      	movs	r0, #212	@ 0xd4
 8004906:	f7ff fd69 	bl	80043dc <SENSOR_IO_Write>
}
 800490a:	bf00      	nop
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800491c:	2300      	movs	r3, #0
 800491e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800492a:	2111      	movs	r1, #17
 800492c:	20d4      	movs	r0, #212	@ 0xd4
 800492e:	f7ff fd6f 	bl	8004410 <SENSOR_IO_Read>
 8004932:	4603      	mov	r3, r0
 8004934:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8004936:	f107 0208 	add.w	r2, r7, #8
 800493a:	2306      	movs	r3, #6
 800493c:	2122      	movs	r1, #34	@ 0x22
 800493e:	20d4      	movs	r0, #212	@ 0xd4
 8004940:	f7ff fd84 	bl	800444c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004944:	2300      	movs	r3, #0
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e01a      	b.n	8004980 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800494a:	7ffb      	ldrb	r3, [r7, #31]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	3301      	adds	r3, #1
 8004950:	3320      	adds	r3, #32
 8004952:	443b      	add	r3, r7
 8004954:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	b29b      	uxth	r3, r3
 800495c:	7ffa      	ldrb	r2, [r7, #31]
 800495e:	0052      	lsls	r2, r2, #1
 8004960:	3220      	adds	r2, #32
 8004962:	443a      	add	r2, r7
 8004964:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8004968:	4413      	add	r3, r2
 800496a:	b29a      	uxth	r2, r3
 800496c:	7ffb      	ldrb	r3, [r7, #31]
 800496e:	b212      	sxth	r2, r2
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	3320      	adds	r3, #32
 8004974:	443b      	add	r3, r7
 8004976:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800497a:	7ffb      	ldrb	r3, [r7, #31]
 800497c:	3301      	adds	r3, #1
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	7ffb      	ldrb	r3, [r7, #31]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d9e1      	bls.n	800494a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d829      	bhi.n	80049e4 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 8004990:	a201      	add	r2, pc, #4	@ (adr r2, 8004998 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049cd 	.word	0x080049cd
 800499c:	080049e5 	.word	0x080049e5
 80049a0:	080049e5 	.word	0x080049e5
 80049a4:	080049e5 	.word	0x080049e5
 80049a8:	080049d3 	.word	0x080049d3
 80049ac:	080049e5 	.word	0x080049e5
 80049b0:	080049e5 	.word	0x080049e5
 80049b4:	080049e5 	.word	0x080049e5
 80049b8:	080049d9 	.word	0x080049d9
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	080049e5 	.word	0x080049e5
 80049c4:	080049e5 	.word	0x080049e5
 80049c8:	080049df 	.word	0x080049df
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80049cc:	4b16      	ldr	r3, [pc, #88]	@ (8004a28 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 80049ce:	61bb      	str	r3, [r7, #24]
    break;
 80049d0:	e008      	b.n	80049e4 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80049d2:	4b16      	ldr	r3, [pc, #88]	@ (8004a2c <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80049d4:	61bb      	str	r3, [r7, #24]
    break;
 80049d6:	e005      	b.n	80049e4 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80049d8:	4b15      	ldr	r3, [pc, #84]	@ (8004a30 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80049da:	61bb      	str	r3, [r7, #24]
    break;
 80049dc:	e002      	b.n	80049e4 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80049de:	4b15      	ldr	r3, [pc, #84]	@ (8004a34 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80049e0:	61bb      	str	r3, [r7, #24]
    break;    
 80049e2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80049e4:	2300      	movs	r3, #0
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e016      	b.n	8004a18 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80049ea:	7ffb      	ldrb	r3, [r7, #31]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	3320      	adds	r3, #32
 80049f0:	443b      	add	r3, r7
 80049f2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049fe:	7ffb      	ldrb	r3, [r7, #31]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004a12:	7ffb      	ldrb	r3, [r7, #31]
 8004a14:	3301      	adds	r3, #1
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	7ffb      	ldrb	r3, [r7, #31]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d9e5      	bls.n	80049ea <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	3720      	adds	r7, #32
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	410c0000 	.word	0x410c0000
 8004a2c:	418c0000 	.word	0x418c0000
 8004a30:	420c0000 	.word	0x420c0000
 8004a34:	428c0000 	.word	0x428c0000

08004a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a42:	2003      	movs	r0, #3
 8004a44:	f000 f960 	bl	8004d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a48:	200f      	movs	r0, #15
 8004a4a:	f000 f80d 	bl	8004a68 <HAL_InitTick>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	71fb      	strb	r3, [r7, #7]
 8004a58:	e001      	b.n	8004a5e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a5a:	f7fd fb5f 	bl	800211c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004a74:	4b17      	ldr	r3, [pc, #92]	@ (8004ad4 <HAL_InitTick+0x6c>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d023      	beq.n	8004ac4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004a7c:	4b16      	ldr	r3, [pc, #88]	@ (8004ad8 <HAL_InitTick+0x70>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	4b14      	ldr	r3, [pc, #80]	@ (8004ad4 <HAL_InitTick+0x6c>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	4619      	mov	r1, r3
 8004a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f96d 	bl	8004d72 <HAL_SYSTICK_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10f      	bne.n	8004abe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b0f      	cmp	r3, #15
 8004aa2:	d809      	bhi.n	8004ab8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	f000 f937 	bl	8004d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8004adc <HAL_InitTick+0x74>)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e007      	b.n	8004ac8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
 8004abc:	e004      	b.n	8004ac8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
 8004ac2:	e001      	b.n	8004ac8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200000b4 	.word	0x200000b4
 8004ad8:	20000044 	.word	0x20000044
 8004adc:	200000b0 	.word	0x200000b0

08004ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <HAL_IncTick+0x20>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <HAL_IncTick+0x24>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4413      	add	r3, r2
 8004af0:	4a04      	ldr	r2, [pc, #16]	@ (8004b04 <HAL_IncTick+0x24>)
 8004af2:	6013      	str	r3, [r2, #0]
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	200000b4 	.word	0x200000b4
 8004b04:	200018d8 	.word	0x200018d8

08004b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	@ (8004b1c <HAL_GetTick+0x14>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	200018d8 	.word	0x200018d8

08004b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b28:	f7ff ffee 	bl	8004b08 <HAL_GetTick>
 8004b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d005      	beq.n	8004b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <HAL_Delay+0x44>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b46:	bf00      	nop
 8004b48:	f7ff ffde 	bl	8004b08 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d8f7      	bhi.n	8004b48 <HAL_Delay+0x28>
  {
  }
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200000b4 	.word	0x200000b4

08004b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b78:	4b0c      	ldr	r3, [pc, #48]	@ (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b84:	4013      	ands	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9a:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	60d3      	str	r3, [r2, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb4:	4b04      	ldr	r3, [pc, #16]	@ (8004bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f003 0307 	and.w	r3, r3, #7
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	db0b      	blt.n	8004bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	4907      	ldr	r1, [pc, #28]	@ (8004c04 <__NVIC_EnableIRQ+0x38>)
 8004be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2001      	movs	r0, #1
 8004bee:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	e000e100 	.word	0xe000e100

08004c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	6039      	str	r1, [r7, #0]
 8004c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db0a      	blt.n	8004c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	490c      	ldr	r1, [pc, #48]	@ (8004c54 <__NVIC_SetPriority+0x4c>)
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	0112      	lsls	r2, r2, #4
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c30:	e00a      	b.n	8004c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	4908      	ldr	r1, [pc, #32]	@ (8004c58 <__NVIC_SetPriority+0x50>)
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	3b04      	subs	r3, #4
 8004c40:	0112      	lsls	r2, r2, #4
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	440b      	add	r3, r1
 8004c46:	761a      	strb	r2, [r3, #24]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000e100 	.word	0xe000e100
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	@ 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f1c3 0307 	rsb	r3, r3, #7
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	bf28      	it	cs
 8004c7a:	2304      	movcs	r3, #4
 8004c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3304      	adds	r3, #4
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d902      	bls.n	8004c8c <NVIC_EncodePriority+0x30>
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3b03      	subs	r3, #3
 8004c8a:	e000      	b.n	8004c8e <NVIC_EncodePriority+0x32>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cae:	43d9      	mvns	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb4:	4313      	orrs	r3, r2
         );
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3724      	adds	r7, #36	@ 0x24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cd4:	d301      	bcc.n	8004cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e00f      	b.n	8004cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cda:	4a0a      	ldr	r2, [pc, #40]	@ (8004d04 <SysTick_Config+0x40>)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ce2:	210f      	movs	r1, #15
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	f7ff ff8e 	bl	8004c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <SysTick_Config+0x40>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf2:	4b04      	ldr	r3, [pc, #16]	@ (8004d04 <SysTick_Config+0x40>)
 8004cf4:	2207      	movs	r2, #7
 8004cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	e000e010 	.word	0xe000e010

08004d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ff29 	bl	8004b68 <__NVIC_SetPriorityGrouping>
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d30:	f7ff ff3e 	bl	8004bb0 <__NVIC_GetPriorityGrouping>
 8004d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	6978      	ldr	r0, [r7, #20]
 8004d3c:	f7ff ff8e 	bl	8004c5c <NVIC_EncodePriority>
 8004d40:	4602      	mov	r2, r0
 8004d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff ff5d 	bl	8004c08 <__NVIC_SetPriority>
}
 8004d4e:	bf00      	nop
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff ff31 	bl	8004bcc <__NVIC_EnableIRQ>
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ffa2 	bl	8004cc4 <SysTick_Config>
 8004d80:	4603      	mov	r3, r0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0ac      	b.n	8004ef8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f8b2 	bl	8004f0c <DFSDM_GetChannelFromInstance>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4a55      	ldr	r2, [pc, #340]	@ (8004f00 <HAL_DFSDM_ChannelInit+0x174>)
 8004dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e09f      	b.n	8004ef8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7fd f9d7 	bl	800216c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004dbe:	4b51      	ldr	r3, [pc, #324]	@ (8004f04 <HAL_DFSDM_ChannelInit+0x178>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	4a4f      	ldr	r2, [pc, #316]	@ (8004f04 <HAL_DFSDM_ChannelInit+0x178>)
 8004dc6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8004f04 <HAL_DFSDM_ChannelInit+0x178>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d125      	bne.n	8004e1c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004dd0:	4b4d      	ldr	r3, [pc, #308]	@ (8004f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a4c      	ldr	r2, [pc, #304]	@ (8004f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8004dd6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004dda:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004ddc:	4b4a      	ldr	r3, [pc, #296]	@ (8004f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4948      	ldr	r1, [pc, #288]	@ (8004f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004dea:	4b47      	ldr	r3, [pc, #284]	@ (8004f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a46      	ldr	r2, [pc, #280]	@ (8004f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8004df0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004df4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	791b      	ldrb	r3, [r3, #4]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d108      	bne.n	8004e10 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004dfe:	4b42      	ldr	r3, [pc, #264]	@ (8004f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	493f      	ldr	r1, [pc, #252]	@ (8004f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004e10:	4b3d      	ldr	r3, [pc, #244]	@ (8004f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a3c      	ldr	r2, [pc, #240]	@ (8004f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e1a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8004e2a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6819      	ldr	r1, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004e3a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004e40:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 020f 	bic.w	r2, r2, #15
 8004e58:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6819      	ldr	r1, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8004e80:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6899      	ldr	r1, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	3b01      	subs	r3, #1
 8004e92:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f002 0207 	and.w	r2, r2, #7
 8004eac:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6859      	ldr	r1, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 f810 	bl	8004f0c <DFSDM_GetChannelFromInstance>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4904      	ldr	r1, [pc, #16]	@ (8004f00 <HAL_DFSDM_ChannelInit+0x174>)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	200018e0 	.word	0x200018e0
 8004f04:	200018dc 	.word	0x200018dc
 8004f08:	40016000 	.word	0x40016000

08004f0c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a1c      	ldr	r2, [pc, #112]	@ (8004f88 <DFSDM_GetChannelFromInstance+0x7c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d102      	bne.n	8004f22 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	e02b      	b.n	8004f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a19      	ldr	r2, [pc, #100]	@ (8004f8c <DFSDM_GetChannelFromInstance+0x80>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d102      	bne.n	8004f30 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	e024      	b.n	8004f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a17      	ldr	r2, [pc, #92]	@ (8004f90 <DFSDM_GetChannelFromInstance+0x84>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d102      	bne.n	8004f3e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	e01d      	b.n	8004f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a14      	ldr	r2, [pc, #80]	@ (8004f94 <DFSDM_GetChannelFromInstance+0x88>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d102      	bne.n	8004f4c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004f46:	2304      	movs	r3, #4
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e016      	b.n	8004f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a12      	ldr	r2, [pc, #72]	@ (8004f98 <DFSDM_GetChannelFromInstance+0x8c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d102      	bne.n	8004f5a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004f54:	2305      	movs	r3, #5
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e00f      	b.n	8004f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a0f      	ldr	r2, [pc, #60]	@ (8004f9c <DFSDM_GetChannelFromInstance+0x90>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d102      	bne.n	8004f68 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004f62:	2306      	movs	r3, #6
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e008      	b.n	8004f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8004fa0 <DFSDM_GetChannelFromInstance+0x94>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d102      	bne.n	8004f76 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004f70:	2307      	movs	r3, #7
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e001      	b.n	8004f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004f76:	2303      	movs	r3, #3
 8004f78:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	40016000 	.word	0x40016000
 8004f8c:	40016020 	.word	0x40016020
 8004f90:	40016040 	.word	0x40016040
 8004f94:	40016080 	.word	0x40016080
 8004f98:	400160a0 	.word	0x400160a0
 8004f9c:	400160c0 	.word	0x400160c0
 8004fa0:	400160e0 	.word	0x400160e0

08004fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d005      	beq.n	8004fc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]
 8004fc6:	e029      	b.n	800501c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 020e 	bic.w	r2, r2, #14
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fec:	f003 021c 	and.w	r2, r3, #28
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	4798      	blx	r3
    }
  }
  return status;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005036:	e17f      	b.n	8005338 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	2101      	movs	r1, #1
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	4013      	ands	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 8171 	beq.w	8005332 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d005      	beq.n	8005068 <HAL_GPIO_Init+0x40>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d130      	bne.n	80050ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	2203      	movs	r2, #3
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4013      	ands	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800509e:	2201      	movs	r2, #1
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43db      	mvns	r3, r3
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	091b      	lsrs	r3, r3, #4
 80050b4:	f003 0201 	and.w	r2, r3, #1
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d118      	bne.n	8005108 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80050dc:	2201      	movs	r2, #1
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4013      	ands	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	08db      	lsrs	r3, r3, #3
 80050f2:	f003 0201 	and.w	r2, r3, #1
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	2b03      	cmp	r3, #3
 8005112:	d017      	beq.n	8005144 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	2203      	movs	r2, #3
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4013      	ands	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d123      	bne.n	8005198 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	08da      	lsrs	r2, r3, #3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3208      	adds	r2, #8
 8005158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	220f      	movs	r2, #15
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	43db      	mvns	r3, r3
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4013      	ands	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	08da      	lsrs	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3208      	adds	r2, #8
 8005192:	6939      	ldr	r1, [r7, #16]
 8005194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	2203      	movs	r2, #3
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4013      	ands	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 0203 	and.w	r2, r3, #3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80ac 	beq.w	8005332 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051da:	4b5f      	ldr	r3, [pc, #380]	@ (8005358 <HAL_GPIO_Init+0x330>)
 80051dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051de:	4a5e      	ldr	r2, [pc, #376]	@ (8005358 <HAL_GPIO_Init+0x330>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80051e6:	4b5c      	ldr	r3, [pc, #368]	@ (8005358 <HAL_GPIO_Init+0x330>)
 80051e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80051f2:	4a5a      	ldr	r2, [pc, #360]	@ (800535c <HAL_GPIO_Init+0x334>)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	089b      	lsrs	r3, r3, #2
 80051f8:	3302      	adds	r3, #2
 80051fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	220f      	movs	r2, #15
 800520a:	fa02 f303 	lsl.w	r3, r2, r3
 800520e:	43db      	mvns	r3, r3
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4013      	ands	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800521c:	d025      	beq.n	800526a <HAL_GPIO_Init+0x242>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a4f      	ldr	r2, [pc, #316]	@ (8005360 <HAL_GPIO_Init+0x338>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01f      	beq.n	8005266 <HAL_GPIO_Init+0x23e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a4e      	ldr	r2, [pc, #312]	@ (8005364 <HAL_GPIO_Init+0x33c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d019      	beq.n	8005262 <HAL_GPIO_Init+0x23a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a4d      	ldr	r2, [pc, #308]	@ (8005368 <HAL_GPIO_Init+0x340>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_GPIO_Init+0x236>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a4c      	ldr	r2, [pc, #304]	@ (800536c <HAL_GPIO_Init+0x344>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00d      	beq.n	800525a <HAL_GPIO_Init+0x232>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a4b      	ldr	r2, [pc, #300]	@ (8005370 <HAL_GPIO_Init+0x348>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d007      	beq.n	8005256 <HAL_GPIO_Init+0x22e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a4a      	ldr	r2, [pc, #296]	@ (8005374 <HAL_GPIO_Init+0x34c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d101      	bne.n	8005252 <HAL_GPIO_Init+0x22a>
 800524e:	2306      	movs	r3, #6
 8005250:	e00c      	b.n	800526c <HAL_GPIO_Init+0x244>
 8005252:	2307      	movs	r3, #7
 8005254:	e00a      	b.n	800526c <HAL_GPIO_Init+0x244>
 8005256:	2305      	movs	r3, #5
 8005258:	e008      	b.n	800526c <HAL_GPIO_Init+0x244>
 800525a:	2304      	movs	r3, #4
 800525c:	e006      	b.n	800526c <HAL_GPIO_Init+0x244>
 800525e:	2303      	movs	r3, #3
 8005260:	e004      	b.n	800526c <HAL_GPIO_Init+0x244>
 8005262:	2302      	movs	r3, #2
 8005264:	e002      	b.n	800526c <HAL_GPIO_Init+0x244>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <HAL_GPIO_Init+0x244>
 800526a:	2300      	movs	r3, #0
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	f002 0203 	and.w	r2, r2, #3
 8005272:	0092      	lsls	r2, r2, #2
 8005274:	4093      	lsls	r3, r2
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800527c:	4937      	ldr	r1, [pc, #220]	@ (800535c <HAL_GPIO_Init+0x334>)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	089b      	lsrs	r3, r3, #2
 8005282:	3302      	adds	r3, #2
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800528a:	4b3b      	ldr	r3, [pc, #236]	@ (8005378 <HAL_GPIO_Init+0x350>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	43db      	mvns	r3, r3
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4013      	ands	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052ae:	4a32      	ldr	r2, [pc, #200]	@ (8005378 <HAL_GPIO_Init+0x350>)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80052b4:	4b30      	ldr	r3, [pc, #192]	@ (8005378 <HAL_GPIO_Init+0x350>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	43db      	mvns	r3, r3
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4013      	ands	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052d8:	4a27      	ldr	r2, [pc, #156]	@ (8005378 <HAL_GPIO_Init+0x350>)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80052de:	4b26      	ldr	r3, [pc, #152]	@ (8005378 <HAL_GPIO_Init+0x350>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	43db      	mvns	r3, r3
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4013      	ands	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005302:	4a1d      	ldr	r2, [pc, #116]	@ (8005378 <HAL_GPIO_Init+0x350>)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005308:	4b1b      	ldr	r3, [pc, #108]	@ (8005378 <HAL_GPIO_Init+0x350>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	43db      	mvns	r3, r3
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4013      	ands	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800532c:	4a12      	ldr	r2, [pc, #72]	@ (8005378 <HAL_GPIO_Init+0x350>)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	3301      	adds	r3, #1
 8005336:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	fa22 f303 	lsr.w	r3, r2, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	f47f ae78 	bne.w	8005038 <HAL_GPIO_Init+0x10>
  }
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40021000 	.word	0x40021000
 800535c:	40010000 	.word	0x40010000
 8005360:	48000400 	.word	0x48000400
 8005364:	48000800 	.word	0x48000800
 8005368:	48000c00 	.word	0x48000c00
 800536c:	48001000 	.word	0x48001000
 8005370:	48001400 	.word	0x48001400
 8005374:	48001800 	.word	0x48001800
 8005378:	40010400 	.word	0x40010400

0800537c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800538a:	e0cd      	b.n	8005528 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800538c:	2201      	movs	r2, #1
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	4013      	ands	r3, r2
 8005398:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80c0 	beq.w	8005522 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80053a2:	4a68      	ldr	r2, [pc, #416]	@ (8005544 <HAL_GPIO_DeInit+0x1c8>)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	3302      	adds	r3, #2
 80053aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	220f      	movs	r2, #15
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4013      	ands	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80053ca:	d025      	beq.n	8005418 <HAL_GPIO_DeInit+0x9c>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a5e      	ldr	r2, [pc, #376]	@ (8005548 <HAL_GPIO_DeInit+0x1cc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d01f      	beq.n	8005414 <HAL_GPIO_DeInit+0x98>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a5d      	ldr	r2, [pc, #372]	@ (800554c <HAL_GPIO_DeInit+0x1d0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d019      	beq.n	8005410 <HAL_GPIO_DeInit+0x94>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a5c      	ldr	r2, [pc, #368]	@ (8005550 <HAL_GPIO_DeInit+0x1d4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <HAL_GPIO_DeInit+0x90>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a5b      	ldr	r2, [pc, #364]	@ (8005554 <HAL_GPIO_DeInit+0x1d8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00d      	beq.n	8005408 <HAL_GPIO_DeInit+0x8c>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a5a      	ldr	r2, [pc, #360]	@ (8005558 <HAL_GPIO_DeInit+0x1dc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d007      	beq.n	8005404 <HAL_GPIO_DeInit+0x88>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a59      	ldr	r2, [pc, #356]	@ (800555c <HAL_GPIO_DeInit+0x1e0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d101      	bne.n	8005400 <HAL_GPIO_DeInit+0x84>
 80053fc:	2306      	movs	r3, #6
 80053fe:	e00c      	b.n	800541a <HAL_GPIO_DeInit+0x9e>
 8005400:	2307      	movs	r3, #7
 8005402:	e00a      	b.n	800541a <HAL_GPIO_DeInit+0x9e>
 8005404:	2305      	movs	r3, #5
 8005406:	e008      	b.n	800541a <HAL_GPIO_DeInit+0x9e>
 8005408:	2304      	movs	r3, #4
 800540a:	e006      	b.n	800541a <HAL_GPIO_DeInit+0x9e>
 800540c:	2303      	movs	r3, #3
 800540e:	e004      	b.n	800541a <HAL_GPIO_DeInit+0x9e>
 8005410:	2302      	movs	r3, #2
 8005412:	e002      	b.n	800541a <HAL_GPIO_DeInit+0x9e>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <HAL_GPIO_DeInit+0x9e>
 8005418:	2300      	movs	r3, #0
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	f002 0203 	and.w	r2, r2, #3
 8005420:	0092      	lsls	r2, r2, #2
 8005422:	4093      	lsls	r3, r2
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	429a      	cmp	r2, r3
 8005428:	d132      	bne.n	8005490 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800542a:	4b4d      	ldr	r3, [pc, #308]	@ (8005560 <HAL_GPIO_DeInit+0x1e4>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	43db      	mvns	r3, r3
 8005432:	494b      	ldr	r1, [pc, #300]	@ (8005560 <HAL_GPIO_DeInit+0x1e4>)
 8005434:	4013      	ands	r3, r2
 8005436:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005438:	4b49      	ldr	r3, [pc, #292]	@ (8005560 <HAL_GPIO_DeInit+0x1e4>)
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	43db      	mvns	r3, r3
 8005440:	4947      	ldr	r1, [pc, #284]	@ (8005560 <HAL_GPIO_DeInit+0x1e4>)
 8005442:	4013      	ands	r3, r2
 8005444:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005446:	4b46      	ldr	r3, [pc, #280]	@ (8005560 <HAL_GPIO_DeInit+0x1e4>)
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	43db      	mvns	r3, r3
 800544e:	4944      	ldr	r1, [pc, #272]	@ (8005560 <HAL_GPIO_DeInit+0x1e4>)
 8005450:	4013      	ands	r3, r2
 8005452:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005454:	4b42      	ldr	r3, [pc, #264]	@ (8005560 <HAL_GPIO_DeInit+0x1e4>)
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	43db      	mvns	r3, r3
 800545c:	4940      	ldr	r1, [pc, #256]	@ (8005560 <HAL_GPIO_DeInit+0x1e4>)
 800545e:	4013      	ands	r3, r2
 8005460:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	220f      	movs	r2, #15
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005472:	4a34      	ldr	r2, [pc, #208]	@ (8005544 <HAL_GPIO_DeInit+0x1c8>)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	089b      	lsrs	r3, r3, #2
 8005478:	3302      	adds	r3, #2
 800547a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	43da      	mvns	r2, r3
 8005482:	4830      	ldr	r0, [pc, #192]	@ (8005544 <HAL_GPIO_DeInit+0x1c8>)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	089b      	lsrs	r3, r3, #2
 8005488:	400a      	ands	r2, r1
 800548a:	3302      	adds	r3, #2
 800548c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	2103      	movs	r1, #3
 800549a:	fa01 f303 	lsl.w	r3, r1, r3
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	08da      	lsrs	r2, r3, #3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3208      	adds	r2, #8
 80054ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	220f      	movs	r2, #15
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	08d2      	lsrs	r2, r2, #3
 80054c4:	4019      	ands	r1, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3208      	adds	r2, #8
 80054ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	2103      	movs	r1, #3
 80054d8:	fa01 f303 	lsl.w	r3, r1, r3
 80054dc:	43db      	mvns	r3, r3
 80054de:	401a      	ands	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	2101      	movs	r1, #1
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	401a      	ands	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	2103      	movs	r1, #3
 8005502:	fa01 f303 	lsl.w	r3, r1, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	401a      	ands	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005512:	2101      	movs	r1, #1
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	fa01 f303 	lsl.w	r3, r1, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	401a      	ands	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	3301      	adds	r3, #1
 8005526:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	f47f af2b 	bne.w	800538c <HAL_GPIO_DeInit+0x10>
  }
}
 8005536:	bf00      	nop
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	40010000 	.word	0x40010000
 8005548:	48000400 	.word	0x48000400
 800554c:	48000800 	.word	0x48000800
 8005550:	48000c00 	.word	0x48000c00
 8005554:	48001000 	.word	0x48001000
 8005558:	48001400 	.word	0x48001400
 800555c:	48001800 	.word	0x48001800
 8005560:	40010400 	.word	0x40010400

08005564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	887b      	ldrh	r3, [r7, #2]
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
 8005580:	e001      	b.n	8005586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	807b      	strh	r3, [r7, #2]
 80055a0:	4613      	mov	r3, r2
 80055a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055a4:	787b      	ldrb	r3, [r7, #1]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055aa:	887a      	ldrh	r2, [r7, #2]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055b0:	e002      	b.n	80055b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055b2:	887a      	ldrh	r2, [r7, #2]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80055d6:	887a      	ldrh	r2, [r7, #2]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4013      	ands	r3, r2
 80055dc:	041a      	lsls	r2, r3, #16
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	43d9      	mvns	r1, r3
 80055e2:	887b      	ldrh	r3, [r7, #2]
 80055e4:	400b      	ands	r3, r1
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	619a      	str	r2, [r3, #24]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005602:	4b08      	ldr	r3, [pc, #32]	@ (8005624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005604:	695a      	ldr	r2, [r3, #20]
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	4013      	ands	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d006      	beq.n	800561c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800560e:	4a05      	ldr	r2, [pc, #20]	@ (8005624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	4618      	mov	r0, r3
 8005618:	f7fc f9c6 	bl	80019a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40010400 	.word	0x40010400

08005628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e08d      	b.n	8005756 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fc fdf0 	bl	8002234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2224      	movs	r2, #36	@ 0x24
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0201 	bic.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005678:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005688:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d107      	bne.n	80056a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800569e:	609a      	str	r2, [r3, #8]
 80056a0:	e006      	b.n	80056b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80056ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d108      	bne.n	80056ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056c6:	605a      	str	r2, [r3, #4]
 80056c8:	e007      	b.n	80056da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80056e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69d9      	ldr	r1, [r3, #28]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1a      	ldr	r2, [r3, #32]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e021      	b.n	80057b4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2224      	movs	r2, #36	@ 0x24
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7fc fdb1 	bl	80022f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	4608      	mov	r0, r1
 80057c6:	4611      	mov	r1, r2
 80057c8:	461a      	mov	r2, r3
 80057ca:	4603      	mov	r3, r0
 80057cc:	817b      	strh	r3, [r7, #10]
 80057ce:	460b      	mov	r3, r1
 80057d0:	813b      	strh	r3, [r7, #8]
 80057d2:	4613      	mov	r3, r2
 80057d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b20      	cmp	r3, #32
 80057e0:	f040 80f9 	bne.w	80059d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_I2C_Mem_Write+0x34>
 80057ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d105      	bne.n	80057fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0ed      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_I2C_Mem_Write+0x4e>
 8005806:	2302      	movs	r3, #2
 8005808:	e0e6      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005812:	f7ff f979 	bl	8004b08 <HAL_GetTick>
 8005816:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	2319      	movs	r3, #25
 800581e:	2201      	movs	r2, #1
 8005820:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 fac3 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0d1      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2221      	movs	r2, #33	@ 0x21
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2240      	movs	r2, #64	@ 0x40
 8005840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a3a      	ldr	r2, [r7, #32]
 800584e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005854:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800585c:	88f8      	ldrh	r0, [r7, #6]
 800585e:	893a      	ldrh	r2, [r7, #8]
 8005860:	8979      	ldrh	r1, [r7, #10]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	4603      	mov	r3, r0
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f9d3 	bl	8005c18 <I2C_RequestMemoryWrite>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0a9      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005888:	b29b      	uxth	r3, r3
 800588a:	2bff      	cmp	r3, #255	@ 0xff
 800588c:	d90e      	bls.n	80058ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	22ff      	movs	r2, #255	@ 0xff
 8005892:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005898:	b2da      	uxtb	r2, r3
 800589a:	8979      	ldrh	r1, [r7, #10]
 800589c:	2300      	movs	r3, #0
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fc47 	bl	8006138 <I2C_TransferConfig>
 80058aa:	e00f      	b.n	80058cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	8979      	ldrh	r1, [r7, #10]
 80058be:	2300      	movs	r3, #0
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fc36 	bl	8006138 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fac6 	bl	8005e62 <I2C_WaitOnTXISFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e07b      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d034      	beq.n	8005984 <HAL_I2C_Mem_Write+0x1c8>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d130      	bne.n	8005984 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005928:	2200      	movs	r2, #0
 800592a:	2180      	movs	r1, #128	@ 0x80
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 fa3f 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e04d      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	2bff      	cmp	r3, #255	@ 0xff
 8005944:	d90e      	bls.n	8005964 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	22ff      	movs	r2, #255	@ 0xff
 800594a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005950:	b2da      	uxtb	r2, r3
 8005952:	8979      	ldrh	r1, [r7, #10]
 8005954:	2300      	movs	r3, #0
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 fbeb 	bl	8006138 <I2C_TransferConfig>
 8005962:	e00f      	b.n	8005984 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005972:	b2da      	uxtb	r2, r3
 8005974:	8979      	ldrh	r1, [r7, #10]
 8005976:	2300      	movs	r3, #0
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fbda 	bl	8006138 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d19e      	bne.n	80058cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 faac 	bl	8005ef0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e01a      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2220      	movs	r2, #32
 80059a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6859      	ldr	r1, [r3, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b0a      	ldr	r3, [pc, #40]	@ (80059e0 <HAL_I2C_Mem_Write+0x224>)
 80059b6:	400b      	ands	r3, r1
 80059b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e000      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
  }
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	fe00e800 	.word	0xfe00e800

080059e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	817b      	strh	r3, [r7, #10]
 80059f6:	460b      	mov	r3, r1
 80059f8:	813b      	strh	r3, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	f040 80fd 	bne.w	8005c06 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_I2C_Mem_Read+0x34>
 8005a12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d105      	bne.n	8005a24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a1e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e0f1      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_I2C_Mem_Read+0x4e>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e0ea      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a3a:	f7ff f865 	bl	8004b08 <HAL_GetTick>
 8005a3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2319      	movs	r3, #25
 8005a46:	2201      	movs	r2, #1
 8005a48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f9af 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0d5      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2222      	movs	r2, #34	@ 0x22
 8005a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2240      	movs	r2, #64	@ 0x40
 8005a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a3a      	ldr	r2, [r7, #32]
 8005a76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a84:	88f8      	ldrh	r0, [r7, #6]
 8005a86:	893a      	ldrh	r2, [r7, #8]
 8005a88:	8979      	ldrh	r1, [r7, #10]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	4603      	mov	r3, r0
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f913 	bl	8005cc0 <I2C_RequestMemoryRead>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0ad      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2bff      	cmp	r3, #255	@ 0xff
 8005ab4:	d90e      	bls.n	8005ad4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	8979      	ldrh	r1, [r7, #10]
 8005ac4:	4b52      	ldr	r3, [pc, #328]	@ (8005c10 <HAL_I2C_Mem_Read+0x22c>)
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 fb33 	bl	8006138 <I2C_TransferConfig>
 8005ad2:	e00f      	b.n	8005af4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	8979      	ldrh	r1, [r7, #10]
 8005ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8005c10 <HAL_I2C_Mem_Read+0x22c>)
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fb22 	bl	8006138 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afa:	2200      	movs	r2, #0
 8005afc:	2104      	movs	r1, #4
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f956 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e07c      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d034      	beq.n	8005bb4 <HAL_I2C_Mem_Read+0x1d0>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d130      	bne.n	8005bb4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2180      	movs	r1, #128	@ 0x80
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f927 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e04d      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2bff      	cmp	r3, #255	@ 0xff
 8005b74:	d90e      	bls.n	8005b94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	8979      	ldrh	r1, [r7, #10]
 8005b84:	2300      	movs	r3, #0
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fad3 	bl	8006138 <I2C_TransferConfig>
 8005b92:	e00f      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	8979      	ldrh	r1, [r7, #10]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fac2 	bl	8006138 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d19a      	bne.n	8005af4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f994 	bl	8005ef0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e01a      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6859      	ldr	r1, [r3, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <HAL_I2C_Mem_Read+0x230>)
 8005be6:	400b      	ands	r3, r1
 8005be8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e000      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c06:	2302      	movs	r3, #2
  }
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	80002400 	.word	0x80002400
 8005c14:	fe00e800 	.word	0xfe00e800

08005c18 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	4608      	mov	r0, r1
 8005c22:	4611      	mov	r1, r2
 8005c24:	461a      	mov	r2, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	817b      	strh	r3, [r7, #10]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	813b      	strh	r3, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c32:	88fb      	ldrh	r3, [r7, #6]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	8979      	ldrh	r1, [r7, #10]
 8005c38:	4b20      	ldr	r3, [pc, #128]	@ (8005cbc <I2C_RequestMemoryWrite+0xa4>)
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fa79 	bl	8006138 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	69b9      	ldr	r1, [r7, #24]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f909 	bl	8005e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e02c      	b.n	8005cb4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d105      	bne.n	8005c6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c60:	893b      	ldrh	r3, [r7, #8]
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c6a:	e015      	b.n	8005c98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c6c:	893b      	ldrh	r3, [r7, #8]
 8005c6e:	0a1b      	lsrs	r3, r3, #8
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	69b9      	ldr	r1, [r7, #24]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f8ef 	bl	8005e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e012      	b.n	8005cb4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c8e:	893b      	ldrh	r3, [r7, #8]
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2180      	movs	r1, #128	@ 0x80
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f884 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	80002000 	.word	0x80002000

08005cc0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	4608      	mov	r0, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4603      	mov	r3, r0
 8005cd0:	817b      	strh	r3, [r7, #10]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	813b      	strh	r3, [r7, #8]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	8979      	ldrh	r1, [r7, #10]
 8005ce0:	4b20      	ldr	r3, [pc, #128]	@ (8005d64 <I2C_RequestMemoryRead+0xa4>)
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fa26 	bl	8006138 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	69b9      	ldr	r1, [r7, #24]
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 f8b6 	bl	8005e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e02c      	b.n	8005d5a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d105      	bne.n	8005d12 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d06:	893b      	ldrh	r3, [r7, #8]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d10:	e015      	b.n	8005d3e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d12:	893b      	ldrh	r3, [r7, #8]
 8005d14:	0a1b      	lsrs	r3, r3, #8
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	69b9      	ldr	r1, [r7, #24]
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f89c 	bl	8005e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e012      	b.n	8005d5a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d34:	893b      	ldrh	r3, [r7, #8]
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2200      	movs	r2, #0
 8005d46:	2140      	movs	r1, #64	@ 0x40
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f831 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	80002000 	.word	0x80002000

08005d68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d103      	bne.n	8005d86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2200      	movs	r2, #0
 8005d84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d007      	beq.n	8005da4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	619a      	str	r2, [r3, #24]
  }
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dc0:	e03b      	b.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f8d6 	bl	8005f78 <I2C_IsErrorOccurred>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e041      	b.n	8005e5a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d02d      	beq.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dde:	f7fe fe93 	bl	8004b08 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d302      	bcc.n	8005df4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d122      	bne.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d113      	bne.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e16:	f043 0220 	orr.w	r2, r3, #32
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e00f      	b.n	8005e5a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	bf0c      	ite	eq
 8005e4a:	2301      	moveq	r3, #1
 8005e4c:	2300      	movne	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d0b4      	beq.n	8005dc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e6e:	e033      	b.n	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f87f 	bl	8005f78 <I2C_IsErrorOccurred>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e031      	b.n	8005ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8a:	d025      	beq.n	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8c:	f7fe fe3c 	bl	8004b08 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d302      	bcc.n	8005ea2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d11a      	bne.n	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d013      	beq.n	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb4:	f043 0220 	orr.w	r2, r3, #32
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e007      	b.n	8005ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d1c4      	bne.n	8005e70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005efc:	e02f      	b.n	8005f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f838 	bl	8005f78 <I2C_IsErrorOccurred>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e02d      	b.n	8005f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f12:	f7fe fdf9 	bl	8004b08 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d302      	bcc.n	8005f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d11a      	bne.n	8005f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d013      	beq.n	8005f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3a:	f043 0220 	orr.w	r2, r3, #32
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e007      	b.n	8005f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d1c8      	bne.n	8005efe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	@ 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d068      	beq.n	8006076 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2210      	movs	r2, #16
 8005faa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fac:	e049      	b.n	8006042 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d045      	beq.n	8006042 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fb6:	f7fe fda7 	bl	8004b08 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d302      	bcc.n	8005fcc <I2C_IsErrorOccurred+0x54>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d13a      	bne.n	8006042 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fee:	d121      	bne.n	8006034 <I2C_IsErrorOccurred+0xbc>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ff6:	d01d      	beq.n	8006034 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ff8:	7cfb      	ldrb	r3, [r7, #19]
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d01a      	beq.n	8006034 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800600c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800600e:	f7fe fd7b 	bl	8004b08 <HAL_GetTick>
 8006012:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006014:	e00e      	b.n	8006034 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006016:	f7fe fd77 	bl	8004b08 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b19      	cmp	r3, #25
 8006022:	d907      	bls.n	8006034 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	f043 0320 	orr.w	r3, r3, #32
 800602a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006032:	e006      	b.n	8006042 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b20      	cmp	r3, #32
 8006040:	d1e9      	bne.n	8006016 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b20      	cmp	r3, #32
 800604e:	d003      	beq.n	8006058 <I2C_IsErrorOccurred+0xe0>
 8006050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0aa      	beq.n	8005fae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800605c:	2b00      	cmp	r3, #0
 800605e:	d103      	bne.n	8006068 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2220      	movs	r2, #32
 8006066:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	f043 0304 	orr.w	r3, r3, #4
 800606e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	f043 0301 	orr.w	r3, r3, #1
 800608e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	f043 0308 	orr.w	r3, r3, #8
 80060b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	f043 0302 	orr.w	r3, r3, #2
 80060d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80060e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01c      	beq.n	8006126 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff fe3b 	bl	8005d68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6859      	ldr	r1, [r3, #4]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006134 <I2C_IsErrorOccurred+0x1bc>)
 80060fe:	400b      	ands	r3, r1
 8006100:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	431a      	orrs	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006126:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800612a:	4618      	mov	r0, r3
 800612c:	3728      	adds	r7, #40	@ 0x28
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	fe00e800 	.word	0xfe00e800

08006138 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	607b      	str	r3, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	817b      	strh	r3, [r7, #10]
 8006146:	4613      	mov	r3, r2
 8006148:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800614a:	897b      	ldrh	r3, [r7, #10]
 800614c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006150:	7a7b      	ldrb	r3, [r7, #9]
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006158:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	4313      	orrs	r3, r2
 8006162:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006166:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	0d5b      	lsrs	r3, r3, #21
 8006172:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006176:	4b08      	ldr	r3, [pc, #32]	@ (8006198 <I2C_TransferConfig+0x60>)
 8006178:	430b      	orrs	r3, r1
 800617a:	43db      	mvns	r3, r3
 800617c:	ea02 0103 	and.w	r1, r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	03ff63ff 	.word	0x03ff63ff

0800619c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d138      	bne.n	8006224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061bc:	2302      	movs	r3, #2
 80061be:	e032      	b.n	8006226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	@ 0x24
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6819      	ldr	r1, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	e000      	b.n	8006226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006224:	2302      	movs	r3, #2
  }
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006232:	b480      	push	{r7}
 8006234:	b085      	sub	sp, #20
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b20      	cmp	r3, #32
 8006246:	d139      	bne.n	80062bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006252:	2302      	movs	r3, #2
 8006254:	e033      	b.n	80062be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2224      	movs	r2, #36	@ 0x24
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006284:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	021b      	lsls	r3, r3, #8
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e000      	b.n	80062be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062d0:	4b05      	ldr	r3, [pc, #20]	@ (80062e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a04      	ldr	r2, [pc, #16]	@ (80062e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062da:	6013      	str	r3, [r2, #0]
}
 80062dc:	bf00      	nop
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40007000 	.word	0x40007000

080062ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80062f0:	4b04      	ldr	r3, [pc, #16]	@ (8006304 <HAL_PWREx_GetVoltageRange+0x18>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40007000 	.word	0x40007000

08006308 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006316:	d130      	bne.n	800637a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006318:	4b23      	ldr	r3, [pc, #140]	@ (80063a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006324:	d038      	beq.n	8006398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006326:	4b20      	ldr	r3, [pc, #128]	@ (80063a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800632e:	4a1e      	ldr	r2, [pc, #120]	@ (80063a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006330:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006334:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006336:	4b1d      	ldr	r3, [pc, #116]	@ (80063ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2232      	movs	r2, #50	@ 0x32
 800633c:	fb02 f303 	mul.w	r3, r2, r3
 8006340:	4a1b      	ldr	r2, [pc, #108]	@ (80063b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	0c9b      	lsrs	r3, r3, #18
 8006348:	3301      	adds	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800634c:	e002      	b.n	8006354 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3b01      	subs	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006354:	4b14      	ldr	r3, [pc, #80]	@ (80063a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006360:	d102      	bne.n	8006368 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1f2      	bne.n	800634e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006368:	4b0f      	ldr	r3, [pc, #60]	@ (80063a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006374:	d110      	bne.n	8006398 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e00f      	b.n	800639a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800637a:	4b0b      	ldr	r3, [pc, #44]	@ (80063a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006386:	d007      	beq.n	8006398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006388:	4b07      	ldr	r3, [pc, #28]	@ (80063a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006390:	4a05      	ldr	r2, [pc, #20]	@ (80063a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006396:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40007000 	.word	0x40007000
 80063ac:	20000044 	.word	0x20000044
 80063b0:	431bde83 	.word	0x431bde83

080063b4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80063bc:	f7fe fba4 	bl	8004b08 <HAL_GetTick>
 80063c0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e063      	b.n	8006494 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10b      	bne.n	80063f0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7fb ffa9 	bl	8002338 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80063e6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f858 	bl	80064a0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	3b01      	subs	r3, #1
 8006400:	021a      	lsls	r2, r3, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	2120      	movs	r1, #32
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f850 	bl	80064bc <QSPI_WaitFlagStateUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006420:	7afb      	ldrb	r3, [r7, #11]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d131      	bne.n	800648a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006430:	f023 0310 	bic.w	r3, r3, #16
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6852      	ldr	r2, [r2, #4]
 8006438:	0611      	lsls	r1, r2, #24
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	68d2      	ldr	r2, [r2, #12]
 800643e:	4311      	orrs	r1, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	430b      	orrs	r3, r1
 8006446:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	4b13      	ldr	r3, [pc, #76]	@ (800649c <HAL_QSPI_Init+0xe8>)
 8006450:	4013      	ands	r3, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6912      	ldr	r2, [r2, #16]
 8006456:	0411      	lsls	r1, r2, #16
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6952      	ldr	r2, [r2, #20]
 800645c:	4311      	orrs	r1, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6992      	ldr	r2, [r2, #24]
 8006462:	4311      	orrs	r1, r2
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	430b      	orrs	r3, r1
 800646a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8006492:	7afb      	ldrb	r3, [r7, #11]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	ffe0f8fe 	.word	0xffe0f8fe

080064a0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	4613      	mov	r3, r2
 80064ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80064cc:	e01a      	b.n	8006504 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d4:	d016      	beq.n	8006504 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d6:	f7fe fb17 	bl	8004b08 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d302      	bcc.n	80064ec <QSPI_WaitFlagStateUntilTimeout+0x30>
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10b      	bne.n	8006504 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2204      	movs	r2, #4
 80064f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f8:	f043 0201 	orr.w	r2, r3, #1
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e00e      	b.n	8006522 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	4013      	ands	r3, r2
 800650e:	2b00      	cmp	r3, #0
 8006510:	bf14      	ite	ne
 8006512:	2301      	movne	r3, #1
 8006514:	2300      	moveq	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	461a      	mov	r2, r3
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	429a      	cmp	r2, r3
 800651e:	d1d6      	bne.n	80064ce <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e3ca      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800653e:	4b97      	ldr	r3, [pc, #604]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006548:	4b94      	ldr	r3, [pc, #592]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f003 0303 	and.w	r3, r3, #3
 8006550:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 80e4 	beq.w	8006728 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <HAL_RCC_OscConfig+0x4a>
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b0c      	cmp	r3, #12
 800656a:	f040 808b 	bne.w	8006684 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b01      	cmp	r3, #1
 8006572:	f040 8087 	bne.w	8006684 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006576:	4b89      	ldr	r3, [pc, #548]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <HAL_RCC_OscConfig+0x62>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e3a2      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	4b82      	ldr	r3, [pc, #520]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0308 	and.w	r3, r3, #8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d004      	beq.n	80065a8 <HAL_RCC_OscConfig+0x7c>
 800659e:	4b7f      	ldr	r3, [pc, #508]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065a6:	e005      	b.n	80065b4 <HAL_RCC_OscConfig+0x88>
 80065a8:	4b7c      	ldr	r3, [pc, #496]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80065aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ae:	091b      	lsrs	r3, r3, #4
 80065b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d223      	bcs.n	8006600 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fd55 	bl	800706c <RCC_SetFlashLatencyFromMSIRange>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e383      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065cc:	4b73      	ldr	r3, [pc, #460]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a72      	ldr	r2, [pc, #456]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80065d2:	f043 0308 	orr.w	r3, r3, #8
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	4b70      	ldr	r3, [pc, #448]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	496d      	ldr	r1, [pc, #436]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065ea:	4b6c      	ldr	r3, [pc, #432]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	021b      	lsls	r3, r3, #8
 80065f8:	4968      	ldr	r1, [pc, #416]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	604b      	str	r3, [r1, #4]
 80065fe:	e025      	b.n	800664c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006600:	4b66      	ldr	r3, [pc, #408]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a65      	ldr	r2, [pc, #404]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 8006606:	f043 0308 	orr.w	r3, r3, #8
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	4b63      	ldr	r3, [pc, #396]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	4960      	ldr	r1, [pc, #384]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 800661a:	4313      	orrs	r3, r2
 800661c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800661e:	4b5f      	ldr	r3, [pc, #380]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	021b      	lsls	r3, r3, #8
 800662c:	495b      	ldr	r1, [pc, #364]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 800662e:	4313      	orrs	r3, r2
 8006630:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fd15 	bl	800706c <RCC_SetFlashLatencyFromMSIRange>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e343      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800664c:	f000 fc4a 	bl	8006ee4 <HAL_RCC_GetSysClockFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b52      	ldr	r3, [pc, #328]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	091b      	lsrs	r3, r3, #4
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	4950      	ldr	r1, [pc, #320]	@ (80067a0 <HAL_RCC_OscConfig+0x274>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	f003 031f 	and.w	r3, r3, #31
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
 8006668:	4a4e      	ldr	r2, [pc, #312]	@ (80067a4 <HAL_RCC_OscConfig+0x278>)
 800666a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800666c:	4b4e      	ldr	r3, [pc, #312]	@ (80067a8 <HAL_RCC_OscConfig+0x27c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f7fe f9f9 	bl	8004a68 <HAL_InitTick>
 8006676:	4603      	mov	r3, r0
 8006678:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d052      	beq.n	8006726 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	e327      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d032      	beq.n	80066f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800668c:	4b43      	ldr	r3, [pc, #268]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a42      	ldr	r2, [pc, #264]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006698:	f7fe fa36 	bl	8004b08 <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066a0:	f7fe fa32 	bl	8004b08 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e310      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066b2:	4b3a      	ldr	r3, [pc, #232]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0f0      	beq.n	80066a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066be:	4b37      	ldr	r3, [pc, #220]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a36      	ldr	r2, [pc, #216]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80066c4:	f043 0308 	orr.w	r3, r3, #8
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	4b34      	ldr	r3, [pc, #208]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	4931      	ldr	r1, [pc, #196]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066dc:	4b2f      	ldr	r3, [pc, #188]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	492c      	ldr	r1, [pc, #176]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	604b      	str	r3, [r1, #4]
 80066f0:	e01a      	b.n	8006728 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80066f2:	4b2a      	ldr	r3, [pc, #168]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a29      	ldr	r2, [pc, #164]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 80066f8:	f023 0301 	bic.w	r3, r3, #1
 80066fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066fe:	f7fe fa03 	bl	8004b08 <HAL_GetTick>
 8006702:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006704:	e008      	b.n	8006718 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006706:	f7fe f9ff 	bl	8004b08 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b02      	cmp	r3, #2
 8006712:	d901      	bls.n	8006718 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e2dd      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006718:	4b20      	ldr	r3, [pc, #128]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1f0      	bne.n	8006706 <HAL_RCC_OscConfig+0x1da>
 8006724:	e000      	b.n	8006728 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006726:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d074      	beq.n	800681e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	2b08      	cmp	r3, #8
 8006738:	d005      	beq.n	8006746 <HAL_RCC_OscConfig+0x21a>
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b0c      	cmp	r3, #12
 800673e:	d10e      	bne.n	800675e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b03      	cmp	r3, #3
 8006744:	d10b      	bne.n	800675e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006746:	4b15      	ldr	r3, [pc, #84]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d064      	beq.n	800681c <HAL_RCC_OscConfig+0x2f0>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d160      	bne.n	800681c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e2ba      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006766:	d106      	bne.n	8006776 <HAL_RCC_OscConfig+0x24a>
 8006768:	4b0c      	ldr	r3, [pc, #48]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a0b      	ldr	r2, [pc, #44]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 800676e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	e026      	b.n	80067c4 <HAL_RCC_OscConfig+0x298>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800677e:	d115      	bne.n	80067ac <HAL_RCC_OscConfig+0x280>
 8006780:	4b06      	ldr	r3, [pc, #24]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a05      	ldr	r2, [pc, #20]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 8006786:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	4b03      	ldr	r3, [pc, #12]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a02      	ldr	r2, [pc, #8]	@ (800679c <HAL_RCC_OscConfig+0x270>)
 8006792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	e014      	b.n	80067c4 <HAL_RCC_OscConfig+0x298>
 800679a:	bf00      	nop
 800679c:	40021000 	.word	0x40021000
 80067a0:	08013544 	.word	0x08013544
 80067a4:	20000044 	.word	0x20000044
 80067a8:	200000b0 	.word	0x200000b0
 80067ac:	4ba0      	ldr	r3, [pc, #640]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a9f      	ldr	r2, [pc, #636]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 80067b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	4b9d      	ldr	r3, [pc, #628]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a9c      	ldr	r2, [pc, #624]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 80067be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d013      	beq.n	80067f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fe f99c 	bl	8004b08 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067d4:	f7fe f998 	bl	8004b08 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b64      	cmp	r3, #100	@ 0x64
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e276      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067e6:	4b92      	ldr	r3, [pc, #584]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x2a8>
 80067f2:	e014      	b.n	800681e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f4:	f7fe f988 	bl	8004b08 <HAL_GetTick>
 80067f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067fc:	f7fe f984 	bl	8004b08 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b64      	cmp	r3, #100	@ 0x64
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e262      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800680e:	4b88      	ldr	r3, [pc, #544]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f0      	bne.n	80067fc <HAL_RCC_OscConfig+0x2d0>
 800681a:	e000      	b.n	800681e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800681c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d060      	beq.n	80068ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	2b04      	cmp	r3, #4
 800682e:	d005      	beq.n	800683c <HAL_RCC_OscConfig+0x310>
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	2b0c      	cmp	r3, #12
 8006834:	d119      	bne.n	800686a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b02      	cmp	r3, #2
 800683a:	d116      	bne.n	800686a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800683c:	4b7c      	ldr	r3, [pc, #496]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <HAL_RCC_OscConfig+0x328>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e23f      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006854:	4b76      	ldr	r3, [pc, #472]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	061b      	lsls	r3, r3, #24
 8006862:	4973      	ldr	r1, [pc, #460]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006864:	4313      	orrs	r3, r2
 8006866:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006868:	e040      	b.n	80068ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d023      	beq.n	80068ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006872:	4b6f      	ldr	r3, [pc, #444]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a6e      	ldr	r2, [pc, #440]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800687c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687e:	f7fe f943 	bl	8004b08 <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006884:	e008      	b.n	8006898 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006886:	f7fe f93f 	bl	8004b08 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e21d      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006898:	4b65      	ldr	r3, [pc, #404]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f0      	beq.n	8006886 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a4:	4b62      	ldr	r3, [pc, #392]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	061b      	lsls	r3, r3, #24
 80068b2:	495f      	ldr	r1, [pc, #380]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	604b      	str	r3, [r1, #4]
 80068b8:	e018      	b.n	80068ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068ba:	4b5d      	ldr	r3, [pc, #372]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a5c      	ldr	r2, [pc, #368]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 80068c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c6:	f7fe f91f 	bl	8004b08 <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068ce:	f7fe f91b 	bl	8004b08 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e1f9      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068e0:	4b53      	ldr	r3, [pc, #332]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1f0      	bne.n	80068ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0308 	and.w	r3, r3, #8
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d03c      	beq.n	8006972 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01c      	beq.n	800693a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006900:	4b4b      	ldr	r3, [pc, #300]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006906:	4a4a      	ldr	r2, [pc, #296]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006908:	f043 0301 	orr.w	r3, r3, #1
 800690c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006910:	f7fe f8fa 	bl	8004b08 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006918:	f7fe f8f6 	bl	8004b08 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e1d4      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800692a:	4b41      	ldr	r3, [pc, #260]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 800692c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0ef      	beq.n	8006918 <HAL_RCC_OscConfig+0x3ec>
 8006938:	e01b      	b.n	8006972 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800693a:	4b3d      	ldr	r3, [pc, #244]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 800693c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006940:	4a3b      	ldr	r2, [pc, #236]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006942:	f023 0301 	bic.w	r3, r3, #1
 8006946:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800694a:	f7fe f8dd 	bl	8004b08 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006952:	f7fe f8d9 	bl	8004b08 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e1b7      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006964:	4b32      	ldr	r3, [pc, #200]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006966:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1ef      	bne.n	8006952 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80a6 	beq.w	8006acc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006980:	2300      	movs	r3, #0
 8006982:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006984:	4b2a      	ldr	r3, [pc, #168]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10d      	bne.n	80069ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006990:	4b27      	ldr	r3, [pc, #156]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006994:	4a26      	ldr	r2, [pc, #152]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800699a:	6593      	str	r3, [r2, #88]	@ 0x58
 800699c:	4b24      	ldr	r3, [pc, #144]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 800699e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069a8:	2301      	movs	r3, #1
 80069aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069ac:	4b21      	ldr	r3, [pc, #132]	@ (8006a34 <HAL_RCC_OscConfig+0x508>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d118      	bne.n	80069ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006a34 <HAL_RCC_OscConfig+0x508>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006a34 <HAL_RCC_OscConfig+0x508>)
 80069be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069c4:	f7fe f8a0 	bl	8004b08 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069cc:	f7fe f89c 	bl	8004b08 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e17a      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069de:	4b15      	ldr	r3, [pc, #84]	@ (8006a34 <HAL_RCC_OscConfig+0x508>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0f0      	beq.n	80069cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d108      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4d8>
 80069f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 80069f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a02:	e029      	b.n	8006a58 <HAL_RCC_OscConfig+0x52c>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b05      	cmp	r3, #5
 8006a0a:	d115      	bne.n	8006a38 <HAL_RCC_OscConfig+0x50c>
 8006a0c:	4b08      	ldr	r3, [pc, #32]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a12:	4a07      	ldr	r2, [pc, #28]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006a14:	f043 0304 	orr.w	r3, r3, #4
 8006a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a1c:	4b04      	ldr	r3, [pc, #16]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a22:	4a03      	ldr	r2, [pc, #12]	@ (8006a30 <HAL_RCC_OscConfig+0x504>)
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a2c:	e014      	b.n	8006a58 <HAL_RCC_OscConfig+0x52c>
 8006a2e:	bf00      	nop
 8006a30:	40021000 	.word	0x40021000
 8006a34:	40007000 	.word	0x40007000
 8006a38:	4b9c      	ldr	r3, [pc, #624]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a3e:	4a9b      	ldr	r2, [pc, #620]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006a40:	f023 0301 	bic.w	r3, r3, #1
 8006a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a48:	4b98      	ldr	r3, [pc, #608]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a4e:	4a97      	ldr	r2, [pc, #604]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006a50:	f023 0304 	bic.w	r3, r3, #4
 8006a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d016      	beq.n	8006a8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a60:	f7fe f852 	bl	8004b08 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a66:	e00a      	b.n	8006a7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a68:	f7fe f84e 	bl	8004b08 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e12a      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a7e:	4b8b      	ldr	r3, [pc, #556]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0ed      	beq.n	8006a68 <HAL_RCC_OscConfig+0x53c>
 8006a8c:	e015      	b.n	8006aba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8e:	f7fe f83b 	bl	8004b08 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a94:	e00a      	b.n	8006aac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a96:	f7fe f837 	bl	8004b08 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d901      	bls.n	8006aac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e113      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006aac:	4b7f      	ldr	r3, [pc, #508]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1ed      	bne.n	8006a96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aba:	7ffb      	ldrb	r3, [r7, #31]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d105      	bne.n	8006acc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ac0:	4b7a      	ldr	r3, [pc, #488]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac4:	4a79      	ldr	r2, [pc, #484]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80fe 	beq.w	8006cd2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	f040 80d0 	bne.w	8006c80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006ae0:	4b72      	ldr	r3, [pc, #456]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f003 0203 	and.w	r2, r3, #3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d130      	bne.n	8006b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afe:	3b01      	subs	r3, #1
 8006b00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d127      	bne.n	8006b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d11f      	bne.n	8006b56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b20:	2a07      	cmp	r2, #7
 8006b22:	bf14      	ite	ne
 8006b24:	2201      	movne	r2, #1
 8006b26:	2200      	moveq	r2, #0
 8006b28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d113      	bne.n	8006b56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b38:	085b      	lsrs	r3, r3, #1
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d109      	bne.n	8006b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d06e      	beq.n	8006c34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b0c      	cmp	r3, #12
 8006b5a:	d069      	beq.n	8006c30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b5c:	4b53      	ldr	r3, [pc, #332]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d105      	bne.n	8006b74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006b68:	4b50      	ldr	r3, [pc, #320]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0ad      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b78:	4b4c      	ldr	r3, [pc, #304]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006b7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b84:	f7fd ffc0 	bl	8004b08 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b8c:	f7fd ffbc 	bl	8004b08 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e09a      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b9e:	4b43      	ldr	r3, [pc, #268]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f0      	bne.n	8006b8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006baa:	4b40      	ldr	r3, [pc, #256]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	4b40      	ldr	r3, [pc, #256]	@ (8006cb0 <HAL_RCC_OscConfig+0x784>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006bba:	3a01      	subs	r2, #1
 8006bbc:	0112      	lsls	r2, r2, #4
 8006bbe:	4311      	orrs	r1, r2
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006bc4:	0212      	lsls	r2, r2, #8
 8006bc6:	4311      	orrs	r1, r2
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006bcc:	0852      	lsrs	r2, r2, #1
 8006bce:	3a01      	subs	r2, #1
 8006bd0:	0552      	lsls	r2, r2, #21
 8006bd2:	4311      	orrs	r1, r2
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006bd8:	0852      	lsrs	r2, r2, #1
 8006bda:	3a01      	subs	r2, #1
 8006bdc:	0652      	lsls	r2, r2, #25
 8006bde:	4311      	orrs	r1, r2
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006be4:	0912      	lsrs	r2, r2, #4
 8006be6:	0452      	lsls	r2, r2, #17
 8006be8:	430a      	orrs	r2, r1
 8006bea:	4930      	ldr	r1, [pc, #192]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006bf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	4a2a      	ldr	r2, [pc, #168]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c08:	f7fd ff7e 	bl	8004b08 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c10:	f7fd ff7a 	bl	8004b08 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e058      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c22:	4b22      	ldr	r3, [pc, #136]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0f0      	beq.n	8006c10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c2e:	e050      	b.n	8006cd2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e04f      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c34:	4b1d      	ldr	r3, [pc, #116]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d148      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006c40:	4b1a      	ldr	r3, [pc, #104]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a19      	ldr	r2, [pc, #100]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c4c:	4b17      	ldr	r3, [pc, #92]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	4a16      	ldr	r2, [pc, #88]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006c52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c58:	f7fd ff56 	bl	8004b08 <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c60:	f7fd ff52 	bl	8004b08 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e030      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c72:	4b0e      	ldr	r3, [pc, #56]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f0      	beq.n	8006c60 <HAL_RCC_OscConfig+0x734>
 8006c7e:	e028      	b.n	8006cd2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b0c      	cmp	r3, #12
 8006c84:	d023      	beq.n	8006cce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c86:	4b09      	ldr	r3, [pc, #36]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a08      	ldr	r2, [pc, #32]	@ (8006cac <HAL_RCC_OscConfig+0x780>)
 8006c8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c92:	f7fd ff39 	bl	8004b08 <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c98:	e00c      	b.n	8006cb4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c9a:	f7fd ff35 	bl	8004b08 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d905      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e013      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cb4:	4b09      	ldr	r3, [pc, #36]	@ (8006cdc <HAL_RCC_OscConfig+0x7b0>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1ec      	bne.n	8006c9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006cc0:	4b06      	ldr	r3, [pc, #24]	@ (8006cdc <HAL_RCC_OscConfig+0x7b0>)
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	4905      	ldr	r1, [pc, #20]	@ (8006cdc <HAL_RCC_OscConfig+0x7b0>)
 8006cc6:	4b06      	ldr	r3, [pc, #24]	@ (8006ce0 <HAL_RCC_OscConfig+0x7b4>)
 8006cc8:	4013      	ands	r3, r2
 8006cca:	60cb      	str	r3, [r1, #12]
 8006ccc:	e001      	b.n	8006cd2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3720      	adds	r7, #32
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40021000 	.word	0x40021000
 8006ce0:	feeefffc 	.word	0xfeeefffc

08006ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e0e7      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cf8:	4b75      	ldr	r3, [pc, #468]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d910      	bls.n	8006d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d06:	4b72      	ldr	r3, [pc, #456]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f023 0207 	bic.w	r2, r3, #7
 8006d0e:	4970      	ldr	r1, [pc, #448]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d16:	4b6e      	ldr	r3, [pc, #440]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0307 	and.w	r3, r3, #7
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d001      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e0cf      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d010      	beq.n	8006d56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	4b66      	ldr	r3, [pc, #408]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d908      	bls.n	8006d56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d44:	4b63      	ldr	r3, [pc, #396]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	4960      	ldr	r1, [pc, #384]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d04c      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d107      	bne.n	8006d7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d6a:	4b5a      	ldr	r3, [pc, #360]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d121      	bne.n	8006dba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e0a6      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d107      	bne.n	8006d92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d82:	4b54      	ldr	r3, [pc, #336]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d115      	bne.n	8006dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e09a      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d107      	bne.n	8006daa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d9a:	4b4e      	ldr	r3, [pc, #312]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e08e      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006daa:	4b4a      	ldr	r3, [pc, #296]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e086      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dba:	4b46      	ldr	r3, [pc, #280]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f023 0203 	bic.w	r2, r3, #3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	4943      	ldr	r1, [pc, #268]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dcc:	f7fd fe9c 	bl	8004b08 <HAL_GetTick>
 8006dd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd2:	e00a      	b.n	8006dea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd4:	f7fd fe98 	bl	8004b08 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e06e      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dea:	4b3a      	ldr	r3, [pc, #232]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 020c 	and.w	r2, r3, #12
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d1eb      	bne.n	8006dd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d010      	beq.n	8006e2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	4b31      	ldr	r3, [pc, #196]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d208      	bcs.n	8006e2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e18:	4b2e      	ldr	r3, [pc, #184]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	492b      	ldr	r1, [pc, #172]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e2a:	4b29      	ldr	r3, [pc, #164]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0307 	and.w	r3, r3, #7
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d210      	bcs.n	8006e5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e38:	4b25      	ldr	r3, [pc, #148]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f023 0207 	bic.w	r2, r3, #7
 8006e40:	4923      	ldr	r1, [pc, #140]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e48:	4b21      	ldr	r3, [pc, #132]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d001      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e036      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d008      	beq.n	8006e78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e66:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	4918      	ldr	r1, [pc, #96]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d009      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e84:	4b13      	ldr	r3, [pc, #76]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	00db      	lsls	r3, r3, #3
 8006e92:	4910      	ldr	r1, [pc, #64]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e98:	f000 f824 	bl	8006ee4 <HAL_RCC_GetSysClockFreq>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	091b      	lsrs	r3, r3, #4
 8006ea4:	f003 030f 	and.w	r3, r3, #15
 8006ea8:	490b      	ldr	r1, [pc, #44]	@ (8006ed8 <HAL_RCC_ClockConfig+0x1f4>)
 8006eaa:	5ccb      	ldrb	r3, [r1, r3]
 8006eac:	f003 031f 	and.w	r3, r3, #31
 8006eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb4:	4a09      	ldr	r2, [pc, #36]	@ (8006edc <HAL_RCC_ClockConfig+0x1f8>)
 8006eb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006eb8:	4b09      	ldr	r3, [pc, #36]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1fc>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fd fdd3 	bl	8004a68 <HAL_InitTick>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	72fb      	strb	r3, [r7, #11]

  return status;
 8006ec6:	7afb      	ldrb	r3, [r7, #11]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	40022000 	.word	0x40022000
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	08013544 	.word	0x08013544
 8006edc:	20000044 	.word	0x20000044
 8006ee0:	200000b0 	.word	0x200000b0

08006ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b089      	sub	sp, #36	@ 0x24
 8006ee8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61fb      	str	r3, [r7, #28]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x108>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 030c 	and.w	r3, r3, #12
 8006efa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006efc:	4b3b      	ldr	r3, [pc, #236]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x108>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <HAL_RCC_GetSysClockFreq+0x34>
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b0c      	cmp	r3, #12
 8006f10:	d121      	bne.n	8006f56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d11e      	bne.n	8006f56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006f18:	4b34      	ldr	r3, [pc, #208]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x108>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d107      	bne.n	8006f34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006f24:	4b31      	ldr	r3, [pc, #196]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x108>)
 8006f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f2a:	0a1b      	lsrs	r3, r3, #8
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	e005      	b.n	8006f40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006f34:	4b2d      	ldr	r3, [pc, #180]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x108>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	091b      	lsrs	r3, r3, #4
 8006f3a:	f003 030f 	and.w	r3, r3, #15
 8006f3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006f40:	4a2b      	ldr	r2, [pc, #172]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10d      	bne.n	8006f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f54:	e00a      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d102      	bne.n	8006f62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f5c:	4b25      	ldr	r3, [pc, #148]	@ (8006ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f5e:	61bb      	str	r3, [r7, #24]
 8006f60:	e004      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d101      	bne.n	8006f6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f68:	4b23      	ldr	r3, [pc, #140]	@ (8006ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	2b0c      	cmp	r3, #12
 8006f70:	d134      	bne.n	8006fdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f72:	4b1e      	ldr	r3, [pc, #120]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x108>)
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d003      	beq.n	8006f8a <HAL_RCC_GetSysClockFreq+0xa6>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d003      	beq.n	8006f90 <HAL_RCC_GetSysClockFreq+0xac>
 8006f88:	e005      	b.n	8006f96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f8c:	617b      	str	r3, [r7, #20]
      break;
 8006f8e:	e005      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f90:	4b19      	ldr	r3, [pc, #100]	@ (8006ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f92:	617b      	str	r3, [r7, #20]
      break;
 8006f94:	e002      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	617b      	str	r3, [r7, #20]
      break;
 8006f9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f9c:	4b13      	ldr	r3, [pc, #76]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x108>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	091b      	lsrs	r3, r3, #4
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006faa:	4b10      	ldr	r3, [pc, #64]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x108>)
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	fb03 f202 	mul.w	r2, r3, r2
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x108>)
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	0e5b      	lsrs	r3, r3, #25
 8006fc8:	f003 0303 	and.w	r3, r3, #3
 8006fcc:	3301      	adds	r3, #1
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3724      	adds	r7, #36	@ 0x24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	40021000 	.word	0x40021000
 8006ff0:	0801355c 	.word	0x0801355c
 8006ff4:	00f42400 	.word	0x00f42400
 8006ff8:	007a1200 	.word	0x007a1200

08006ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007000:	4b03      	ldr	r3, [pc, #12]	@ (8007010 <HAL_RCC_GetHCLKFreq+0x14>)
 8007002:	681b      	ldr	r3, [r3, #0]
}
 8007004:	4618      	mov	r0, r3
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20000044 	.word	0x20000044

08007014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007018:	f7ff fff0 	bl	8006ffc <HAL_RCC_GetHCLKFreq>
 800701c:	4602      	mov	r2, r0
 800701e:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	4904      	ldr	r1, [pc, #16]	@ (800703c <HAL_RCC_GetPCLK1Freq+0x28>)
 800702a:	5ccb      	ldrb	r3, [r1, r3]
 800702c:	f003 031f 	and.w	r3, r3, #31
 8007030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007034:	4618      	mov	r0, r3
 8007036:	bd80      	pop	{r7, pc}
 8007038:	40021000 	.word	0x40021000
 800703c:	08013554 	.word	0x08013554

08007040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007044:	f7ff ffda 	bl	8006ffc <HAL_RCC_GetHCLKFreq>
 8007048:	4602      	mov	r2, r0
 800704a:	4b06      	ldr	r3, [pc, #24]	@ (8007064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	0adb      	lsrs	r3, r3, #11
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	4904      	ldr	r1, [pc, #16]	@ (8007068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007056:	5ccb      	ldrb	r3, [r1, r3]
 8007058:	f003 031f 	and.w	r3, r3, #31
 800705c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007060:	4618      	mov	r0, r3
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40021000 	.word	0x40021000
 8007068:	08013554 	.word	0x08013554

0800706c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007074:	2300      	movs	r3, #0
 8007076:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007078:	4b2a      	ldr	r3, [pc, #168]	@ (8007124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800707a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800707c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007084:	f7ff f932 	bl	80062ec <HAL_PWREx_GetVoltageRange>
 8007088:	6178      	str	r0, [r7, #20]
 800708a:	e014      	b.n	80070b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800708c:	4b25      	ldr	r3, [pc, #148]	@ (8007124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800708e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007090:	4a24      	ldr	r2, [pc, #144]	@ (8007124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007096:	6593      	str	r3, [r2, #88]	@ 0x58
 8007098:	4b22      	ldr	r3, [pc, #136]	@ (8007124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800709a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80070a4:	f7ff f922 	bl	80062ec <HAL_PWREx_GetVoltageRange>
 80070a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80070aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80070ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ae:	4a1d      	ldr	r2, [pc, #116]	@ (8007124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80070b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070bc:	d10b      	bne.n	80070d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b80      	cmp	r3, #128	@ 0x80
 80070c2:	d919      	bls.n	80070f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80070c8:	d902      	bls.n	80070d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80070ca:	2302      	movs	r3, #2
 80070cc:	613b      	str	r3, [r7, #16]
 80070ce:	e013      	b.n	80070f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80070d0:	2301      	movs	r3, #1
 80070d2:	613b      	str	r3, [r7, #16]
 80070d4:	e010      	b.n	80070f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b80      	cmp	r3, #128	@ 0x80
 80070da:	d902      	bls.n	80070e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80070dc:	2303      	movs	r3, #3
 80070de:	613b      	str	r3, [r7, #16]
 80070e0:	e00a      	b.n	80070f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b80      	cmp	r3, #128	@ 0x80
 80070e6:	d102      	bne.n	80070ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80070e8:	2302      	movs	r3, #2
 80070ea:	613b      	str	r3, [r7, #16]
 80070ec:	e004      	b.n	80070f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b70      	cmp	r3, #112	@ 0x70
 80070f2:	d101      	bne.n	80070f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80070f4:	2301      	movs	r3, #1
 80070f6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80070f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f023 0207 	bic.w	r2, r3, #7
 8007100:	4909      	ldr	r1, [pc, #36]	@ (8007128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007108:	4b07      	ldr	r3, [pc, #28]	@ (8007128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	429a      	cmp	r2, r3
 8007114:	d001      	beq.n	800711a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40021000 	.word	0x40021000
 8007128:	40022000 	.word	0x40022000

0800712c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007134:	2300      	movs	r3, #0
 8007136:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007138:	2300      	movs	r3, #0
 800713a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007144:	2b00      	cmp	r3, #0
 8007146:	d041      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800714c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007150:	d02a      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007152:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007156:	d824      	bhi.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007158:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800715c:	d008      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800715e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007162:	d81e      	bhi.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800716c:	d010      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800716e:	e018      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007170:	4b86      	ldr	r3, [pc, #536]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	4a85      	ldr	r2, [pc, #532]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800717a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800717c:	e015      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3304      	adds	r3, #4
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f000 facb 	bl	8007720 <RCCEx_PLLSAI1_Config>
 800718a:	4603      	mov	r3, r0
 800718c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800718e:	e00c      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3320      	adds	r3, #32
 8007194:	2100      	movs	r1, #0
 8007196:	4618      	mov	r0, r3
 8007198:	f000 fbb6 	bl	8007908 <RCCEx_PLLSAI2_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80071a0:	e003      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	74fb      	strb	r3, [r7, #19]
      break;
 80071a6:	e000      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80071a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071aa:	7cfb      	ldrb	r3, [r7, #19]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10b      	bne.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071b0:	4b76      	ldr	r3, [pc, #472]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071be:	4973      	ldr	r1, [pc, #460]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80071c6:	e001      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c8:	7cfb      	ldrb	r3, [r7, #19]
 80071ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d041      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071e0:	d02a      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80071e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071e6:	d824      	bhi.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80071e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071ec:	d008      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80071ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071f2:	d81e      	bhi.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80071f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071fc:	d010      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80071fe:	e018      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007200:	4b62      	ldr	r3, [pc, #392]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	4a61      	ldr	r2, [pc, #388]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800720a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800720c:	e015      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3304      	adds	r3, #4
 8007212:	2100      	movs	r1, #0
 8007214:	4618      	mov	r0, r3
 8007216:	f000 fa83 	bl	8007720 <RCCEx_PLLSAI1_Config>
 800721a:	4603      	mov	r3, r0
 800721c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800721e:	e00c      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3320      	adds	r3, #32
 8007224:	2100      	movs	r1, #0
 8007226:	4618      	mov	r0, r3
 8007228:	f000 fb6e 	bl	8007908 <RCCEx_PLLSAI2_Config>
 800722c:	4603      	mov	r3, r0
 800722e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007230:	e003      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	74fb      	strb	r3, [r7, #19]
      break;
 8007236:	e000      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800723a:	7cfb      	ldrb	r3, [r7, #19]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10b      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007240:	4b52      	ldr	r3, [pc, #328]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007246:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800724e:	494f      	ldr	r1, [pc, #316]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007250:	4313      	orrs	r3, r2
 8007252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007256:	e001      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007258:	7cfb      	ldrb	r3, [r7, #19]
 800725a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 80a0 	beq.w	80073aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800726a:	2300      	movs	r3, #0
 800726c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800726e:	4b47      	ldr	r3, [pc, #284]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800727e:	2300      	movs	r3, #0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00d      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007284:	4b41      	ldr	r3, [pc, #260]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007288:	4a40      	ldr	r2, [pc, #256]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800728a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800728e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007290:	4b3e      	ldr	r3, [pc, #248]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007298:	60bb      	str	r3, [r7, #8]
 800729a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800729c:	2301      	movs	r3, #1
 800729e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a3a      	ldr	r2, [pc, #232]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80072a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072ac:	f7fd fc2c 	bl	8004b08 <HAL_GetTick>
 80072b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80072b2:	e009      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072b4:	f7fd fc28 	bl	8004b08 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d902      	bls.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	74fb      	strb	r3, [r7, #19]
        break;
 80072c6:	e005      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80072c8:	4b31      	ldr	r3, [pc, #196]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0ef      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80072d4:	7cfb      	ldrb	r3, [r7, #19]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d15c      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072da:	4b2c      	ldr	r3, [pc, #176]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01f      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d019      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80072f8:	4b24      	ldr	r3, [pc, #144]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007302:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007304:	4b21      	ldr	r3, [pc, #132]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730a:	4a20      	ldr	r2, [pc, #128]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800730c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007314:	4b1d      	ldr	r3, [pc, #116]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800731a:	4a1c      	ldr	r2, [pc, #112]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800731c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007324:	4a19      	ldr	r2, [pc, #100]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d016      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007336:	f7fd fbe7 	bl	8004b08 <HAL_GetTick>
 800733a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800733c:	e00b      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800733e:	f7fd fbe3 	bl	8004b08 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800734c:	4293      	cmp	r3, r2
 800734e:	d902      	bls.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	74fb      	strb	r3, [r7, #19]
            break;
 8007354:	e006      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007356:	4b0d      	ldr	r3, [pc, #52]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0ec      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007364:	7cfb      	ldrb	r3, [r7, #19]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10c      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800736a:	4b08      	ldr	r3, [pc, #32]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007370:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800737a:	4904      	ldr	r1, [pc, #16]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800737c:	4313      	orrs	r3, r2
 800737e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007382:	e009      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007384:	7cfb      	ldrb	r3, [r7, #19]
 8007386:	74bb      	strb	r3, [r7, #18]
 8007388:	e006      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800738a:	bf00      	nop
 800738c:	40021000 	.word	0x40021000
 8007390:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007394:	7cfb      	ldrb	r3, [r7, #19]
 8007396:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007398:	7c7b      	ldrb	r3, [r7, #17]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d105      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800739e:	4b9e      	ldr	r3, [pc, #632]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a2:	4a9d      	ldr	r2, [pc, #628]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073b6:	4b98      	ldr	r3, [pc, #608]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073bc:	f023 0203 	bic.w	r2, r3, #3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c4:	4994      	ldr	r1, [pc, #592]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00a      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073d8:	4b8f      	ldr	r3, [pc, #572]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073de:	f023 020c 	bic.w	r2, r3, #12
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e6:	498c      	ldr	r1, [pc, #560]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0304 	and.w	r3, r3, #4
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073fa:	4b87      	ldr	r3, [pc, #540]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007400:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007408:	4983      	ldr	r1, [pc, #524]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800740a:	4313      	orrs	r3, r2
 800740c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0308 	and.w	r3, r3, #8
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00a      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800741c:	4b7e      	ldr	r3, [pc, #504]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800741e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007422:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800742a:	497b      	ldr	r1, [pc, #492]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800742c:	4313      	orrs	r3, r2
 800742e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0310 	and.w	r3, r3, #16
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800743e:	4b76      	ldr	r3, [pc, #472]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007444:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800744c:	4972      	ldr	r1, [pc, #456]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800744e:	4313      	orrs	r3, r2
 8007450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007460:	4b6d      	ldr	r3, [pc, #436]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007466:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800746e:	496a      	ldr	r1, [pc, #424]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007470:	4313      	orrs	r3, r2
 8007472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007482:	4b65      	ldr	r3, [pc, #404]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007488:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007490:	4961      	ldr	r1, [pc, #388]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074a4:	4b5c      	ldr	r3, [pc, #368]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074b2:	4959      	ldr	r1, [pc, #356]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074c6:	4b54      	ldr	r3, [pc, #336]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074d4:	4950      	ldr	r1, [pc, #320]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074e8:	4b4b      	ldr	r3, [pc, #300]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074f6:	4948      	ldr	r1, [pc, #288]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800750a:	4b43      	ldr	r3, [pc, #268]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800750c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007510:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007518:	493f      	ldr	r1, [pc, #252]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d028      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800752c:	4b3a      	ldr	r3, [pc, #232]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007532:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800753a:	4937      	ldr	r1, [pc, #220]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007546:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800754a:	d106      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800754c:	4b32      	ldr	r3, [pc, #200]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	4a31      	ldr	r2, [pc, #196]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007556:	60d3      	str	r3, [r2, #12]
 8007558:	e011      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800755e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007562:	d10c      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3304      	adds	r3, #4
 8007568:	2101      	movs	r1, #1
 800756a:	4618      	mov	r0, r3
 800756c:	f000 f8d8 	bl	8007720 <RCCEx_PLLSAI1_Config>
 8007570:	4603      	mov	r3, r0
 8007572:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007574:	7cfb      	ldrb	r3, [r7, #19]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800757a:	7cfb      	ldrb	r3, [r7, #19]
 800757c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d028      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800758a:	4b23      	ldr	r3, [pc, #140]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800758c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007590:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007598:	491f      	ldr	r1, [pc, #124]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075a8:	d106      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075b4:	60d3      	str	r3, [r2, #12]
 80075b6:	e011      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075c0:	d10c      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3304      	adds	r3, #4
 80075c6:	2101      	movs	r1, #1
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 f8a9 	bl	8007720 <RCCEx_PLLSAI1_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075d2:	7cfb      	ldrb	r3, [r7, #19]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80075d8:	7cfb      	ldrb	r3, [r7, #19]
 80075da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d02b      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075f6:	4908      	ldr	r1, [pc, #32]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007606:	d109      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007608:	4b03      	ldr	r3, [pc, #12]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	4a02      	ldr	r2, [pc, #8]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800760e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007612:	60d3      	str	r3, [r2, #12]
 8007614:	e014      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007616:	bf00      	nop
 8007618:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007620:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007624:	d10c      	bne.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3304      	adds	r3, #4
 800762a:	2101      	movs	r1, #1
 800762c:	4618      	mov	r0, r3
 800762e:	f000 f877 	bl	8007720 <RCCEx_PLLSAI1_Config>
 8007632:	4603      	mov	r3, r0
 8007634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007636:	7cfb      	ldrb	r3, [r7, #19]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800763c:	7cfb      	ldrb	r3, [r7, #19]
 800763e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d02f      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800764c:	4b2b      	ldr	r3, [pc, #172]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800764e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007652:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800765a:	4928      	ldr	r1, [pc, #160]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800765c:	4313      	orrs	r3, r2
 800765e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800766a:	d10d      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3304      	adds	r3, #4
 8007670:	2102      	movs	r1, #2
 8007672:	4618      	mov	r0, r3
 8007674:	f000 f854 	bl	8007720 <RCCEx_PLLSAI1_Config>
 8007678:	4603      	mov	r3, r0
 800767a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800767c:	7cfb      	ldrb	r3, [r7, #19]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d014      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007682:	7cfb      	ldrb	r3, [r7, #19]
 8007684:	74bb      	strb	r3, [r7, #18]
 8007686:	e011      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800768c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007690:	d10c      	bne.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3320      	adds	r3, #32
 8007696:	2102      	movs	r1, #2
 8007698:	4618      	mov	r0, r3
 800769a:	f000 f935 	bl	8007908 <RCCEx_PLLSAI2_Config>
 800769e:	4603      	mov	r3, r0
 80076a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076a2:	7cfb      	ldrb	r3, [r7, #19]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80076a8:	7cfb      	ldrb	r3, [r7, #19]
 80076aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00a      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076b8:	4b10      	ldr	r3, [pc, #64]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80076ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076be:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076c6:	490d      	ldr	r1, [pc, #52]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076da:	4b08      	ldr	r3, [pc, #32]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80076dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ea:	4904      	ldr	r1, [pc, #16]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80076f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40021000 	.word	0x40021000

08007700 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007704:	4b05      	ldr	r3, [pc, #20]	@ (800771c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a04      	ldr	r2, [pc, #16]	@ (800771c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800770a:	f043 0304 	orr.w	r3, r3, #4
 800770e:	6013      	str	r3, [r2, #0]
}
 8007710:	bf00      	nop
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40021000 	.word	0x40021000

08007720 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800772e:	4b75      	ldr	r3, [pc, #468]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d018      	beq.n	800776c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800773a:	4b72      	ldr	r3, [pc, #456]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f003 0203 	and.w	r2, r3, #3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d10d      	bne.n	8007766 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
       ||
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007752:	4b6c      	ldr	r3, [pc, #432]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	091b      	lsrs	r3, r3, #4
 8007758:	f003 0307 	and.w	r3, r3, #7
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
       ||
 8007762:	429a      	cmp	r2, r3
 8007764:	d047      	beq.n	80077f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	73fb      	strb	r3, [r7, #15]
 800776a:	e044      	b.n	80077f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d018      	beq.n	80077a6 <RCCEx_PLLSAI1_Config+0x86>
 8007774:	2b03      	cmp	r3, #3
 8007776:	d825      	bhi.n	80077c4 <RCCEx_PLLSAI1_Config+0xa4>
 8007778:	2b01      	cmp	r3, #1
 800777a:	d002      	beq.n	8007782 <RCCEx_PLLSAI1_Config+0x62>
 800777c:	2b02      	cmp	r3, #2
 800777e:	d009      	beq.n	8007794 <RCCEx_PLLSAI1_Config+0x74>
 8007780:	e020      	b.n	80077c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007782:	4b60      	ldr	r3, [pc, #384]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d11d      	bne.n	80077ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007792:	e01a      	b.n	80077ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007794:	4b5b      	ldr	r3, [pc, #364]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800779c:	2b00      	cmp	r3, #0
 800779e:	d116      	bne.n	80077ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077a4:	e013      	b.n	80077ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80077a6:	4b57      	ldr	r3, [pc, #348]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10f      	bne.n	80077d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077b2:	4b54      	ldr	r3, [pc, #336]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d109      	bne.n	80077d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077c2:	e006      	b.n	80077d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
      break;
 80077c8:	e004      	b.n	80077d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077ca:	bf00      	nop
 80077cc:	e002      	b.n	80077d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10d      	bne.n	80077f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077da:	4b4a      	ldr	r3, [pc, #296]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6819      	ldr	r1, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	430b      	orrs	r3, r1
 80077f0:	4944      	ldr	r1, [pc, #272]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d17d      	bne.n	80078f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80077fc:	4b41      	ldr	r3, [pc, #260]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a40      	ldr	r2, [pc, #256]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007802:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007808:	f7fd f97e 	bl	8004b08 <HAL_GetTick>
 800780c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800780e:	e009      	b.n	8007824 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007810:	f7fd f97a 	bl	8004b08 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b02      	cmp	r3, #2
 800781c:	d902      	bls.n	8007824 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	73fb      	strb	r3, [r7, #15]
        break;
 8007822:	e005      	b.n	8007830 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007824:	4b37      	ldr	r3, [pc, #220]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1ef      	bne.n	8007810 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d160      	bne.n	80078f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d111      	bne.n	8007860 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800783c:	4b31      	ldr	r3, [pc, #196]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6892      	ldr	r2, [r2, #8]
 800784c:	0211      	lsls	r1, r2, #8
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	68d2      	ldr	r2, [r2, #12]
 8007852:	0912      	lsrs	r2, r2, #4
 8007854:	0452      	lsls	r2, r2, #17
 8007856:	430a      	orrs	r2, r1
 8007858:	492a      	ldr	r1, [pc, #168]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 800785a:	4313      	orrs	r3, r2
 800785c:	610b      	str	r3, [r1, #16]
 800785e:	e027      	b.n	80078b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d112      	bne.n	800788c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007866:	4b27      	ldr	r3, [pc, #156]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800786e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	6892      	ldr	r2, [r2, #8]
 8007876:	0211      	lsls	r1, r2, #8
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6912      	ldr	r2, [r2, #16]
 800787c:	0852      	lsrs	r2, r2, #1
 800787e:	3a01      	subs	r2, #1
 8007880:	0552      	lsls	r2, r2, #21
 8007882:	430a      	orrs	r2, r1
 8007884:	491f      	ldr	r1, [pc, #124]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007886:	4313      	orrs	r3, r2
 8007888:	610b      	str	r3, [r1, #16]
 800788a:	e011      	b.n	80078b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800788c:	4b1d      	ldr	r3, [pc, #116]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007894:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6892      	ldr	r2, [r2, #8]
 800789c:	0211      	lsls	r1, r2, #8
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	6952      	ldr	r2, [r2, #20]
 80078a2:	0852      	lsrs	r2, r2, #1
 80078a4:	3a01      	subs	r2, #1
 80078a6:	0652      	lsls	r2, r2, #25
 80078a8:	430a      	orrs	r2, r1
 80078aa:	4916      	ldr	r1, [pc, #88]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80078b0:	4b14      	ldr	r3, [pc, #80]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a13      	ldr	r2, [pc, #76]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078bc:	f7fd f924 	bl	8004b08 <HAL_GetTick>
 80078c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078c2:	e009      	b.n	80078d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078c4:	f7fd f920 	bl	8004b08 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d902      	bls.n	80078d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	73fb      	strb	r3, [r7, #15]
          break;
 80078d6:	e005      	b.n	80078e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0ef      	beq.n	80078c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d106      	bne.n	80078f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80078ea:	4b06      	ldr	r3, [pc, #24]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078ec:	691a      	ldr	r2, [r3, #16]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	4904      	ldr	r1, [pc, #16]	@ (8007904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	40021000 	.word	0x40021000

08007908 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007916:	4b6a      	ldr	r3, [pc, #424]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d018      	beq.n	8007954 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007922:	4b67      	ldr	r3, [pc, #412]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f003 0203 	and.w	r2, r3, #3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d10d      	bne.n	800794e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
       ||
 8007936:	2b00      	cmp	r3, #0
 8007938:	d009      	beq.n	800794e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800793a:	4b61      	ldr	r3, [pc, #388]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	091b      	lsrs	r3, r3, #4
 8007940:	f003 0307 	and.w	r3, r3, #7
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
       ||
 800794a:	429a      	cmp	r2, r3
 800794c:	d047      	beq.n	80079de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	73fb      	strb	r3, [r7, #15]
 8007952:	e044      	b.n	80079de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b03      	cmp	r3, #3
 800795a:	d018      	beq.n	800798e <RCCEx_PLLSAI2_Config+0x86>
 800795c:	2b03      	cmp	r3, #3
 800795e:	d825      	bhi.n	80079ac <RCCEx_PLLSAI2_Config+0xa4>
 8007960:	2b01      	cmp	r3, #1
 8007962:	d002      	beq.n	800796a <RCCEx_PLLSAI2_Config+0x62>
 8007964:	2b02      	cmp	r3, #2
 8007966:	d009      	beq.n	800797c <RCCEx_PLLSAI2_Config+0x74>
 8007968:	e020      	b.n	80079ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800796a:	4b55      	ldr	r3, [pc, #340]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d11d      	bne.n	80079b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800797a:	e01a      	b.n	80079b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800797c:	4b50      	ldr	r3, [pc, #320]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007984:	2b00      	cmp	r3, #0
 8007986:	d116      	bne.n	80079b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800798c:	e013      	b.n	80079b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800798e:	4b4c      	ldr	r3, [pc, #304]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10f      	bne.n	80079ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800799a:	4b49      	ldr	r3, [pc, #292]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d109      	bne.n	80079ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079aa:	e006      	b.n	80079ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	73fb      	strb	r3, [r7, #15]
      break;
 80079b0:	e004      	b.n	80079bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80079b2:	bf00      	nop
 80079b4:	e002      	b.n	80079bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80079b6:	bf00      	nop
 80079b8:	e000      	b.n	80079bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80079ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10d      	bne.n	80079de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80079c2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6819      	ldr	r1, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	430b      	orrs	r3, r1
 80079d8:	4939      	ldr	r1, [pc, #228]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d167      	bne.n	8007ab4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80079e4:	4b36      	ldr	r3, [pc, #216]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a35      	ldr	r2, [pc, #212]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f0:	f7fd f88a 	bl	8004b08 <HAL_GetTick>
 80079f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80079f6:	e009      	b.n	8007a0c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80079f8:	f7fd f886 	bl	8004b08 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d902      	bls.n	8007a0c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	73fb      	strb	r3, [r7, #15]
        break;
 8007a0a:	e005      	b.n	8007a18 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1ef      	bne.n	80079f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d14a      	bne.n	8007ab4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d111      	bne.n	8007a48 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007a24:	4b26      	ldr	r3, [pc, #152]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6892      	ldr	r2, [r2, #8]
 8007a34:	0211      	lsls	r1, r2, #8
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	68d2      	ldr	r2, [r2, #12]
 8007a3a:	0912      	lsrs	r2, r2, #4
 8007a3c:	0452      	lsls	r2, r2, #17
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	491f      	ldr	r1, [pc, #124]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	614b      	str	r3, [r1, #20]
 8007a46:	e011      	b.n	8007a6c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007a48:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007a50:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6892      	ldr	r2, [r2, #8]
 8007a58:	0211      	lsls	r1, r2, #8
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6912      	ldr	r2, [r2, #16]
 8007a5e:	0852      	lsrs	r2, r2, #1
 8007a60:	3a01      	subs	r2, #1
 8007a62:	0652      	lsls	r2, r2, #25
 8007a64:	430a      	orrs	r2, r1
 8007a66:	4916      	ldr	r1, [pc, #88]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007a6c:	4b14      	ldr	r3, [pc, #80]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a13      	ldr	r2, [pc, #76]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a78:	f7fd f846 	bl	8004b08 <HAL_GetTick>
 8007a7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007a7e:	e009      	b.n	8007a94 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007a80:	f7fd f842 	bl	8004b08 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d902      	bls.n	8007a94 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	73fb      	strb	r3, [r7, #15]
          break;
 8007a92:	e005      	b.n	8007aa0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007a94:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0ef      	beq.n	8007a80 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007aa6:	4b06      	ldr	r3, [pc, #24]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	4904      	ldr	r1, [pc, #16]	@ (8007ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	40021000 	.word	0x40021000

08007ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e0be      	b.n	8007c54 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d108      	bne.n	8007af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ae6:	d009      	beq.n	8007afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	61da      	str	r2, [r3, #28]
 8007aee:	e005      	b.n	8007afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d106      	bne.n	8007b16 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7fa fc55 	bl	80023c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2202      	movs	r2, #2
 8007b1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b2c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b36:	d902      	bls.n	8007b3e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	e002      	b.n	8007b44 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b42:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007b4c:	d007      	beq.n	8007b5e <HAL_SPI_Init+0x9a>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b56:	d002      	beq.n	8007b5e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba0:	ea42 0103 	orr.w	r1, r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bbc:	d11b      	bne.n	8007bf6 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10b      	bne.n	8007bde <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007bce:	d903      	bls.n	8007bd8 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007bd6:	e002      	b.n	8007bde <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d107      	bne.n	8007bf6 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bf4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	0c1b      	lsrs	r3, r3, #16
 8007bfc:	f003 0204 	and.w	r2, r3, #4
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c04:	f003 0310 	and.w	r3, r3, #16
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c0e:	f003 0308 	and.w	r3, r3, #8
 8007c12:	431a      	orrs	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007c1c:	ea42 0103 	orr.w	r1, r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c36:	d105      	bne.n	8007c44 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	b292      	uxth	r2, r2
 8007c42:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e01a      	b.n	8007ca4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2202      	movs	r2, #2
 8007c72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c84:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7fa fbde 	bl	8002448 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08a      	sub	sp, #40	@ 0x28
 8007cb0:	af02      	add	r7, sp, #8
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	603b      	str	r3, [r7, #0]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	617b      	str	r3, [r7, #20]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d001      	beq.n	8007cd4 <HAL_SPI_Receive+0x28>
  {
    return HAL_BUSY;
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e1e0      	b.n	8008096 <HAL_SPI_Receive+0x3ea>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cdc:	d112      	bne.n	8007d04 <HAL_SPI_Receive+0x58>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10e      	bne.n	8007d04 <HAL_SPI_Receive+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2204      	movs	r2, #4
 8007cea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007cee:	88fa      	ldrh	r2, [r7, #6]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	68b9      	ldr	r1, [r7, #8]
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f9cf 	bl	800809e <HAL_SPI_TransmitReceive>
 8007d00:	4603      	mov	r3, r0
 8007d02:	e1c8      	b.n	8008096 <HAL_SPI_Receive+0x3ea>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d04:	f7fc ff00 	bl	8004b08 <HAL_GetTick>
 8007d08:	61f8      	str	r0, [r7, #28]

  if ((pData == NULL) || (Size == 0U))
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <HAL_SPI_Receive+0x6a>
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_SPI_Receive+0x6e>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e1bd      	b.n	8008096 <HAL_SPI_Receive+0x3ea>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_SPI_Receive+0x7c>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e1b6      	b.n	8008096 <HAL_SPI_Receive+0x3ea>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2204      	movs	r2, #4
 8007d34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	88fa      	ldrh	r2, [r7, #6]
 8007d48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d7a:	d118      	bne.n	8007dae <HAL_SPI_Receive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d9a:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007db6:	d908      	bls.n	8007dca <HAL_SPI_Receive+0x11e>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007dc6:	605a      	str	r2, [r3, #4]
 8007dc8:	e007      	b.n	8007dda <HAL_SPI_Receive+0x12e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007dd8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007de2:	d10f      	bne.n	8007e04 <HAL_SPI_Receive+0x158>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007df2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007e02:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e0e:	2b40      	cmp	r3, #64	@ 0x40
 8007e10:	d007      	beq.n	8007e22 <HAL_SPI_Receive+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e2a:	d875      	bhi.n	8007f18 <HAL_SPI_Receive+0x26c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007e2c:	e037      	b.n	8007e9e <HAL_SPI_Receive+0x1f2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d117      	bne.n	8007e6c <HAL_SPI_Receive+0x1c0>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f103 020c 	add.w	r2, r3, #12
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e48:	7812      	ldrb	r2, [r2, #0]
 8007e4a:	b2d2      	uxtb	r2, r2
 8007e4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	3b01      	subs	r3, #1
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007e6a:	e018      	b.n	8007e9e <HAL_SPI_Receive+0x1f2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e6c:	f7fc fe4c 	bl	8004b08 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d803      	bhi.n	8007e84 <HAL_SPI_Receive+0x1d8>
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e82:	d102      	bne.n	8007e8a <HAL_SPI_Receive+0x1de>
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <HAL_SPI_Receive+0x1f2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e0fb      	b.n	8008096 <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1c1      	bne.n	8007e2e <HAL_SPI_Receive+0x182>
 8007eaa:	e03b      	b.n	8007f24 <HAL_SPI_Receive+0x278>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d115      	bne.n	8007ee6 <HAL_SPI_Receive+0x23a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec4:	b292      	uxth	r2, r2
 8007ec6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ecc:	1c9a      	adds	r2, r3, #2
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007ee4:	e018      	b.n	8007f18 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ee6:	f7fc fe0f 	bl	8004b08 <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d803      	bhi.n	8007efe <HAL_SPI_Receive+0x252>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d102      	bne.n	8007f04 <HAL_SPI_Receive+0x258>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d109      	bne.n	8007f18 <HAL_SPI_Receive+0x26c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e0be      	b.n	8008096 <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1c3      	bne.n	8007eac <HAL_SPI_Receive+0x200>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f2c:	f040 8087 	bne.w	800803e <HAL_SPI_Receive+0x392>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f3e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2201      	movs	r2, #1
 8007f48:	2101      	movs	r1, #1
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f001 fa0c 	bl	8009368 <SPI_WaitFlagStateUntilTimeout>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      __HAL_UNLOCK(hspi);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e099      	b.n	8008096 <HAL_SPI_Receive+0x3ea>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f6a:	d907      	bls.n	8007f7c <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f76:	b292      	uxth	r2, r2
 8007f78:	801a      	strh	r2, [r3, #0]
 8007f7a:	e008      	b.n	8007f8e <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f103 020c 	add.w	r2, r3, #12
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f88:	7812      	ldrb	r2, [r2, #0]
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2201      	movs	r2, #1
 8007f96:	2101      	movs	r1, #1
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f001 f9e5 	bl	8009368 <SPI_WaitFlagStateUntilTimeout>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00f      	beq.n	8007fc4 <HAL_SPI_Receive+0x318>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fa8:	f043 0202 	orr.w	r2, r3, #2
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e068      	b.n	8008096 <HAL_SPI_Receive+0x3ea>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007fcc:	d105      	bne.n	8007fda <HAL_SPI_Receive+0x32e>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	e031      	b.n	800803e <HAL_SPI_Receive+0x392>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	330c      	adds	r3, #12
 8007fe0:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007fea:	7cfb      	ldrb	r3, [r7, #19]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ff4:	d123      	bne.n	800803e <HAL_SPI_Receive+0x392>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d11f      	bne.n	800803e <HAL_SPI_Receive+0x392>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2201      	movs	r2, #1
 8008006:	2101      	movs	r1, #1
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f001 f9ad 	bl	8009368 <SPI_WaitFlagStateUntilTimeout>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00f      	beq.n	8008034 <HAL_SPI_Receive+0x388>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008018:	f043 0202 	orr.w	r2, r3, #2
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e030      	b.n	8008096 <HAL_SPI_Receive+0x3ea>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800803c:	7cfb      	ldrb	r3, [r7, #19]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800803e:	69fa      	ldr	r2, [r7, #28]
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f001 faae 	bl	80095a4 <SPI_EndRxTransaction>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <HAL_SPI_Receive+0x3a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 0310 	and.w	r3, r3, #16
 800805e:	2b10      	cmp	r3, #16
 8008060:	d10a      	bne.n	8008078 <HAL_SPI_Receive+0x3cc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008066:	f043 0202 	orr.w	r2, r3, #2
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008076:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <HAL_SPI_Receive+0x3e8>
  {
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e000      	b.n	8008096 <HAL_SPI_Receive+0x3ea>
  }
  else
  {
    return HAL_OK;
 8008094:	2300      	movs	r3, #0
  }
}
 8008096:	4618      	mov	r0, r3
 8008098:	3720      	adds	r7, #32
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b090      	sub	sp, #64	@ 0x40
 80080a2:	af02      	add	r7, sp, #8
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
 80080aa:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80080b4:	2301      	movs	r3, #1
 80080b6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080b8:	f7fc fd26 	bl	8004b08 <HAL_GetTick>
 80080bc:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80080c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  tmp_mode            = hspi->Init.Mode;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  initial_TxXferCount = Size;
 80080ce:	887b      	ldrh	r3, [r7, #2]
 80080d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 80080d2:	887b      	ldrh	r3, [r7, #2]
 80080d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	623b      	str	r3, [r7, #32]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	61fb      	str	r3, [r7, #28]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80080e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d00d      	beq.n	800810a <HAL_SPI_TransmitReceive+0x6c>
 80080ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080f4:	d107      	bne.n	8008106 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <HAL_SPI_TransmitReceive+0x68>
 80080fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008102:	2b04      	cmp	r3, #4
 8008104:	d001      	beq.n	800810a <HAL_SPI_TransmitReceive+0x6c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008106:	2302      	movs	r3, #2
 8008108:	e30f      	b.n	800872a <HAL_SPI_TransmitReceive+0x68c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <HAL_SPI_TransmitReceive+0x7e>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <HAL_SPI_TransmitReceive+0x7e>
 8008116:	887b      	ldrh	r3, [r7, #2]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e304      	b.n	800872a <HAL_SPI_TransmitReceive+0x68c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008126:	2b01      	cmp	r3, #1
 8008128:	d101      	bne.n	800812e <HAL_SPI_TransmitReceive+0x90>
 800812a:	2302      	movs	r3, #2
 800812c:	e2fd      	b.n	800872a <HAL_SPI_TransmitReceive+0x68c>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b04      	cmp	r3, #4
 8008140:	d003      	beq.n	800814a <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2205      	movs	r2, #5
 8008146:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	887a      	ldrh	r2, [r7, #2]
 800815a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	887a      	ldrh	r2, [r7, #2]
 8008162:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	887a      	ldrh	r2, [r7, #2]
 8008170:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	887a      	ldrh	r2, [r7, #2]
 8008176:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800818c:	d10f      	bne.n	80081ae <HAL_SPI_TransmitReceive+0x110>
  {
    SPI_RESET_CRC(hspi);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80081ac:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081b6:	d802      	bhi.n	80081be <HAL_SPI_TransmitReceive+0x120>
 80081b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d908      	bls.n	80081d0 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80081cc:	605a      	str	r2, [r3, #4]
 80081ce:	e007      	b.n	80081e0 <HAL_SPI_TransmitReceive+0x142>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80081de:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ea:	2b40      	cmp	r3, #64	@ 0x40
 80081ec:	d007      	beq.n	80081fe <HAL_SPI_TransmitReceive+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008206:	f240 80d0 	bls.w	80083aa <HAL_SPI_TransmitReceive+0x30c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_SPI_TransmitReceive+0x17c>
 8008212:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008214:	2b01      	cmp	r3, #1
 8008216:	f040 80ba 	bne.w	800838e <HAL_SPI_TransmitReceive+0x2f0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821e:	881a      	ldrh	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800822a:	1c9a      	adds	r2, r3, #2
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008242:	b29b      	uxth	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	f040 80a2 	bne.w	800838e <HAL_SPI_TransmitReceive+0x2f0>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008252:	f040 809c 	bne.w	800838e <HAL_SPI_TransmitReceive+0x2f0>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10c      	bne.n	800827a <HAL_SPI_TransmitReceive+0x1dc>
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	f003 0308 	and.w	r3, r3, #8
 8008266:	2b00      	cmp	r3, #0
 8008268:	d007      	beq.n	800827a <HAL_SPI_TransmitReceive+0x1dc>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008278:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008288:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800828a:	e080      	b.n	800838e <HAL_SPI_TransmitReceive+0x2f0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b02      	cmp	r3, #2
 8008298:	d13f      	bne.n	800831a <HAL_SPI_TransmitReceive+0x27c>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800829e:	b29b      	uxth	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d03a      	beq.n	800831a <HAL_SPI_TransmitReceive+0x27c>
 80082a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d137      	bne.n	800831a <HAL_SPI_TransmitReceive+0x27c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ae:	881a      	ldrh	r2, [r3, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ba:	1c9a      	adds	r2, r3, #2
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11e      	bne.n	800831a <HAL_SPI_TransmitReceive+0x27c>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082e4:	d119      	bne.n	800831a <HAL_SPI_TransmitReceive+0x27c>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10c      	bne.n	800830a <HAL_SPI_TransmitReceive+0x26c>
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f003 0308 	and.w	r3, r3, #8
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d007      	beq.n	800830a <HAL_SPI_TransmitReceive+0x26c>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008308:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008318:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b01      	cmp	r3, #1
 8008326:	d11c      	bne.n	8008362 <HAL_SPI_TransmitReceive+0x2c4>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800832e:	b29b      	uxth	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d016      	beq.n	8008362 <HAL_SPI_TransmitReceive+0x2c4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833e:	b292      	uxth	r2, r2
 8008340:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008346:	1c9a      	adds	r2, r3, #2
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008352:	b29b      	uxth	r3, r3
 8008354:	3b01      	subs	r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800835e:	2301      	movs	r3, #1
 8008360:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008362:	f7fc fbd1 	bl	8004b08 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800836e:	429a      	cmp	r2, r3
 8008370:	d80d      	bhi.n	800838e <HAL_SPI_TransmitReceive+0x2f0>
 8008372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d009      	beq.n	800838e <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e1cd      	b.n	800872a <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008392:	b29b      	uxth	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	f47f af79 	bne.w	800828c <HAL_SPI_TransmitReceive+0x1ee>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f47f af72 	bne.w	800828c <HAL_SPI_TransmitReceive+0x1ee>
 80083a8:	e12f      	b.n	800860a <HAL_SPI_TransmitReceive+0x56c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_SPI_TransmitReceive+0x31c>
 80083b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	f040 811b 	bne.w	80085f0 <HAL_SPI_TransmitReceive+0x552>
    {
      if (hspi->TxXferCount > 1U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083be:	b29b      	uxth	r3, r3
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d912      	bls.n	80083ea <HAL_SPI_TransmitReceive+0x34c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c8:	881a      	ldrh	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d4:	1c9a      	adds	r2, r3, #2
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083de:	b29b      	uxth	r3, r3
 80083e0:	3b02      	subs	r3, #2
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80083e8:	e102      	b.n	80085f0 <HAL_SPI_TransmitReceive+0x552>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	330c      	adds	r3, #12
 80083f4:	7812      	ldrb	r2, [r2, #0]
 80083f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	f040 80ea 	bne.w	80085f0 <HAL_SPI_TransmitReceive+0x552>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008424:	f040 80e4 	bne.w	80085f0 <HAL_SPI_TransmitReceive+0x552>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	f003 0304 	and.w	r3, r3, #4
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10c      	bne.n	800844c <HAL_SPI_TransmitReceive+0x3ae>
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b00      	cmp	r3, #0
 800843a:	d007      	beq.n	800844c <HAL_SPI_TransmitReceive+0x3ae>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800844a:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800845a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800845c:	e0c8      	b.n	80085f0 <HAL_SPI_TransmitReceive+0x552>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b02      	cmp	r3, #2
 800846a:	d158      	bne.n	800851e <HAL_SPI_TransmitReceive+0x480>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008470:	b29b      	uxth	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d053      	beq.n	800851e <HAL_SPI_TransmitReceive+0x480>
 8008476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008478:	2b01      	cmp	r3, #1
 800847a:	d150      	bne.n	800851e <HAL_SPI_TransmitReceive+0x480>
      {
        if (hspi->TxXferCount > 1U)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008480:	b29b      	uxth	r3, r3
 8008482:	2b01      	cmp	r3, #1
 8008484:	d912      	bls.n	80084ac <HAL_SPI_TransmitReceive+0x40e>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848a:	881a      	ldrh	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008496:	1c9a      	adds	r2, r3, #2
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	3b02      	subs	r3, #2
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80084aa:	e012      	b.n	80084d2 <HAL_SPI_TransmitReceive+0x434>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	330c      	adds	r3, #12
 80084b6:	7812      	ldrb	r2, [r2, #0]
 80084b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	3b01      	subs	r3, #1
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084da:	b29b      	uxth	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d11e      	bne.n	800851e <HAL_SPI_TransmitReceive+0x480>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084e8:	d119      	bne.n	800851e <HAL_SPI_TransmitReceive+0x480>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10c      	bne.n	800850e <HAL_SPI_TransmitReceive+0x470>
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f003 0308 	and.w	r3, r3, #8
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <HAL_SPI_TransmitReceive+0x470>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800850c:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800851c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b01      	cmp	r3, #1
 800852a:	d148      	bne.n	80085be <HAL_SPI_TransmitReceive+0x520>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d042      	beq.n	80085be <HAL_SPI_TransmitReceive+0x520>
      {
        if (hspi->RxXferCount > 1U)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800853e:	b29b      	uxth	r3, r3
 8008540:	2b01      	cmp	r3, #1
 8008542:	d923      	bls.n	800858c <HAL_SPI_TransmitReceive+0x4ee>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854e:	b292      	uxth	r2, r2
 8008550:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008556:	1c9a      	adds	r2, r3, #2
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008562:	b29b      	uxth	r3, r3
 8008564:	3b02      	subs	r3, #2
 8008566:	b29a      	uxth	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008574:	b29b      	uxth	r3, r3
 8008576:	2b01      	cmp	r3, #1
 8008578:	d81f      	bhi.n	80085ba <HAL_SPI_TransmitReceive+0x51c>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008588:	605a      	str	r2, [r3, #4]
 800858a:	e016      	b.n	80085ba <HAL_SPI_TransmitReceive+0x51c>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f103 020c 	add.w	r2, r3, #12
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008598:	7812      	ldrb	r2, [r2, #0]
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085ba:	2301      	movs	r3, #1
 80085bc:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085be:	f7fc faa3 	bl	8004b08 <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d803      	bhi.n	80085d6 <HAL_SPI_TransmitReceive+0x538>
 80085ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d4:	d102      	bne.n	80085dc <HAL_SPI_TransmitReceive+0x53e>
 80085d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d109      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x552>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e09c      	b.n	800872a <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f47f af31 	bne.w	800845e <HAL_SPI_TransmitReceive+0x3c0>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008602:	b29b      	uxth	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	f47f af2a 	bne.w	800845e <HAL_SPI_TransmitReceive+0x3c0>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008612:	d152      	bne.n	80086ba <HAL_SPI_TransmitReceive+0x61c>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800861a:	2201      	movs	r2, #1
 800861c:	2101      	movs	r1, #1
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 fea2 	bl	8009368 <SPI_WaitFlagStateUntilTimeout>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00f      	beq.n	800864a <HAL_SPI_TransmitReceive+0x5ac>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800862e:	f043 0202 	orr.w	r2, r3, #2
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e06f      	b.n	800872a <HAL_SPI_TransmitReceive+0x68c>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008652:	d105      	bne.n	8008660 <HAL_SPI_TransmitReceive+0x5c2>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	e02c      	b.n	80086ba <HAL_SPI_TransmitReceive+0x61c>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	330c      	adds	r3, #12
 8008666:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	b2db      	uxtb	r3, r3
 800866e:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008670:	7cfb      	ldrb	r3, [r7, #19]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008676:	2b02      	cmp	r3, #2
 8008678:	d11f      	bne.n	80086ba <HAL_SPI_TransmitReceive+0x61c>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008680:	2201      	movs	r2, #1
 8008682:	2101      	movs	r1, #1
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 fe6f 	bl	8009368 <SPI_WaitFlagStateUntilTimeout>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00f      	beq.n	80086b0 <HAL_SPI_TransmitReceive+0x612>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008694:	f043 0202 	orr.w	r2, r3, #2
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e03c      	b.n	800872a <HAL_SPI_TransmitReceive+0x68c>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80086b8:	7cfb      	ldrb	r3, [r7, #19]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f003 0310 	and.w	r3, r3, #16
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	d110      	bne.n	80086ea <HAL_SPI_TransmitReceive+0x64c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086cc:	f043 0202 	orr.w	r2, r3, #2
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80086dc:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e01f      	b.n	800872a <HAL_SPI_TransmitReceive+0x68c>
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 ffb0 	bl	8009654 <SPI_EndRxTxTransaction>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d008      	beq.n	800870c <HAL_SPI_TransmitReceive+0x66e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2220      	movs	r2, #32
 80086fe:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e00e      	b.n	800872a <HAL_SPI_TransmitReceive+0x68c>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <HAL_SPI_TransmitReceive+0x68a>
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e000      	b.n	800872a <HAL_SPI_TransmitReceive+0x68c>
  }
  else
  {
    return HAL_OK;
 8008728:	2300      	movs	r3, #0
  }
}
 800872a:	4618      	mov	r0, r3
 800872c:	3738      	adds	r7, #56	@ 0x38
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <HAL_SPI_Transmit_IT+0x1a>
 8008748:	88fb      	ldrh	r3, [r7, #6]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e082      	b.n	8008858 <HAL_SPI_Transmit_IT+0x124>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b01      	cmp	r3, #1
 800875c:	d001      	beq.n	8008762 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800875e:	2302      	movs	r3, #2
 8008760:	e07a      	b.n	8008858 <HAL_SPI_Transmit_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008768:	2b01      	cmp	r3, #1
 800876a:	d101      	bne.n	8008770 <HAL_SPI_Transmit_IT+0x3c>
 800876c:	2302      	movs	r3, #2
 800876e:	e073      	b.n	8008858 <HAL_SPI_Transmit_IT+0x124>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2203      	movs	r2, #3
 800877c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	88fa      	ldrh	r2, [r7, #6]
 8008790:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	88fa      	ldrh	r2, [r7, #6]
 8008796:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80087bc:	d903      	bls.n	80087c6 <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4a28      	ldr	r2, [pc, #160]	@ (8008864 <HAL_SPI_Transmit_IT+0x130>)
 80087c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80087c4:	e002      	b.n	80087cc <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4a27      	ldr	r2, [pc, #156]	@ (8008868 <HAL_SPI_Transmit_IT+0x134>)
 80087ca:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087d4:	d10f      	bne.n	80087f6 <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087f4:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087fe:	d10f      	bne.n	8008820 <HAL_SPI_Transmit_IT+0xec>
  {
    SPI_RESET_CRC(hspi);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800881e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800882a:	2b40      	cmp	r3, #64	@ 0x40
 800882c:	d007      	beq.n	800883e <HAL_SPI_Transmit_IT+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800883c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8008854:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	08009309 	.word	0x08009309
 8008868:	080092a9 	.word	0x080092a9

0800886c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	4613      	mov	r3, r2
 8008878:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b01      	cmp	r3, #1
 8008884:	d001      	beq.n	800888a <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8008886:	2302      	movs	r3, #2
 8008888:	e0ba      	b.n	8008a00 <HAL_SPI_Receive_IT+0x194>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d110      	bne.n	80088b4 <HAL_SPI_Receive_IT+0x48>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800889a:	d10b      	bne.n	80088b4 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2204      	movs	r2, #4
 80088a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80088a4:	88fb      	ldrh	r3, [r7, #6]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 f8b0 	bl	8008a10 <HAL_SPI_TransmitReceive_IT>
 80088b0:	4603      	mov	r3, r0
 80088b2:	e0a5      	b.n	8008a00 <HAL_SPI_Receive_IT+0x194>
  }


  if ((pData == NULL) || (Size == 0U))
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <HAL_SPI_Receive_IT+0x54>
 80088ba:	88fb      	ldrh	r3, [r7, #6]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e09d      	b.n	8008a00 <HAL_SPI_Receive_IT+0x194>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d101      	bne.n	80088d2 <HAL_SPI_Receive_IT+0x66>
 80088ce:	2302      	movs	r3, #2
 80088d0:	e096      	b.n	8008a00 <HAL_SPI_Receive_IT+0x194>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2204      	movs	r2, #4
 80088de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	88fa      	ldrh	r2, [r7, #6]
 80088f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	88fa      	ldrh	r2, [r7, #6]
 80088fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800891e:	d90b      	bls.n	8008938 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800892e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4a35      	ldr	r2, [pc, #212]	@ (8008a08 <HAL_SPI_Receive_IT+0x19c>)
 8008934:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008936:	e00a      	b.n	800894e <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008946:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4a30      	ldr	r2, [pc, #192]	@ (8008a0c <HAL_SPI_Receive_IT+0x1a0>)
 800894c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008956:	d10f      	bne.n	8008978 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008966:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008976:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800897c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008980:	d11f      	bne.n	80089c2 <HAL_SPI_Receive_IT+0x156>
  {
    hspi->CRCSize = 1U;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008990:	d806      	bhi.n	80089a0 <HAL_SPI_Receive_IT+0x134>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008996:	2b02      	cmp	r3, #2
 8008998:	d102      	bne.n	80089a0 <HAL_SPI_Receive_IT+0x134>
    {
      hspi->CRCSize = 2U;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2202      	movs	r2, #2
 800899e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	e002      	b.n	80089c8 <HAL_SPI_Receive_IT+0x15c>
  }
  else
  {
    hspi->CRCSize = 0U;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d2:	2b40      	cmp	r3, #64	@ 0x40
 80089d4:	d007      	beq.n	80089e6 <HAL_SPI_Receive_IT+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089e4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80089fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	08009221 	.word	0x08009221
 8008a0c:	08009161 	.word	0x08009161

08008a10 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a24:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d00c      	beq.n	8008a4c <HAL_SPI_TransmitReceive_IT+0x3c>
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a38:	d106      	bne.n	8008a48 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d102      	bne.n	8008a48 <HAL_SPI_TransmitReceive_IT+0x38>
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d001      	beq.n	8008a4c <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e0a5      	b.n	8008b98 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d005      	beq.n	8008a5e <HAL_SPI_TransmitReceive_IT+0x4e>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <HAL_SPI_TransmitReceive_IT+0x4e>
 8008a58:	887b      	ldrh	r3, [r7, #2]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e09a      	b.n	8008b98 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d101      	bne.n	8008a70 <HAL_SPI_TransmitReceive_IT+0x60>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e093      	b.n	8008b98 <HAL_SPI_TransmitReceive_IT+0x188>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d003      	beq.n	8008a8c <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2205      	movs	r2, #5
 8008a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	887a      	ldrh	r2, [r7, #2]
 8008a9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	887a      	ldrh	r2, [r7, #2]
 8008aa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	887a      	ldrh	r2, [r7, #2]
 8008aae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	887a      	ldrh	r2, [r7, #2]
 8008ab6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ac2:	d906      	bls.n	8008ad2 <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4a37      	ldr	r2, [pc, #220]	@ (8008ba4 <HAL_SPI_TransmitReceive_IT+0x194>)
 8008ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	4a36      	ldr	r2, [pc, #216]	@ (8008ba8 <HAL_SPI_TransmitReceive_IT+0x198>)
 8008ace:	651a      	str	r2, [r3, #80]	@ 0x50
 8008ad0:	e005      	b.n	8008ade <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4a35      	ldr	r2, [pc, #212]	@ (8008bac <HAL_SPI_TransmitReceive_IT+0x19c>)
 8008ad6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4a35      	ldr	r2, [pc, #212]	@ (8008bb0 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8008adc:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ae6:	d11f      	bne.n	8008b28 <HAL_SPI_TransmitReceive_IT+0x118>
  {
    hspi->CRCSize = 1U;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008af6:	d806      	bhi.n	8008b06 <HAL_SPI_TransmitReceive_IT+0xf6>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d102      	bne.n	8008b06 <HAL_SPI_TransmitReceive_IT+0xf6>
    {
      hspi->CRCSize = 2U;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2202      	movs	r2, #2
 8008b04:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	e002      	b.n	8008b2e <HAL_SPI_TransmitReceive_IT+0x11e>
  }
  else
  {
    hspi->CRCSize = 0U;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b36:	d802      	bhi.n	8008b3e <HAL_SPI_TransmitReceive_IT+0x12e>
 8008b38:	887b      	ldrh	r3, [r7, #2]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d908      	bls.n	8008b50 <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	e007      	b.n	8008b60 <HAL_SPI_TransmitReceive_IT+0x150>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008b5e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b6a:	2b40      	cmp	r3, #64	@ 0x40
 8008b6c:	d007      	beq.n	8008b7e <HAL_SPI_TransmitReceive_IT+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b7c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8008b94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	371c      	adds	r7, #28
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	08008fe9 	.word	0x08008fe9
 8008ba8:	08009099 	.word	0x08009099
 8008bac:	08008df1 	.word	0x08008df1
 8008bb0:	08008f2d 	.word	0x08008f2d

08008bb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10e      	bne.n	8008bf4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d009      	beq.n	8008bf4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d004      	beq.n	8008bf4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	4798      	blx	r3
    return;
 8008bf2:	e0ce      	b.n	8008d92 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	f003 0302 	and.w	r3, r3, #2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <HAL_SPI_IRQHandler+0x5e>
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d004      	beq.n	8008c12 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	4798      	blx	r3
    return;
 8008c10:	e0bf      	b.n	8008d92 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	f003 0320 	and.w	r3, r3, #32
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10a      	bne.n	8008c32 <HAL_SPI_IRQHandler+0x7e>
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d105      	bne.n	8008c32 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 80b0 	beq.w	8008d92 <HAL_SPI_IRQHandler+0x1de>
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	f003 0320 	and.w	r3, r3, #32
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f000 80aa 	beq.w	8008d92 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d023      	beq.n	8008c90 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d011      	beq.n	8008c78 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c58:	f043 0204 	orr.w	r2, r3, #4
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c60:	2300      	movs	r3, #0
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	617b      	str	r3, [r7, #20]
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	e00b      	b.n	8008c90 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c78:	2300      	movs	r3, #0
 8008c7a:	613b      	str	r3, [r7, #16]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	613b      	str	r3, [r7, #16]
 8008c8c:	693b      	ldr	r3, [r7, #16]
        return;
 8008c8e:	e080      	b.n	8008d92 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d014      	beq.n	8008cc4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c9e:	f043 0201 	orr.w	r2, r3, #1
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00c      	beq.n	8008ce8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cd2:	f043 0208 	orr.w	r2, r3, #8
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60bb      	str	r3, [r7, #8]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	60bb      	str	r3, [r7, #8]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d04f      	beq.n	8008d90 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685a      	ldr	r2, [r3, #4]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008cfe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	f003 0302 	and.w	r3, r3, #2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d104      	bne.n	8008d1c <HAL_SPI_IRQHandler+0x168>
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d034      	beq.n	8008d86 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f022 0203 	bic.w	r2, r2, #3
 8008d2a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d011      	beq.n	8008d58 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d38:	4a17      	ldr	r2, [pc, #92]	@ (8008d98 <HAL_SPI_IRQHandler+0x1e4>)
 8008d3a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fc f92f 	bl	8004fa4 <HAL_DMA_Abort_IT>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d005      	beq.n	8008d58 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d016      	beq.n	8008d8e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d64:	4a0c      	ldr	r2, [pc, #48]	@ (8008d98 <HAL_SPI_IRQHandler+0x1e4>)
 8008d66:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fc f919 	bl	8004fa4 <HAL_DMA_Abort_IT>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00a      	beq.n	8008d8e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008d84:	e003      	b.n	8008d8e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f812 	bl	8008db0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008d8c:	e000      	b.n	8008d90 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008d8e:	bf00      	nop
    return;
 8008d90:	bf00      	nop
  }
}
 8008d92:	3720      	adds	r7, #32
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	08008dc5 	.word	0x08008dc5

08008d9c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f7ff ffe5 	bl	8008db0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d923      	bls.n	8008e4c <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0e:	b292      	uxth	r2, r2
 8008e10:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e16:	1c9a      	adds	r2, r3, #2
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	3b02      	subs	r3, #2
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d11f      	bne.n	8008e7a <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e48:	605a      	str	r2, [r3, #4]
 8008e4a:	e016      	b.n	8008e7a <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f103 020c 	add.w	r2, r3, #12
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e58:	7812      	ldrb	r2, [r2, #0]
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	3b01      	subs	r3, #1
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d120      	bne.n	8008ec8 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e8e:	d10b      	bne.n	8008ea8 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e9e:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8008ed0 <SPI_2linesRxISR_8BIT+0xe0>)
 8008ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8008ea6:	e00f      	b.n	8008ec8 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008eb6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d102      	bne.n	8008ec8 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fc0c 	bl	80096e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	08008ed5 	.word	0x08008ed5

08008ed4 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	330c      	adds	r3, #12
 8008ee6:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8008ef0:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ef6:	1e5a      	subs	r2, r3, #1
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10f      	bne.n	8008f24 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008f12:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d102      	bne.n	8008f24 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fbde 	bl	80096e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008f24:	bf00      	nop
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d912      	bls.n	8008f64 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f42:	881a      	ldrh	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4e:	1c9a      	adds	r2, r3, #2
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	3b02      	subs	r3, #2
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008f62:	e012      	b.n	8008f8a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	7812      	ldrb	r2, [r2, #0]
 8008f70:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	3b01      	subs	r3, #1
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d126      	bne.n	8008fe2 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f9c:	d110      	bne.n	8008fc0 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008fac:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fbc:	605a      	str	r2, [r3, #4]
      return;
 8008fbe:	e010      	b.n	8008fe2 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fce:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d102      	bne.n	8008fe2 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fb7f 	bl	80096e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68da      	ldr	r2, [r3, #12]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ffa:	b292      	uxth	r2, r2
 8008ffc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009002:	1c9a      	adds	r2, r3, #2
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800900e:	b29b      	uxth	r3, r3
 8009010:	3b01      	subs	r3, #1
 8009012:	b29a      	uxth	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009020:	b29b      	uxth	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d118      	bne.n	8009058 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800902e:	d103      	bne.n	8009038 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a0b      	ldr	r2, [pc, #44]	@ (8009060 <SPI_2linesRxISR_16BIT+0x78>)
 8009034:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8009036:	e00f      	b.n	8009058 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009046:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d102      	bne.n	8009058 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fb44 	bl	80096e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	08009065 	.word	0x08009065

08009064 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8009078:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009088:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fb28 	bl	80096e0 <SPI_CloseRxTx_ISR>
}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a4:	881a      	ldrh	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b0:	1c9a      	adds	r2, r3, #2
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	3b01      	subs	r3, #1
 80090be:	b29a      	uxth	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d126      	bne.n	800911c <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090d6:	d110      	bne.n	80090fa <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090e6:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80090f6:	605a      	str	r2, [r3, #4]
      return;
 80090f8:	e010      	b.n	800911c <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009108:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009110:	b29b      	uxth	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d102      	bne.n	800911c <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fae2 	bl	80096e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b084      	sub	sp, #16
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	330c      	adds	r3, #12
 8009134:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 800913e:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009144:	1e5a      	subs	r2, r3, #1
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800914e:	2b00      	cmp	r3, #0
 8009150:	d102      	bne.n	8009158 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fb20 	bl	8009798 <SPI_CloseRx_ISR>
  }
}
 8009158:	bf00      	nop
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f103 020c 	add.w	r2, r3, #12
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009174:	7812      	ldrb	r2, [r2, #0]
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800918a:	b29b      	uxth	r3, r3
 800918c:	3b01      	subs	r3, #1
 800918e:	b29a      	uxth	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800919c:	b29b      	uxth	r3, r3
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d10c      	bne.n	80091bc <SPI_RxISR_8BIT+0x5c>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091aa:	d107      	bne.n	80091bc <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80091ba:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10b      	bne.n	80091e0 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091d0:	d103      	bne.n	80091da <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a04      	ldr	r2, [pc, #16]	@ (80091e8 <SPI_RxISR_8BIT+0x88>)
 80091d6:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 80091d8:	e002      	b.n	80091e0 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fadc 	bl	8009798 <SPI_CloseRx_ISR>
  }
}
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	08009123 	.word	0x08009123

080091ec <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8009200:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009210:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fac0 	bl	8009798 <SPI_CloseRx_ISR>
}
 8009218:	bf00      	nop
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009232:	b292      	uxth	r2, r2
 8009234:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800923a:	1c9a      	adds	r2, r3, #2
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009246:	b29b      	uxth	r3, r3
 8009248:	3b01      	subs	r3, #1
 800924a:	b29a      	uxth	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009258:	b29b      	uxth	r3, r3
 800925a:	2b01      	cmp	r3, #1
 800925c:	d10c      	bne.n	8009278 <SPI_RxISR_16BIT+0x58>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009266:	d107      	bne.n	8009278 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009276:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800927e:	b29b      	uxth	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10b      	bne.n	800929c <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009288:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800928c:	d103      	bne.n	8009296 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a04      	ldr	r2, [pc, #16]	@ (80092a4 <SPI_RxISR_16BIT+0x84>)
 8009292:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8009294:	e002      	b.n	800929c <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fa7e 	bl	8009798 <SPI_CloseRx_ISR>
  }
}
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	080091ed 	.word	0x080091ed

080092a8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	330c      	adds	r3, #12
 80092ba:	7812      	ldrb	r2, [r2, #0]
 80092bc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	3b01      	subs	r3, #1
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092da:	b29b      	uxth	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10f      	bne.n	8009300 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092e8:	d107      	bne.n	80092fa <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092f8:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fa92 	bl	8009824 <SPI_CloseTx_ISR>
  }
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009314:	881a      	ldrh	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009320:	1c9a      	adds	r2, r3, #2
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800932a:	b29b      	uxth	r3, r3
 800932c:	3b01      	subs	r3, #1
 800932e:	b29a      	uxth	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009338:	b29b      	uxth	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10f      	bne.n	800935e <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009346:	d107      	bne.n	8009358 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009356:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fa63 	bl	8009824 <SPI_CloseTx_ISR>
  }
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	603b      	str	r3, [r7, #0]
 8009374:	4613      	mov	r3, r2
 8009376:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009378:	f7fb fbc6 	bl	8004b08 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009380:	1a9b      	subs	r3, r3, r2
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	4413      	add	r3, r2
 8009386:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009388:	f7fb fbbe 	bl	8004b08 <HAL_GetTick>
 800938c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800938e:	4b39      	ldr	r3, [pc, #228]	@ (8009474 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	015b      	lsls	r3, r3, #5
 8009394:	0d1b      	lsrs	r3, r3, #20
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	fb02 f303 	mul.w	r3, r2, r3
 800939c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800939e:	e054      	b.n	800944a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a6:	d050      	beq.n	800944a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093a8:	f7fb fbae 	bl	8004b08 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	69fa      	ldr	r2, [r7, #28]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d902      	bls.n	80093be <SPI_WaitFlagStateUntilTimeout+0x56>
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d13d      	bne.n	800943a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093d6:	d111      	bne.n	80093fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093e0:	d004      	beq.n	80093ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093ea:	d107      	bne.n	80093fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009404:	d10f      	bne.n	8009426 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009424:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e017      	b.n	800946a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	3b01      	subs	r3, #1
 8009448:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	4013      	ands	r3, r2
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	429a      	cmp	r2, r3
 8009458:	bf0c      	ite	eq
 800945a:	2301      	moveq	r3, #1
 800945c:	2300      	movne	r3, #0
 800945e:	b2db      	uxtb	r3, r3
 8009460:	461a      	mov	r2, r3
 8009462:	79fb      	ldrb	r3, [r7, #7]
 8009464:	429a      	cmp	r2, r3
 8009466:	d19b      	bne.n	80093a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3720      	adds	r7, #32
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	20000044 	.word	0x20000044

08009478 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08a      	sub	sp, #40	@ 0x28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800948a:	f7fb fb3d 	bl	8004b08 <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009492:	1a9b      	subs	r3, r3, r2
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	4413      	add	r3, r2
 8009498:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800949a:	f7fb fb35 	bl	8004b08 <HAL_GetTick>
 800949e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	330c      	adds	r3, #12
 80094a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80094a8:	4b3d      	ldr	r3, [pc, #244]	@ (80095a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	4613      	mov	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	00da      	lsls	r2, r3, #3
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	0d1b      	lsrs	r3, r3, #20
 80094b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094ba:	fb02 f303 	mul.w	r3, r2, r3
 80094be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80094c0:	e060      	b.n	8009584 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80094c8:	d107      	bne.n	80094da <SPI_WaitFifoStateUntilTimeout+0x62>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d104      	bne.n	80094da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e0:	d050      	beq.n	8009584 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094e2:	f7fb fb11 	bl	8004b08 <HAL_GetTick>
 80094e6:	4602      	mov	r2, r0
 80094e8:	6a3b      	ldr	r3, [r7, #32]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d902      	bls.n	80094f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80094f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d13d      	bne.n	8009574 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009506:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009510:	d111      	bne.n	8009536 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800951a:	d004      	beq.n	8009526 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009524:	d107      	bne.n	8009536 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009534:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800953e:	d10f      	bne.n	8009560 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800954e:	601a      	str	r2, [r3, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800955e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	e010      	b.n	8009596 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800957a:	2300      	movs	r3, #0
 800957c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	3b01      	subs	r3, #1
 8009582:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689a      	ldr	r2, [r3, #8]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	4013      	ands	r3, r2
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d196      	bne.n	80094c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3728      	adds	r7, #40	@ 0x28
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20000044 	.word	0x20000044

080095a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095b8:	d111      	bne.n	80095de <SPI_EndRxTransaction+0x3a>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095c2:	d004      	beq.n	80095ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095cc:	d107      	bne.n	80095de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	2200      	movs	r2, #0
 80095e6:	2180      	movs	r1, #128	@ 0x80
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f7ff febd 	bl	8009368 <SPI_WaitFlagStateUntilTimeout>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d007      	beq.n	8009604 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095f8:	f043 0220 	orr.w	r2, r3, #32
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e023      	b.n	800964c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800960c:	d11d      	bne.n	800964a <SPI_EndRxTransaction+0xa6>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009616:	d004      	beq.n	8009622 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009620:	d113      	bne.n	800964a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2200      	movs	r2, #0
 800962a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7ff ff22 	bl	8009478 <SPI_WaitFifoStateUntilTimeout>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d007      	beq.n	800964a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800963e:	f043 0220 	orr.w	r2, r3, #32
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e000      	b.n	800964c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af02      	add	r7, sp, #8
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2200      	movs	r2, #0
 8009668:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f7ff ff03 	bl	8009478 <SPI_WaitFifoStateUntilTimeout>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d007      	beq.n	8009688 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800967c:	f043 0220 	orr.w	r2, r3, #32
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e027      	b.n	80096d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	2200      	movs	r2, #0
 8009690:	2180      	movs	r1, #128	@ 0x80
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f7ff fe68 	bl	8009368 <SPI_WaitFlagStateUntilTimeout>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d007      	beq.n	80096ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096a2:	f043 0220 	orr.w	r2, r3, #32
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e014      	b.n	80096d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f7ff fedc 	bl	8009478 <SPI_WaitFifoStateUntilTimeout>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d007      	beq.n	80096d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ca:	f043 0220 	orr.w	r2, r3, #32
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e000      	b.n	80096d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096e8:	f7fb fa0e 	bl	8004b08 <HAL_GetTick>
 80096ec:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685a      	ldr	r2, [r3, #4]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0220 	bic.w	r2, r2, #32
 80096fc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	2164      	movs	r1, #100	@ 0x64
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff ffa6 	bl	8009654 <SPI_EndRxTxTransaction>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d005      	beq.n	800971a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009712:	f043 0220 	orr.w	r2, r3, #32
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f003 0310 	and.w	r3, r3, #16
 8009724:	2b10      	cmp	r3, #16
 8009726:	d112      	bne.n	800974e <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009734:	f043 0202 	orr.w	r2, r3, #2
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8009744:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff fb32 	bl	8008db0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800974c:	e020      	b.n	8009790 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009752:	2b00      	cmp	r3, #0
 8009754:	d115      	bne.n	8009782 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b04      	cmp	r3, #4
 8009760:	d107      	bne.n	8009772 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7fa fbf2 	bl	8003f54 <HAL_SPI_RxCpltCallback>
}
 8009770:	e00e      	b.n	8009790 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff fb0e 	bl	8008d9c <HAL_SPI_TxRxCpltCallback>
}
 8009780:	e006      	b.n	8009790 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7ff fb10 	bl	8008db0 <HAL_SPI_ErrorCallback>
}
 8009790:	bf00      	nop
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80097ae:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80097b0:	f7fb f9aa 	bl	8004b08 <HAL_GetTick>
 80097b4:	4603      	mov	r3, r0
 80097b6:	461a      	mov	r2, r3
 80097b8:	2164      	movs	r1, #100	@ 0x64
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7ff fef2 	bl	80095a4 <SPI_EndRxTransaction>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d005      	beq.n	80097d2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097ca:	f043 0220 	orr.w	r2, r3, #32
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f003 0310 	and.w	r3, r3, #16
 80097e4:	2b10      	cmp	r3, #16
 80097e6:	d10e      	bne.n	8009806 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097ec:	f043 0202 	orr.w	r2, r3, #2
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80097fc:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff fad6 	bl	8008db0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009804:	e00a      	b.n	800981c <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800980a:	2b00      	cmp	r3, #0
 800980c:	d103      	bne.n	8009816 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7fa fba0 	bl	8003f54 <HAL_SPI_RxCpltCallback>
}
 8009814:	e002      	b.n	800981c <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff faca 	bl	8008db0 <HAL_SPI_ErrorCallback>
}
 800981c:	bf00      	nop
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800982c:	f7fb f96c 	bl	8004b08 <HAL_GetTick>
 8009830:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009840:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	2164      	movs	r1, #100	@ 0x64
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7ff ff04 	bl	8009654 <SPI_EndRxTxTransaction>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d005      	beq.n	800985e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009856:	f043 0220 	orr.w	r2, r3, #32
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10a      	bne.n	800987c <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009866:	2300      	movs	r3, #0
 8009868:	60bb      	str	r3, [r7, #8]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	60bb      	str	r3, [r7, #8]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	60bb      	str	r3, [r7, #8]
 800987a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f7ff fa8f 	bl	8008db0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009892:	e002      	b.n	800989a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7fa fb71 	bl	8003f7c <HAL_SPI_TxCpltCallback>
}
 800989a:	bf00      	nop
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e049      	b.n	8009948 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7f8 fddb 	bl	8002484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2202      	movs	r2, #2
 80098d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	3304      	adds	r3, #4
 80098de:	4619      	mov	r1, r3
 80098e0:	4610      	mov	r0, r2
 80098e2:	f000 fa03 	bl	8009cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b01      	cmp	r3, #1
 8009962:	d001      	beq.n	8009968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e04f      	b.n	8009a08 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f042 0201 	orr.w	r2, r2, #1
 800997e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a23      	ldr	r2, [pc, #140]	@ (8009a14 <HAL_TIM_Base_Start_IT+0xc4>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d01d      	beq.n	80099c6 <HAL_TIM_Base_Start_IT+0x76>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009992:	d018      	beq.n	80099c6 <HAL_TIM_Base_Start_IT+0x76>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a1f      	ldr	r2, [pc, #124]	@ (8009a18 <HAL_TIM_Base_Start_IT+0xc8>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d013      	beq.n	80099c6 <HAL_TIM_Base_Start_IT+0x76>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a1e      	ldr	r2, [pc, #120]	@ (8009a1c <HAL_TIM_Base_Start_IT+0xcc>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d00e      	beq.n	80099c6 <HAL_TIM_Base_Start_IT+0x76>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a1c      	ldr	r2, [pc, #112]	@ (8009a20 <HAL_TIM_Base_Start_IT+0xd0>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d009      	beq.n	80099c6 <HAL_TIM_Base_Start_IT+0x76>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a1b      	ldr	r2, [pc, #108]	@ (8009a24 <HAL_TIM_Base_Start_IT+0xd4>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d004      	beq.n	80099c6 <HAL_TIM_Base_Start_IT+0x76>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a19      	ldr	r2, [pc, #100]	@ (8009a28 <HAL_TIM_Base_Start_IT+0xd8>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d115      	bne.n	80099f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	4b17      	ldr	r3, [pc, #92]	@ (8009a2c <HAL_TIM_Base_Start_IT+0xdc>)
 80099ce:	4013      	ands	r3, r2
 80099d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2b06      	cmp	r3, #6
 80099d6:	d015      	beq.n	8009a04 <HAL_TIM_Base_Start_IT+0xb4>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099de:	d011      	beq.n	8009a04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f042 0201 	orr.w	r2, r2, #1
 80099ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099f0:	e008      	b.n	8009a04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f042 0201 	orr.w	r2, r2, #1
 8009a00:	601a      	str	r2, [r3, #0]
 8009a02:	e000      	b.n	8009a06 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	40012c00 	.word	0x40012c00
 8009a18:	40000400 	.word	0x40000400
 8009a1c:	40000800 	.word	0x40000800
 8009a20:	40000c00 	.word	0x40000c00
 8009a24:	40013400 	.word	0x40013400
 8009a28:	40014000 	.word	0x40014000
 8009a2c:	00010007 	.word	0x00010007

08009a30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f022 0201 	bic.w	r2, r2, #1
 8009a46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6a1a      	ldr	r2, [r3, #32]
 8009a4e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009a52:	4013      	ands	r3, r2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10f      	bne.n	8009a78 <HAL_TIM_Base_Stop_IT+0x48>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6a1a      	ldr	r2, [r3, #32]
 8009a5e:	f240 4344 	movw	r3, #1092	@ 0x444
 8009a62:	4013      	ands	r3, r2
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d107      	bne.n	8009a78 <HAL_TIM_Base_Stop_IT+0x48>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f022 0201 	bic.w	r2, r2, #1
 8009a76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d020      	beq.n	8009af2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f003 0302 	and.w	r3, r3, #2
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d01b      	beq.n	8009af2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f06f 0202 	mvn.w	r2, #2
 8009ac2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	f003 0303 	and.w	r3, r3, #3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f8e9 	bl	8009cb0 <HAL_TIM_IC_CaptureCallback>
 8009ade:	e005      	b.n	8009aec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f8db 	bl	8009c9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f8ec 	bl	8009cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d020      	beq.n	8009b3e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f003 0304 	and.w	r3, r3, #4
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d01b      	beq.n	8009b3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f06f 0204 	mvn.w	r2, #4
 8009b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d003      	beq.n	8009b2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f8c3 	bl	8009cb0 <HAL_TIM_IC_CaptureCallback>
 8009b2a:	e005      	b.n	8009b38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f8b5 	bl	8009c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f8c6 	bl	8009cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	f003 0308 	and.w	r3, r3, #8
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d020      	beq.n	8009b8a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f003 0308 	and.w	r3, r3, #8
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d01b      	beq.n	8009b8a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f06f 0208 	mvn.w	r2, #8
 8009b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2204      	movs	r2, #4
 8009b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	f003 0303 	and.w	r3, r3, #3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f89d 	bl	8009cb0 <HAL_TIM_IC_CaptureCallback>
 8009b76:	e005      	b.n	8009b84 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f88f 	bl	8009c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f8a0 	bl	8009cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	f003 0310 	and.w	r3, r3, #16
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d020      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f003 0310 	and.w	r3, r3, #16
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d01b      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f06f 0210 	mvn.w	r2, #16
 8009ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2208      	movs	r2, #8
 8009bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	69db      	ldr	r3, [r3, #28]
 8009bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f877 	bl	8009cb0 <HAL_TIM_IC_CaptureCallback>
 8009bc2:	e005      	b.n	8009bd0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f869 	bl	8009c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f87a 	bl	8009cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	f003 0301 	and.w	r3, r3, #1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00c      	beq.n	8009bfa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d007      	beq.n	8009bfa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f06f 0201 	mvn.w	r2, #1
 8009bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7f7 ff7d 	bl	8001af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d104      	bne.n	8009c0e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00c      	beq.n	8009c28 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d007      	beq.n	8009c28 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f99a 	bl	8009f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00c      	beq.n	8009c4c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d007      	beq.n	8009c4c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f992 	bl	8009f70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00c      	beq.n	8009c70 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d007      	beq.n	8009c70 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f834 	bl	8009cd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00c      	beq.n	8009c94 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f003 0320 	and.w	r3, r3, #32
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d007      	beq.n	8009c94 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f06f 0220 	mvn.w	r2, #32
 8009c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f95a 	bl	8009f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c94:	bf00      	nop
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a46      	ldr	r2, [pc, #280]	@ (8009e18 <TIM_Base_SetConfig+0x12c>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d013      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d0a:	d00f      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a43      	ldr	r2, [pc, #268]	@ (8009e1c <TIM_Base_SetConfig+0x130>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00b      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a42      	ldr	r2, [pc, #264]	@ (8009e20 <TIM_Base_SetConfig+0x134>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d007      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a41      	ldr	r2, [pc, #260]	@ (8009e24 <TIM_Base_SetConfig+0x138>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d003      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a40      	ldr	r2, [pc, #256]	@ (8009e28 <TIM_Base_SetConfig+0x13c>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d108      	bne.n	8009d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a35      	ldr	r2, [pc, #212]	@ (8009e18 <TIM_Base_SetConfig+0x12c>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d01f      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d4c:	d01b      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a32      	ldr	r2, [pc, #200]	@ (8009e1c <TIM_Base_SetConfig+0x130>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d017      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a31      	ldr	r2, [pc, #196]	@ (8009e20 <TIM_Base_SetConfig+0x134>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d013      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a30      	ldr	r2, [pc, #192]	@ (8009e24 <TIM_Base_SetConfig+0x138>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d00f      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a2f      	ldr	r2, [pc, #188]	@ (8009e28 <TIM_Base_SetConfig+0x13c>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d00b      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a2e      	ldr	r2, [pc, #184]	@ (8009e2c <TIM_Base_SetConfig+0x140>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d007      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a2d      	ldr	r2, [pc, #180]	@ (8009e30 <TIM_Base_SetConfig+0x144>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d003      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a2c      	ldr	r2, [pc, #176]	@ (8009e34 <TIM_Base_SetConfig+0x148>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d108      	bne.n	8009d98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	689a      	ldr	r2, [r3, #8]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a16      	ldr	r2, [pc, #88]	@ (8009e18 <TIM_Base_SetConfig+0x12c>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d00f      	beq.n	8009de4 <TIM_Base_SetConfig+0xf8>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a18      	ldr	r2, [pc, #96]	@ (8009e28 <TIM_Base_SetConfig+0x13c>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d00b      	beq.n	8009de4 <TIM_Base_SetConfig+0xf8>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a17      	ldr	r2, [pc, #92]	@ (8009e2c <TIM_Base_SetConfig+0x140>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d007      	beq.n	8009de4 <TIM_Base_SetConfig+0xf8>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a16      	ldr	r2, [pc, #88]	@ (8009e30 <TIM_Base_SetConfig+0x144>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d003      	beq.n	8009de4 <TIM_Base_SetConfig+0xf8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a15      	ldr	r2, [pc, #84]	@ (8009e34 <TIM_Base_SetConfig+0x148>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d103      	bne.n	8009dec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	691a      	ldr	r2, [r3, #16]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d105      	bne.n	8009e0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	f023 0201 	bic.w	r2, r3, #1
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	611a      	str	r2, [r3, #16]
  }
}
 8009e0a:	bf00      	nop
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	40012c00 	.word	0x40012c00
 8009e1c:	40000400 	.word	0x40000400
 8009e20:	40000800 	.word	0x40000800
 8009e24:	40000c00 	.word	0x40000c00
 8009e28:	40013400 	.word	0x40013400
 8009e2c:	40014000 	.word	0x40014000
 8009e30:	40014400 	.word	0x40014400
 8009e34:	40014800 	.word	0x40014800

08009e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d101      	bne.n	8009e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	e068      	b.n	8009f22 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a2e      	ldr	r2, [pc, #184]	@ (8009f30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d004      	beq.n	8009e84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d108      	bne.n	8009e96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8009f30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d01d      	beq.n	8009ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ec2:	d018      	beq.n	8009ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d013      	beq.n	8009ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d00e      	beq.n	8009ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a18      	ldr	r2, [pc, #96]	@ (8009f40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d009      	beq.n	8009ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a13      	ldr	r2, [pc, #76]	@ (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d004      	beq.n	8009ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a14      	ldr	r2, [pc, #80]	@ (8009f44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d10c      	bne.n	8009f10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	40012c00 	.word	0x40012c00
 8009f34:	40013400 	.word	0x40013400
 8009f38:	40000400 	.word	0x40000400
 8009f3c:	40000800 	.word	0x40000800
 8009f40:	40000c00 	.word	0x40000c00
 8009f44:	40014000 	.word	0x40014000

08009f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e040      	b.n	800a018 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d106      	bne.n	8009fac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7f8 fa92 	bl	80024d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2224      	movs	r2, #36	@ 0x24
 8009fb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f022 0201 	bic.w	r2, r2, #1
 8009fc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d002      	beq.n	8009fd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fb6a 	bl	800a6a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f8af 	bl	800a134 <UART_SetConfig>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d101      	bne.n	8009fe0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e01b      	b.n	800a018 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009fee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	689a      	ldr	r2, [r3, #8]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ffe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f042 0201 	orr.w	r2, r2, #1
 800a00e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fbe9 	bl	800a7e8 <UART_CheckIdleState>
 800a016:	4603      	mov	r3, r0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b08a      	sub	sp, #40	@ 0x28
 800a024:	af02      	add	r7, sp, #8
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	603b      	str	r3, [r7, #0]
 800a02c:	4613      	mov	r3, r2
 800a02e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a034:	2b20      	cmp	r3, #32
 800a036:	d177      	bne.n	800a128 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d002      	beq.n	800a044 <HAL_UART_Transmit+0x24>
 800a03e:	88fb      	ldrh	r3, [r7, #6]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e070      	b.n	800a12a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2221      	movs	r2, #33	@ 0x21
 800a054:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a056:	f7fa fd57 	bl	8004b08 <HAL_GetTick>
 800a05a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	88fa      	ldrh	r2, [r7, #6]
 800a060:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	88fa      	ldrh	r2, [r7, #6]
 800a068:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a074:	d108      	bne.n	800a088 <HAL_UART_Transmit+0x68>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d104      	bne.n	800a088 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	61bb      	str	r3, [r7, #24]
 800a086:	e003      	b.n	800a090 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a08c:	2300      	movs	r3, #0
 800a08e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a090:	e02f      	b.n	800a0f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2200      	movs	r2, #0
 800a09a:	2180      	movs	r1, #128	@ 0x80
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 fc4b 	bl	800a938 <UART_WaitOnFlagUntilTimeout>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d004      	beq.n	800a0b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2220      	movs	r2, #32
 800a0ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e03b      	b.n	800a12a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10b      	bne.n	800a0d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	881a      	ldrh	r2, [r3, #0]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0c4:	b292      	uxth	r2, r2
 800a0c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	3302      	adds	r3, #2
 800a0cc:	61bb      	str	r3, [r7, #24]
 800a0ce:	e007      	b.n	800a0e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	781a      	ldrb	r2, [r3, #0]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1c9      	bne.n	800a092 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2200      	movs	r2, #0
 800a106:	2140      	movs	r1, #64	@ 0x40
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 fc15 	bl	800a938 <UART_WaitOnFlagUntilTimeout>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d004      	beq.n	800a11e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2220      	movs	r2, #32
 800a118:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e005      	b.n	800a12a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2220      	movs	r2, #32
 800a122:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	e000      	b.n	800a12a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a128:	2302      	movs	r3, #2
  }
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3720      	adds	r7, #32
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
	...

0800a134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a138:	b08a      	sub	sp, #40	@ 0x28
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	689a      	ldr	r2, [r3, #8]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	431a      	orrs	r2, r3
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	431a      	orrs	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	69db      	ldr	r3, [r3, #28]
 800a158:	4313      	orrs	r3, r2
 800a15a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	4ba4      	ldr	r3, [pc, #656]	@ (800a3f4 <UART_SetConfig+0x2c0>)
 800a164:	4013      	ands	r3, r2
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	6812      	ldr	r2, [r2, #0]
 800a16a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a16c:	430b      	orrs	r3, r1
 800a16e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	430a      	orrs	r2, r1
 800a184:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a99      	ldr	r2, [pc, #612]	@ (800a3f8 <UART_SetConfig+0x2c4>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d004      	beq.n	800a1a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a19c:	4313      	orrs	r3, r2
 800a19e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a90      	ldr	r2, [pc, #576]	@ (800a3fc <UART_SetConfig+0x2c8>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d126      	bne.n	800a20c <UART_SetConfig+0xd8>
 800a1be:	4b90      	ldr	r3, [pc, #576]	@ (800a400 <UART_SetConfig+0x2cc>)
 800a1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1c4:	f003 0303 	and.w	r3, r3, #3
 800a1c8:	2b03      	cmp	r3, #3
 800a1ca:	d81b      	bhi.n	800a204 <UART_SetConfig+0xd0>
 800a1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d4 <UART_SetConfig+0xa0>)
 800a1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d2:	bf00      	nop
 800a1d4:	0800a1e5 	.word	0x0800a1e5
 800a1d8:	0800a1f5 	.word	0x0800a1f5
 800a1dc:	0800a1ed 	.word	0x0800a1ed
 800a1e0:	0800a1fd 	.word	0x0800a1fd
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1ea:	e116      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1f2:	e112      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a1f4:	2304      	movs	r3, #4
 800a1f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1fa:	e10e      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a1fc:	2308      	movs	r3, #8
 800a1fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a202:	e10a      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a204:	2310      	movs	r3, #16
 800a206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a20a:	e106      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a7c      	ldr	r2, [pc, #496]	@ (800a404 <UART_SetConfig+0x2d0>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d138      	bne.n	800a288 <UART_SetConfig+0x154>
 800a216:	4b7a      	ldr	r3, [pc, #488]	@ (800a400 <UART_SetConfig+0x2cc>)
 800a218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a21c:	f003 030c 	and.w	r3, r3, #12
 800a220:	2b0c      	cmp	r3, #12
 800a222:	d82d      	bhi.n	800a280 <UART_SetConfig+0x14c>
 800a224:	a201      	add	r2, pc, #4	@ (adr r2, 800a22c <UART_SetConfig+0xf8>)
 800a226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22a:	bf00      	nop
 800a22c:	0800a261 	.word	0x0800a261
 800a230:	0800a281 	.word	0x0800a281
 800a234:	0800a281 	.word	0x0800a281
 800a238:	0800a281 	.word	0x0800a281
 800a23c:	0800a271 	.word	0x0800a271
 800a240:	0800a281 	.word	0x0800a281
 800a244:	0800a281 	.word	0x0800a281
 800a248:	0800a281 	.word	0x0800a281
 800a24c:	0800a269 	.word	0x0800a269
 800a250:	0800a281 	.word	0x0800a281
 800a254:	0800a281 	.word	0x0800a281
 800a258:	0800a281 	.word	0x0800a281
 800a25c:	0800a279 	.word	0x0800a279
 800a260:	2300      	movs	r3, #0
 800a262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a266:	e0d8      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a268:	2302      	movs	r3, #2
 800a26a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a26e:	e0d4      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a270:	2304      	movs	r3, #4
 800a272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a276:	e0d0      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a278:	2308      	movs	r3, #8
 800a27a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a27e:	e0cc      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a280:	2310      	movs	r3, #16
 800a282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a286:	e0c8      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a5e      	ldr	r2, [pc, #376]	@ (800a408 <UART_SetConfig+0x2d4>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d125      	bne.n	800a2de <UART_SetConfig+0x1aa>
 800a292:	4b5b      	ldr	r3, [pc, #364]	@ (800a400 <UART_SetConfig+0x2cc>)
 800a294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a298:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a29c:	2b30      	cmp	r3, #48	@ 0x30
 800a29e:	d016      	beq.n	800a2ce <UART_SetConfig+0x19a>
 800a2a0:	2b30      	cmp	r3, #48	@ 0x30
 800a2a2:	d818      	bhi.n	800a2d6 <UART_SetConfig+0x1a2>
 800a2a4:	2b20      	cmp	r3, #32
 800a2a6:	d00a      	beq.n	800a2be <UART_SetConfig+0x18a>
 800a2a8:	2b20      	cmp	r3, #32
 800a2aa:	d814      	bhi.n	800a2d6 <UART_SetConfig+0x1a2>
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <UART_SetConfig+0x182>
 800a2b0:	2b10      	cmp	r3, #16
 800a2b2:	d008      	beq.n	800a2c6 <UART_SetConfig+0x192>
 800a2b4:	e00f      	b.n	800a2d6 <UART_SetConfig+0x1a2>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2bc:	e0ad      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a2be:	2302      	movs	r3, #2
 800a2c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2c4:	e0a9      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a2c6:	2304      	movs	r3, #4
 800a2c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2cc:	e0a5      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a2ce:	2308      	movs	r3, #8
 800a2d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2d4:	e0a1      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a2d6:	2310      	movs	r3, #16
 800a2d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2dc:	e09d      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a4a      	ldr	r2, [pc, #296]	@ (800a40c <UART_SetConfig+0x2d8>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d125      	bne.n	800a334 <UART_SetConfig+0x200>
 800a2e8:	4b45      	ldr	r3, [pc, #276]	@ (800a400 <UART_SetConfig+0x2cc>)
 800a2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a2f2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2f4:	d016      	beq.n	800a324 <UART_SetConfig+0x1f0>
 800a2f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2f8:	d818      	bhi.n	800a32c <UART_SetConfig+0x1f8>
 800a2fa:	2b80      	cmp	r3, #128	@ 0x80
 800a2fc:	d00a      	beq.n	800a314 <UART_SetConfig+0x1e0>
 800a2fe:	2b80      	cmp	r3, #128	@ 0x80
 800a300:	d814      	bhi.n	800a32c <UART_SetConfig+0x1f8>
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <UART_SetConfig+0x1d8>
 800a306:	2b40      	cmp	r3, #64	@ 0x40
 800a308:	d008      	beq.n	800a31c <UART_SetConfig+0x1e8>
 800a30a:	e00f      	b.n	800a32c <UART_SetConfig+0x1f8>
 800a30c:	2300      	movs	r3, #0
 800a30e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a312:	e082      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a314:	2302      	movs	r3, #2
 800a316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a31a:	e07e      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a31c:	2304      	movs	r3, #4
 800a31e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a322:	e07a      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a324:	2308      	movs	r3, #8
 800a326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a32a:	e076      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a32c:	2310      	movs	r3, #16
 800a32e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a332:	e072      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a35      	ldr	r2, [pc, #212]	@ (800a410 <UART_SetConfig+0x2dc>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d12a      	bne.n	800a394 <UART_SetConfig+0x260>
 800a33e:	4b30      	ldr	r3, [pc, #192]	@ (800a400 <UART_SetConfig+0x2cc>)
 800a340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a344:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a348:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a34c:	d01a      	beq.n	800a384 <UART_SetConfig+0x250>
 800a34e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a352:	d81b      	bhi.n	800a38c <UART_SetConfig+0x258>
 800a354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a358:	d00c      	beq.n	800a374 <UART_SetConfig+0x240>
 800a35a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a35e:	d815      	bhi.n	800a38c <UART_SetConfig+0x258>
 800a360:	2b00      	cmp	r3, #0
 800a362:	d003      	beq.n	800a36c <UART_SetConfig+0x238>
 800a364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a368:	d008      	beq.n	800a37c <UART_SetConfig+0x248>
 800a36a:	e00f      	b.n	800a38c <UART_SetConfig+0x258>
 800a36c:	2300      	movs	r3, #0
 800a36e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a372:	e052      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a374:	2302      	movs	r3, #2
 800a376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a37a:	e04e      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a37c:	2304      	movs	r3, #4
 800a37e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a382:	e04a      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a384:	2308      	movs	r3, #8
 800a386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a38a:	e046      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a38c:	2310      	movs	r3, #16
 800a38e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a392:	e042      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a17      	ldr	r2, [pc, #92]	@ (800a3f8 <UART_SetConfig+0x2c4>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d13a      	bne.n	800a414 <UART_SetConfig+0x2e0>
 800a39e:	4b18      	ldr	r3, [pc, #96]	@ (800a400 <UART_SetConfig+0x2cc>)
 800a3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a3a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3ac:	d01a      	beq.n	800a3e4 <UART_SetConfig+0x2b0>
 800a3ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3b2:	d81b      	bhi.n	800a3ec <UART_SetConfig+0x2b8>
 800a3b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3b8:	d00c      	beq.n	800a3d4 <UART_SetConfig+0x2a0>
 800a3ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3be:	d815      	bhi.n	800a3ec <UART_SetConfig+0x2b8>
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d003      	beq.n	800a3cc <UART_SetConfig+0x298>
 800a3c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3c8:	d008      	beq.n	800a3dc <UART_SetConfig+0x2a8>
 800a3ca:	e00f      	b.n	800a3ec <UART_SetConfig+0x2b8>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3d2:	e022      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3da:	e01e      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a3dc:	2304      	movs	r3, #4
 800a3de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3e2:	e01a      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a3e4:	2308      	movs	r3, #8
 800a3e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3ea:	e016      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a3ec:	2310      	movs	r3, #16
 800a3ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3f2:	e012      	b.n	800a41a <UART_SetConfig+0x2e6>
 800a3f4:	efff69f3 	.word	0xefff69f3
 800a3f8:	40008000 	.word	0x40008000
 800a3fc:	40013800 	.word	0x40013800
 800a400:	40021000 	.word	0x40021000
 800a404:	40004400 	.word	0x40004400
 800a408:	40004800 	.word	0x40004800
 800a40c:	40004c00 	.word	0x40004c00
 800a410:	40005000 	.word	0x40005000
 800a414:	2310      	movs	r3, #16
 800a416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a9f      	ldr	r2, [pc, #636]	@ (800a69c <UART_SetConfig+0x568>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d17a      	bne.n	800a51a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a424:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a428:	2b08      	cmp	r3, #8
 800a42a:	d824      	bhi.n	800a476 <UART_SetConfig+0x342>
 800a42c:	a201      	add	r2, pc, #4	@ (adr r2, 800a434 <UART_SetConfig+0x300>)
 800a42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a432:	bf00      	nop
 800a434:	0800a459 	.word	0x0800a459
 800a438:	0800a477 	.word	0x0800a477
 800a43c:	0800a461 	.word	0x0800a461
 800a440:	0800a477 	.word	0x0800a477
 800a444:	0800a467 	.word	0x0800a467
 800a448:	0800a477 	.word	0x0800a477
 800a44c:	0800a477 	.word	0x0800a477
 800a450:	0800a477 	.word	0x0800a477
 800a454:	0800a46f 	.word	0x0800a46f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a458:	f7fc fddc 	bl	8007014 <HAL_RCC_GetPCLK1Freq>
 800a45c:	61f8      	str	r0, [r7, #28]
        break;
 800a45e:	e010      	b.n	800a482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a460:	4b8f      	ldr	r3, [pc, #572]	@ (800a6a0 <UART_SetConfig+0x56c>)
 800a462:	61fb      	str	r3, [r7, #28]
        break;
 800a464:	e00d      	b.n	800a482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a466:	f7fc fd3d 	bl	8006ee4 <HAL_RCC_GetSysClockFreq>
 800a46a:	61f8      	str	r0, [r7, #28]
        break;
 800a46c:	e009      	b.n	800a482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a46e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a472:	61fb      	str	r3, [r7, #28]
        break;
 800a474:	e005      	b.n	800a482 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a476:	2300      	movs	r3, #0
 800a478:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a480:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 80fb 	beq.w	800a680 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	4613      	mov	r3, r2
 800a490:	005b      	lsls	r3, r3, #1
 800a492:	4413      	add	r3, r2
 800a494:	69fa      	ldr	r2, [r7, #28]
 800a496:	429a      	cmp	r2, r3
 800a498:	d305      	bcc.n	800a4a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a4a0:	69fa      	ldr	r2, [r7, #28]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d903      	bls.n	800a4ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a4ac:	e0e8      	b.n	800a680 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	461c      	mov	r4, r3
 800a4b4:	4615      	mov	r5, r2
 800a4b6:	f04f 0200 	mov.w	r2, #0
 800a4ba:	f04f 0300 	mov.w	r3, #0
 800a4be:	022b      	lsls	r3, r5, #8
 800a4c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a4c4:	0222      	lsls	r2, r4, #8
 800a4c6:	68f9      	ldr	r1, [r7, #12]
 800a4c8:	6849      	ldr	r1, [r1, #4]
 800a4ca:	0849      	lsrs	r1, r1, #1
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	4688      	mov	r8, r1
 800a4d0:	4681      	mov	r9, r0
 800a4d2:	eb12 0a08 	adds.w	sl, r2, r8
 800a4d6:	eb43 0b09 	adc.w	fp, r3, r9
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	603b      	str	r3, [r7, #0]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4e8:	4650      	mov	r0, sl
 800a4ea:	4659      	mov	r1, fp
 800a4ec:	f7f6 fbcc 	bl	8000c88 <__aeabi_uldivmod>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4fe:	d308      	bcc.n	800a512 <UART_SetConfig+0x3de>
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a506:	d204      	bcs.n	800a512 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	69ba      	ldr	r2, [r7, #24]
 800a50e:	60da      	str	r2, [r3, #12]
 800a510:	e0b6      	b.n	800a680 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a518:	e0b2      	b.n	800a680 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a522:	d15e      	bne.n	800a5e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a524:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d828      	bhi.n	800a57e <UART_SetConfig+0x44a>
 800a52c:	a201      	add	r2, pc, #4	@ (adr r2, 800a534 <UART_SetConfig+0x400>)
 800a52e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a532:	bf00      	nop
 800a534:	0800a559 	.word	0x0800a559
 800a538:	0800a561 	.word	0x0800a561
 800a53c:	0800a569 	.word	0x0800a569
 800a540:	0800a57f 	.word	0x0800a57f
 800a544:	0800a56f 	.word	0x0800a56f
 800a548:	0800a57f 	.word	0x0800a57f
 800a54c:	0800a57f 	.word	0x0800a57f
 800a550:	0800a57f 	.word	0x0800a57f
 800a554:	0800a577 	.word	0x0800a577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a558:	f7fc fd5c 	bl	8007014 <HAL_RCC_GetPCLK1Freq>
 800a55c:	61f8      	str	r0, [r7, #28]
        break;
 800a55e:	e014      	b.n	800a58a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a560:	f7fc fd6e 	bl	8007040 <HAL_RCC_GetPCLK2Freq>
 800a564:	61f8      	str	r0, [r7, #28]
        break;
 800a566:	e010      	b.n	800a58a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a568:	4b4d      	ldr	r3, [pc, #308]	@ (800a6a0 <UART_SetConfig+0x56c>)
 800a56a:	61fb      	str	r3, [r7, #28]
        break;
 800a56c:	e00d      	b.n	800a58a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a56e:	f7fc fcb9 	bl	8006ee4 <HAL_RCC_GetSysClockFreq>
 800a572:	61f8      	str	r0, [r7, #28]
        break;
 800a574:	e009      	b.n	800a58a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a57a:	61fb      	str	r3, [r7, #28]
        break;
 800a57c:	e005      	b.n	800a58a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d077      	beq.n	800a680 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	005a      	lsls	r2, r3, #1
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	085b      	lsrs	r3, r3, #1
 800a59a:	441a      	add	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	2b0f      	cmp	r3, #15
 800a5aa:	d916      	bls.n	800a5da <UART_SetConfig+0x4a6>
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5b2:	d212      	bcs.n	800a5da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	f023 030f 	bic.w	r3, r3, #15
 800a5bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	085b      	lsrs	r3, r3, #1
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	f003 0307 	and.w	r3, r3, #7
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	8afb      	ldrh	r3, [r7, #22]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	8afa      	ldrh	r2, [r7, #22]
 800a5d6:	60da      	str	r2, [r3, #12]
 800a5d8:	e052      	b.n	800a680 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a5e0:	e04e      	b.n	800a680 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a5e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a5e6:	2b08      	cmp	r3, #8
 800a5e8:	d827      	bhi.n	800a63a <UART_SetConfig+0x506>
 800a5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a5f0 <UART_SetConfig+0x4bc>)
 800a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f0:	0800a615 	.word	0x0800a615
 800a5f4:	0800a61d 	.word	0x0800a61d
 800a5f8:	0800a625 	.word	0x0800a625
 800a5fc:	0800a63b 	.word	0x0800a63b
 800a600:	0800a62b 	.word	0x0800a62b
 800a604:	0800a63b 	.word	0x0800a63b
 800a608:	0800a63b 	.word	0x0800a63b
 800a60c:	0800a63b 	.word	0x0800a63b
 800a610:	0800a633 	.word	0x0800a633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a614:	f7fc fcfe 	bl	8007014 <HAL_RCC_GetPCLK1Freq>
 800a618:	61f8      	str	r0, [r7, #28]
        break;
 800a61a:	e014      	b.n	800a646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a61c:	f7fc fd10 	bl	8007040 <HAL_RCC_GetPCLK2Freq>
 800a620:	61f8      	str	r0, [r7, #28]
        break;
 800a622:	e010      	b.n	800a646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a624:	4b1e      	ldr	r3, [pc, #120]	@ (800a6a0 <UART_SetConfig+0x56c>)
 800a626:	61fb      	str	r3, [r7, #28]
        break;
 800a628:	e00d      	b.n	800a646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a62a:	f7fc fc5b 	bl	8006ee4 <HAL_RCC_GetSysClockFreq>
 800a62e:	61f8      	str	r0, [r7, #28]
        break;
 800a630:	e009      	b.n	800a646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a636:	61fb      	str	r3, [r7, #28]
        break;
 800a638:	e005      	b.n	800a646 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a63a:	2300      	movs	r3, #0
 800a63c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a644:	bf00      	nop
    }

    if (pclk != 0U)
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d019      	beq.n	800a680 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	085a      	lsrs	r2, r3, #1
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	441a      	add	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a65e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	2b0f      	cmp	r3, #15
 800a664:	d909      	bls.n	800a67a <UART_SetConfig+0x546>
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a66c:	d205      	bcs.n	800a67a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	b29a      	uxth	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60da      	str	r2, [r3, #12]
 800a678:	e002      	b.n	800a680 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a68c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a690:	4618      	mov	r0, r3
 800a692:	3728      	adds	r7, #40	@ 0x28
 800a694:	46bd      	mov	sp, r7
 800a696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a69a:	bf00      	nop
 800a69c:	40008000 	.word	0x40008000
 800a6a0:	00f42400 	.word	0x00f42400

0800a6a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b0:	f003 0308 	and.w	r3, r3, #8
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00a      	beq.n	800a6ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	430a      	orrs	r2, r1
 800a6cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00a      	beq.n	800a6f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f4:	f003 0302 	and.w	r3, r3, #2
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00a      	beq.n	800a712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	430a      	orrs	r2, r1
 800a710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a716:	f003 0304 	and.w	r3, r3, #4
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00a      	beq.n	800a734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	430a      	orrs	r2, r1
 800a732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a738:	f003 0310 	and.w	r3, r3, #16
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00a      	beq.n	800a756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	430a      	orrs	r2, r1
 800a754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75a:	f003 0320 	and.w	r3, r3, #32
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00a      	beq.n	800a778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	430a      	orrs	r2, r1
 800a776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a780:	2b00      	cmp	r3, #0
 800a782:	d01a      	beq.n	800a7ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7a2:	d10a      	bne.n	800a7ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00a      	beq.n	800a7dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	430a      	orrs	r2, r1
 800a7da:	605a      	str	r2, [r3, #4]
  }
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b098      	sub	sp, #96	@ 0x60
 800a7ec:	af02      	add	r7, sp, #8
 800a7ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7f8:	f7fa f986 	bl	8004b08 <HAL_GetTick>
 800a7fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f003 0308 	and.w	r3, r3, #8
 800a808:	2b08      	cmp	r3, #8
 800a80a:	d12e      	bne.n	800a86a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a80c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a814:	2200      	movs	r2, #0
 800a816:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f88c 	bl	800a938 <UART_WaitOnFlagUntilTimeout>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d021      	beq.n	800a86a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82e:	e853 3f00 	ldrex	r3, [r3]
 800a832:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a83a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	461a      	mov	r2, r3
 800a842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a844:	647b      	str	r3, [r7, #68]	@ 0x44
 800a846:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a84a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a84c:	e841 2300 	strex	r3, r2, [r1]
 800a850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1e6      	bne.n	800a826 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2220      	movs	r2, #32
 800a85c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a866:	2303      	movs	r3, #3
 800a868:	e062      	b.n	800a930 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b04      	cmp	r3, #4
 800a876:	d149      	bne.n	800a90c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a878:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a880:	2200      	movs	r2, #0
 800a882:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f856 	bl	800a938 <UART_WaitOnFlagUntilTimeout>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d03c      	beq.n	800a90c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89a:	e853 3f00 	ldrex	r3, [r3]
 800a89e:	623b      	str	r3, [r7, #32]
   return(result);
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8b8:	e841 2300 	strex	r3, r2, [r1]
 800a8bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1e6      	bne.n	800a892 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	e853 3f00 	ldrex	r3, [r3]
 800a8d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f023 0301 	bic.w	r3, r3, #1
 800a8da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8e4:	61fa      	str	r2, [r7, #28]
 800a8e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	69b9      	ldr	r1, [r7, #24]
 800a8ea:	69fa      	ldr	r2, [r7, #28]
 800a8ec:	e841 2300 	strex	r3, r2, [r1]
 800a8f0:	617b      	str	r3, [r7, #20]
   return(result);
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e5      	bne.n	800a8c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e011      	b.n	800a930 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2220      	movs	r2, #32
 800a910:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2220      	movs	r2, #32
 800a916:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3758      	adds	r7, #88	@ 0x58
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	4613      	mov	r3, r2
 800a946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a948:	e04f      	b.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a950:	d04b      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a952:	f7fa f8d9 	bl	8004b08 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	69ba      	ldr	r2, [r7, #24]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d302      	bcc.n	800a968 <UART_WaitOnFlagUntilTimeout+0x30>
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a968:	2303      	movs	r3, #3
 800a96a:	e04e      	b.n	800aa0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f003 0304 	and.w	r3, r3, #4
 800a976:	2b00      	cmp	r3, #0
 800a978:	d037      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b80      	cmp	r3, #128	@ 0x80
 800a97e:	d034      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b40      	cmp	r3, #64	@ 0x40
 800a984:	d031      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	69db      	ldr	r3, [r3, #28]
 800a98c:	f003 0308 	and.w	r3, r3, #8
 800a990:	2b08      	cmp	r3, #8
 800a992:	d110      	bne.n	800a9b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2208      	movs	r2, #8
 800a99a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 f838 	bl	800aa12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2208      	movs	r2, #8
 800a9a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e029      	b.n	800aa0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	69db      	ldr	r3, [r3, #28]
 800a9bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9c4:	d111      	bne.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a9ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 f81e 	bl	800aa12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2220      	movs	r2, #32
 800a9da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e00f      	b.n	800aa0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	69da      	ldr	r2, [r3, #28]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	bf0c      	ite	eq
 800a9fa:	2301      	moveq	r3, #1
 800a9fc:	2300      	movne	r3, #0
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	461a      	mov	r2, r3
 800aa02:	79fb      	ldrb	r3, [r7, #7]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d0a0      	beq.n	800a94a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b095      	sub	sp, #84	@ 0x54
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa22:	e853 3f00 	ldrex	r3, [r3]
 800aa26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	461a      	mov	r2, r3
 800aa36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa38:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa40:	e841 2300 	strex	r3, r2, [r1]
 800aa44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e6      	bne.n	800aa1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	3308      	adds	r3, #8
 800aa52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	f023 0301 	bic.w	r3, r3, #1
 800aa62:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3308      	adds	r3, #8
 800aa6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa74:	e841 2300 	strex	r3, r2, [r1]
 800aa78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e5      	bne.n	800aa4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d118      	bne.n	800aaba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	e853 3f00 	ldrex	r3, [r3]
 800aa94:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	f023 0310 	bic.w	r3, r3, #16
 800aa9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaa6:	61bb      	str	r3, [r7, #24]
 800aaa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaaa:	6979      	ldr	r1, [r7, #20]
 800aaac:	69ba      	ldr	r2, [r7, #24]
 800aaae:	e841 2300 	strex	r3, r2, [r1]
 800aab2:	613b      	str	r3, [r7, #16]
   return(result);
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1e6      	bne.n	800aa88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2220      	movs	r2, #32
 800aabe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800aace:	bf00      	nop
 800aad0:	3754      	adds	r7, #84	@ 0x54
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
	...

0800aadc <__NVIC_SetPriority>:
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	6039      	str	r1, [r7, #0]
 800aae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	db0a      	blt.n	800ab06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	490c      	ldr	r1, [pc, #48]	@ (800ab28 <__NVIC_SetPriority+0x4c>)
 800aaf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aafa:	0112      	lsls	r2, r2, #4
 800aafc:	b2d2      	uxtb	r2, r2
 800aafe:	440b      	add	r3, r1
 800ab00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ab04:	e00a      	b.n	800ab1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	4908      	ldr	r1, [pc, #32]	@ (800ab2c <__NVIC_SetPriority+0x50>)
 800ab0c:	79fb      	ldrb	r3, [r7, #7]
 800ab0e:	f003 030f 	and.w	r3, r3, #15
 800ab12:	3b04      	subs	r3, #4
 800ab14:	0112      	lsls	r2, r2, #4
 800ab16:	b2d2      	uxtb	r2, r2
 800ab18:	440b      	add	r3, r1
 800ab1a:	761a      	strb	r2, [r3, #24]
}
 800ab1c:	bf00      	nop
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr
 800ab28:	e000e100 	.word	0xe000e100
 800ab2c:	e000ed00 	.word	0xe000ed00

0800ab30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ab30:	b580      	push	{r7, lr}
 800ab32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ab34:	2100      	movs	r1, #0
 800ab36:	f06f 0004 	mvn.w	r0, #4
 800ab3a:	f7ff ffcf 	bl	800aadc <__NVIC_SetPriority>
#endif
}
 800ab3e:	bf00      	nop
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab4a:	f3ef 8305 	mrs	r3, IPSR
 800ab4e:	603b      	str	r3, [r7, #0]
  return(result);
 800ab50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ab56:	f06f 0305 	mvn.w	r3, #5
 800ab5a:	607b      	str	r3, [r7, #4]
 800ab5c:	e00c      	b.n	800ab78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ab5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ab88 <osKernelInitialize+0x44>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d105      	bne.n	800ab72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ab66:	4b08      	ldr	r3, [pc, #32]	@ (800ab88 <osKernelInitialize+0x44>)
 800ab68:	2201      	movs	r2, #1
 800ab6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	607b      	str	r3, [r7, #4]
 800ab70:	e002      	b.n	800ab78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ab72:	f04f 33ff 	mov.w	r3, #4294967295
 800ab76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab78:	687b      	ldr	r3, [r7, #4]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	20001900 	.word	0x20001900

0800ab8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab92:	f3ef 8305 	mrs	r3, IPSR
 800ab96:	603b      	str	r3, [r7, #0]
  return(result);
 800ab98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ab9e:	f06f 0305 	mvn.w	r3, #5
 800aba2:	607b      	str	r3, [r7, #4]
 800aba4:	e010      	b.n	800abc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aba6:	4b0b      	ldr	r3, [pc, #44]	@ (800abd4 <osKernelStart+0x48>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d109      	bne.n	800abc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800abae:	f7ff ffbf 	bl	800ab30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800abb2:	4b08      	ldr	r3, [pc, #32]	@ (800abd4 <osKernelStart+0x48>)
 800abb4:	2202      	movs	r2, #2
 800abb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800abb8:	f001 fcca 	bl	800c550 <vTaskStartScheduler>
      stat = osOK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	607b      	str	r3, [r7, #4]
 800abc0:	e002      	b.n	800abc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800abc2:	f04f 33ff 	mov.w	r3, #4294967295
 800abc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800abc8:	687b      	ldr	r3, [r7, #4]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	20001900 	.word	0x20001900

0800abd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08e      	sub	sp, #56	@ 0x38
 800abdc:	af04      	add	r7, sp, #16
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800abe4:	2300      	movs	r3, #0
 800abe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abe8:	f3ef 8305 	mrs	r3, IPSR
 800abec:	617b      	str	r3, [r7, #20]
  return(result);
 800abee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d17e      	bne.n	800acf2 <osThreadNew+0x11a>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d07b      	beq.n	800acf2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800abfa:	2380      	movs	r3, #128	@ 0x80
 800abfc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800abfe:	2318      	movs	r3, #24
 800ac00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ac02:	2300      	movs	r3, #0
 800ac04:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ac06:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d045      	beq.n	800ac9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d002      	beq.n	800ac20 <osThreadNew+0x48>
        name = attr->name;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d002      	beq.n	800ac2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d008      	beq.n	800ac46 <osThreadNew+0x6e>
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	2b38      	cmp	r3, #56	@ 0x38
 800ac38:	d805      	bhi.n	800ac46 <osThreadNew+0x6e>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <osThreadNew+0x72>
        return (NULL);
 800ac46:	2300      	movs	r3, #0
 800ac48:	e054      	b.n	800acf4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	089b      	lsrs	r3, r3, #2
 800ac58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00e      	beq.n	800ac80 <osThreadNew+0xa8>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	2b5b      	cmp	r3, #91	@ 0x5b
 800ac68:	d90a      	bls.n	800ac80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d006      	beq.n	800ac80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d002      	beq.n	800ac80 <osThreadNew+0xa8>
        mem = 1;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	61bb      	str	r3, [r7, #24]
 800ac7e:	e010      	b.n	800aca2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10c      	bne.n	800aca2 <osThreadNew+0xca>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d108      	bne.n	800aca2 <osThreadNew+0xca>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d104      	bne.n	800aca2 <osThreadNew+0xca>
          mem = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	61bb      	str	r3, [r7, #24]
 800ac9c:	e001      	b.n	800aca2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d110      	bne.n	800acca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800acb0:	9202      	str	r2, [sp, #8]
 800acb2:	9301      	str	r3, [sp, #4]
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	6a3a      	ldr	r2, [r7, #32]
 800acbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f001 fa6a 	bl	800c198 <xTaskCreateStatic>
 800acc4:	4603      	mov	r3, r0
 800acc6:	613b      	str	r3, [r7, #16]
 800acc8:	e013      	b.n	800acf2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d110      	bne.n	800acf2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800acd0:	6a3b      	ldr	r3, [r7, #32]
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	f107 0310 	add.w	r3, r7, #16
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f001 fab8 	bl	800c258 <xTaskCreate>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b01      	cmp	r3, #1
 800acec:	d001      	beq.n	800acf2 <osThreadNew+0x11a>
            hTask = NULL;
 800acee:	2300      	movs	r3, #0
 800acf0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800acf2:	693b      	ldr	r3, [r7, #16]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3728      	adds	r7, #40	@ 0x28
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad04:	f3ef 8305 	mrs	r3, IPSR
 800ad08:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <osDelay+0x1c>
    stat = osErrorISR;
 800ad10:	f06f 0305 	mvn.w	r3, #5
 800ad14:	60fb      	str	r3, [r7, #12]
 800ad16:	e007      	b.n	800ad28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d002      	beq.n	800ad28 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f001 fbde 	bl	800c4e4 <vTaskDelay>
    }
  }

  return (stat);
 800ad28:	68fb      	ldr	r3, [r7, #12]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b08a      	sub	sp, #40	@ 0x28
 800ad36:	af02      	add	r7, sp, #8
 800ad38:	60f8      	str	r0, [r7, #12]
 800ad3a:	60b9      	str	r1, [r7, #8]
 800ad3c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad42:	f3ef 8305 	mrs	r3, IPSR
 800ad46:	613b      	str	r3, [r7, #16]
  return(result);
 800ad48:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d175      	bne.n	800ae3a <osSemaphoreNew+0x108>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d072      	beq.n	800ae3a <osSemaphoreNew+0x108>
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d86e      	bhi.n	800ae3a <osSemaphoreNew+0x108>
    mem = -1;
 800ad5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d015      	beq.n	800ad94 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d006      	beq.n	800ad7e <osSemaphoreNew+0x4c>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	2b4f      	cmp	r3, #79	@ 0x4f
 800ad76:	d902      	bls.n	800ad7e <osSemaphoreNew+0x4c>
        mem = 1;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	61bb      	str	r3, [r7, #24]
 800ad7c:	e00c      	b.n	800ad98 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d108      	bne.n	800ad98 <osSemaphoreNew+0x66>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d104      	bne.n	800ad98 <osSemaphoreNew+0x66>
          mem = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	61bb      	str	r3, [r7, #24]
 800ad92:	e001      	b.n	800ad98 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9e:	d04c      	beq.n	800ae3a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d128      	bne.n	800adf8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d10a      	bne.n	800adc2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	2203      	movs	r2, #3
 800adb2:	9200      	str	r2, [sp, #0]
 800adb4:	2200      	movs	r2, #0
 800adb6:	2100      	movs	r1, #0
 800adb8:	2001      	movs	r0, #1
 800adba:	f000 fa2b 	bl	800b214 <xQueueGenericCreateStatic>
 800adbe:	61f8      	str	r0, [r7, #28]
 800adc0:	e005      	b.n	800adce <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800adc2:	2203      	movs	r2, #3
 800adc4:	2100      	movs	r1, #0
 800adc6:	2001      	movs	r0, #1
 800adc8:	f000 faa1 	bl	800b30e <xQueueGenericCreate>
 800adcc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d022      	beq.n	800ae1a <osSemaphoreNew+0xe8>
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d01f      	beq.n	800ae1a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800adda:	2300      	movs	r3, #0
 800addc:	2200      	movs	r2, #0
 800adde:	2100      	movs	r1, #0
 800ade0:	69f8      	ldr	r0, [r7, #28]
 800ade2:	f000 fb61 	bl	800b4a8 <xQueueGenericSend>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d016      	beq.n	800ae1a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800adec:	69f8      	ldr	r0, [r7, #28]
 800adee:	f000 ffff 	bl	800bdf0 <vQueueDelete>
            hSemaphore = NULL;
 800adf2:	2300      	movs	r3, #0
 800adf4:	61fb      	str	r3, [r7, #28]
 800adf6:	e010      	b.n	800ae1a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d108      	bne.n	800ae10 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	461a      	mov	r2, r3
 800ae04:	68b9      	ldr	r1, [r7, #8]
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 fadf 	bl	800b3ca <xQueueCreateCountingSemaphoreStatic>
 800ae0c:	61f8      	str	r0, [r7, #28]
 800ae0e:	e004      	b.n	800ae1a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ae10:	68b9      	ldr	r1, [r7, #8]
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	f000 fb12 	bl	800b43c <xQueueCreateCountingSemaphore>
 800ae18:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00c      	beq.n	800ae3a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d003      	beq.n	800ae2e <osSemaphoreNew+0xfc>
          name = attr->name;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	617b      	str	r3, [r7, #20]
 800ae2c:	e001      	b.n	800ae32 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ae32:	6979      	ldr	r1, [r7, #20]
 800ae34:	69f8      	ldr	r0, [r7, #28]
 800ae36:	f001 f927 	bl	800c088 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ae3a:	69fb      	ldr	r3, [r7, #28]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3720      	adds	r7, #32
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ae52:	2300      	movs	r3, #0
 800ae54:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d103      	bne.n	800ae64 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ae5c:	f06f 0303 	mvn.w	r3, #3
 800ae60:	617b      	str	r3, [r7, #20]
 800ae62:	e039      	b.n	800aed8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae64:	f3ef 8305 	mrs	r3, IPSR
 800ae68:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d022      	beq.n	800aeb6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ae76:	f06f 0303 	mvn.w	r3, #3
 800ae7a:	617b      	str	r3, [r7, #20]
 800ae7c:	e02c      	b.n	800aed8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ae82:	f107 0308 	add.w	r3, r7, #8
 800ae86:	461a      	mov	r2, r3
 800ae88:	2100      	movs	r1, #0
 800ae8a:	6938      	ldr	r0, [r7, #16]
 800ae8c:	f000 ff2e 	bl	800bcec <xQueueReceiveFromISR>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d003      	beq.n	800ae9e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ae96:	f06f 0302 	mvn.w	r3, #2
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	e01c      	b.n	800aed8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d019      	beq.n	800aed8 <osSemaphoreAcquire+0x94>
 800aea4:	4b0f      	ldr	r3, [pc, #60]	@ (800aee4 <osSemaphoreAcquire+0xa0>)
 800aea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aeaa:	601a      	str	r2, [r3, #0]
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	e010      	b.n	800aed8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6938      	ldr	r0, [r7, #16]
 800aeba:	f000 fe07 	bl	800bacc <xQueueSemaphoreTake>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d009      	beq.n	800aed8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800aeca:	f06f 0301 	mvn.w	r3, #1
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	e002      	b.n	800aed8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800aed2:	f06f 0302 	mvn.w	r3, #2
 800aed6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800aed8:	697b      	ldr	r3, [r7, #20]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3718      	adds	r7, #24
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	e000ed04 	.word	0xe000ed04

0800aee8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d103      	bne.n	800af06 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800aefe:	f06f 0303 	mvn.w	r3, #3
 800af02:	617b      	str	r3, [r7, #20]
 800af04:	e02c      	b.n	800af60 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af06:	f3ef 8305 	mrs	r3, IPSR
 800af0a:	60fb      	str	r3, [r7, #12]
  return(result);
 800af0c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d01a      	beq.n	800af48 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800af12:	2300      	movs	r3, #0
 800af14:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800af16:	f107 0308 	add.w	r3, r7, #8
 800af1a:	4619      	mov	r1, r3
 800af1c:	6938      	ldr	r0, [r7, #16]
 800af1e:	f000 fc63 	bl	800b7e8 <xQueueGiveFromISR>
 800af22:	4603      	mov	r3, r0
 800af24:	2b01      	cmp	r3, #1
 800af26:	d003      	beq.n	800af30 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800af28:	f06f 0302 	mvn.w	r3, #2
 800af2c:	617b      	str	r3, [r7, #20]
 800af2e:	e017      	b.n	800af60 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d014      	beq.n	800af60 <osSemaphoreRelease+0x78>
 800af36:	4b0d      	ldr	r3, [pc, #52]	@ (800af6c <osSemaphoreRelease+0x84>)
 800af38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af3c:	601a      	str	r2, [r3, #0]
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	e00b      	b.n	800af60 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800af48:	2300      	movs	r3, #0
 800af4a:	2200      	movs	r2, #0
 800af4c:	2100      	movs	r1, #0
 800af4e:	6938      	ldr	r0, [r7, #16]
 800af50:	f000 faaa 	bl	800b4a8 <xQueueGenericSend>
 800af54:	4603      	mov	r3, r0
 800af56:	2b01      	cmp	r3, #1
 800af58:	d002      	beq.n	800af60 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800af5a:	f06f 0302 	mvn.w	r3, #2
 800af5e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800af60:	697b      	ldr	r3, [r7, #20]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3718      	adds	r7, #24
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	e000ed04 	.word	0xe000ed04

0800af70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4a07      	ldr	r2, [pc, #28]	@ (800af9c <vApplicationGetIdleTaskMemory+0x2c>)
 800af80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	4a06      	ldr	r2, [pc, #24]	@ (800afa0 <vApplicationGetIdleTaskMemory+0x30>)
 800af86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2280      	movs	r2, #128	@ 0x80
 800af8c:	601a      	str	r2, [r3, #0]
}
 800af8e:	bf00      	nop
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	20001904 	.word	0x20001904
 800afa0:	20001960 	.word	0x20001960

0800afa4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4a07      	ldr	r2, [pc, #28]	@ (800afd0 <vApplicationGetTimerTaskMemory+0x2c>)
 800afb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	4a06      	ldr	r2, [pc, #24]	@ (800afd4 <vApplicationGetTimerTaskMemory+0x30>)
 800afba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afc2:	601a      	str	r2, [r3, #0]
}
 800afc4:	bf00      	nop
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	20001b60 	.word	0x20001b60
 800afd4:	20001bbc 	.word	0x20001bbc

0800afd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f103 0208 	add.w	r2, r3, #8
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f04f 32ff 	mov.w	r2, #4294967295
 800aff0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f103 0208 	add.w	r2, r3, #8
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f103 0208 	add.w	r2, r3, #8
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b026:	bf00      	nop
 800b028:	370c      	adds	r7, #12
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b032:	b480      	push	{r7}
 800b034:	b085      	sub	sp, #20
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	689a      	ldr	r2, [r3, #8]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	683a      	ldr	r2, [r7, #0]
 800b056:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	1c5a      	adds	r2, r3, #1
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	601a      	str	r2, [r3, #0]
}
 800b06e:	bf00      	nop
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b07a:	b480      	push	{r7}
 800b07c:	b085      	sub	sp, #20
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b090:	d103      	bne.n	800b09a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	60fb      	str	r3, [r7, #12]
 800b098:	e00c      	b.n	800b0b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	3308      	adds	r3, #8
 800b09e:	60fb      	str	r3, [r7, #12]
 800b0a0:	e002      	b.n	800b0a8 <vListInsert+0x2e>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d2f6      	bcs.n	800b0a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	601a      	str	r2, [r3, #0]
}
 800b0e0:	bf00      	nop
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	6892      	ldr	r2, [r2, #8]
 800b102:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	6852      	ldr	r2, [r2, #4]
 800b10c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	429a      	cmp	r2, r3
 800b116:	d103      	bne.n	800b120 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	689a      	ldr	r2, [r3, #8]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	1e5a      	subs	r2, r3, #1
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10b      	bne.n	800b16c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b158:	f383 8811 	msr	BASEPRI, r3
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b166:	bf00      	nop
 800b168:	bf00      	nop
 800b16a:	e7fd      	b.n	800b168 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b16c:	f002 fcac 	bl	800dac8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b178:	68f9      	ldr	r1, [r7, #12]
 800b17a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b17c:	fb01 f303 	mul.w	r3, r1, r3
 800b180:	441a      	add	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b19c:	3b01      	subs	r3, #1
 800b19e:	68f9      	ldr	r1, [r7, #12]
 800b1a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b1a2:	fb01 f303 	mul.w	r3, r1, r3
 800b1a6:	441a      	add	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	22ff      	movs	r2, #255	@ 0xff
 800b1b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	22ff      	movs	r2, #255	@ 0xff
 800b1b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d114      	bne.n	800b1ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d01a      	beq.n	800b200 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3310      	adds	r3, #16
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f001 fc4c 	bl	800ca6c <xTaskRemoveFromEventList>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d012      	beq.n	800b200 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b1da:	4b0d      	ldr	r3, [pc, #52]	@ (800b210 <xQueueGenericReset+0xd0>)
 800b1dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	e009      	b.n	800b200 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3310      	adds	r3, #16
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff fef1 	bl	800afd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3324      	adds	r3, #36	@ 0x24
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7ff feec 	bl	800afd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b200:	f002 fc94 	bl	800db2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b204:	2301      	movs	r3, #1
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	e000ed04 	.word	0xe000ed04

0800b214 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08e      	sub	sp, #56	@ 0x38
 800b218:	af02      	add	r7, sp, #8
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10b      	bne.n	800b240 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b22c:	f383 8811 	msr	BASEPRI, r3
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b23a:	bf00      	nop
 800b23c:	bf00      	nop
 800b23e:	e7fd      	b.n	800b23c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10b      	bne.n	800b25e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b258:	bf00      	nop
 800b25a:	bf00      	nop
 800b25c:	e7fd      	b.n	800b25a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <xQueueGenericCreateStatic+0x56>
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <xQueueGenericCreateStatic+0x5a>
 800b26a:	2301      	movs	r3, #1
 800b26c:	e000      	b.n	800b270 <xQueueGenericCreateStatic+0x5c>
 800b26e:	2300      	movs	r3, #0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10b      	bne.n	800b28c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	623b      	str	r3, [r7, #32]
}
 800b286:	bf00      	nop
 800b288:	bf00      	nop
 800b28a:	e7fd      	b.n	800b288 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d102      	bne.n	800b298 <xQueueGenericCreateStatic+0x84>
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <xQueueGenericCreateStatic+0x88>
 800b298:	2301      	movs	r3, #1
 800b29a:	e000      	b.n	800b29e <xQueueGenericCreateStatic+0x8a>
 800b29c:	2300      	movs	r3, #0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10b      	bne.n	800b2ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	61fb      	str	r3, [r7, #28]
}
 800b2b4:	bf00      	nop
 800b2b6:	bf00      	nop
 800b2b8:	e7fd      	b.n	800b2b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b2ba:	2350      	movs	r3, #80	@ 0x50
 800b2bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b50      	cmp	r3, #80	@ 0x50
 800b2c2:	d00b      	beq.n	800b2dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	61bb      	str	r3, [r7, #24]
}
 800b2d6:	bf00      	nop
 800b2d8:	bf00      	nop
 800b2da:	e7fd      	b.n	800b2d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b2dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00d      	beq.n	800b304 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f000 f840 	bl	800b384 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b306:	4618      	mov	r0, r3
 800b308:	3730      	adds	r7, #48	@ 0x30
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b08a      	sub	sp, #40	@ 0x28
 800b312:	af02      	add	r7, sp, #8
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	60b9      	str	r1, [r7, #8]
 800b318:	4613      	mov	r3, r2
 800b31a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10b      	bne.n	800b33a <xQueueGenericCreate+0x2c>
	__asm volatile
 800b322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	613b      	str	r3, [r7, #16]
}
 800b334:	bf00      	nop
 800b336:	bf00      	nop
 800b338:	e7fd      	b.n	800b336 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	fb02 f303 	mul.w	r3, r2, r3
 800b342:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	3350      	adds	r3, #80	@ 0x50
 800b348:	4618      	mov	r0, r3
 800b34a:	f002 fcdf 	bl	800dd0c <pvPortMalloc>
 800b34e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d011      	beq.n	800b37a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	3350      	adds	r3, #80	@ 0x50
 800b35e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	2200      	movs	r2, #0
 800b364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b368:	79fa      	ldrb	r2, [r7, #7]
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	4613      	mov	r3, r2
 800b370:	697a      	ldr	r2, [r7, #20]
 800b372:	68b9      	ldr	r1, [r7, #8]
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 f805 	bl	800b384 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b37a:	69bb      	ldr	r3, [r7, #24]
	}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3720      	adds	r7, #32
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
 800b390:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d103      	bne.n	800b3a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	69ba      	ldr	r2, [r7, #24]
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	e002      	b.n	800b3a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	69b8      	ldr	r0, [r7, #24]
 800b3b6:	f7ff fec3 	bl	800b140 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	78fa      	ldrb	r2, [r7, #3]
 800b3be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b3c2:	bf00      	nop
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b08a      	sub	sp, #40	@ 0x28
 800b3ce:	af02      	add	r7, sp, #8
 800b3d0:	60f8      	str	r0, [r7, #12]
 800b3d2:	60b9      	str	r1, [r7, #8]
 800b3d4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10b      	bne.n	800b3f4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800b3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e0:	f383 8811 	msr	BASEPRI, r3
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	61bb      	str	r3, [r7, #24]
}
 800b3ee:	bf00      	nop
 800b3f0:	bf00      	nop
 800b3f2:	e7fd      	b.n	800b3f0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d90b      	bls.n	800b414 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	617b      	str	r3, [r7, #20]
}
 800b40e:	bf00      	nop
 800b410:	bf00      	nop
 800b412:	e7fd      	b.n	800b410 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b414:	2302      	movs	r3, #2
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	2100      	movs	r1, #0
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f7ff fef8 	bl	800b214 <xQueueGenericCreateStatic>
 800b424:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	68ba      	ldr	r2, [r7, #8]
 800b430:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b432:	69fb      	ldr	r3, [r7, #28]
	}
 800b434:	4618      	mov	r0, r3
 800b436:	3720      	adds	r7, #32
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10b      	bne.n	800b464 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800b44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b450:	f383 8811 	msr	BASEPRI, r3
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	613b      	str	r3, [r7, #16]
}
 800b45e:	bf00      	nop
 800b460:	bf00      	nop
 800b462:	e7fd      	b.n	800b460 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b464:	683a      	ldr	r2, [r7, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d90b      	bls.n	800b484 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800b46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	60fb      	str	r3, [r7, #12]
}
 800b47e:	bf00      	nop
 800b480:	bf00      	nop
 800b482:	e7fd      	b.n	800b480 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b484:	2202      	movs	r2, #2
 800b486:	2100      	movs	r1, #0
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7ff ff40 	bl	800b30e <xQueueGenericCreate>
 800b48e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b49c:	697b      	ldr	r3, [r7, #20]
	}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3718      	adds	r7, #24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
	...

0800b4a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08e      	sub	sp, #56	@ 0x38
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
 800b4b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10b      	bne.n	800b4dc <xQueueGenericSend+0x34>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b4d6:	bf00      	nop
 800b4d8:	bf00      	nop
 800b4da:	e7fd      	b.n	800b4d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d103      	bne.n	800b4ea <xQueueGenericSend+0x42>
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d101      	bne.n	800b4ee <xQueueGenericSend+0x46>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e000      	b.n	800b4f0 <xQueueGenericSend+0x48>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10b      	bne.n	800b50c <xQueueGenericSend+0x64>
	__asm volatile
 800b4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f8:	f383 8811 	msr	BASEPRI, r3
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f3bf 8f4f 	dsb	sy
 800b504:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b506:	bf00      	nop
 800b508:	bf00      	nop
 800b50a:	e7fd      	b.n	800b508 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d103      	bne.n	800b51a <xQueueGenericSend+0x72>
 800b512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b516:	2b01      	cmp	r3, #1
 800b518:	d101      	bne.n	800b51e <xQueueGenericSend+0x76>
 800b51a:	2301      	movs	r3, #1
 800b51c:	e000      	b.n	800b520 <xQueueGenericSend+0x78>
 800b51e:	2300      	movs	r3, #0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10b      	bne.n	800b53c <xQueueGenericSend+0x94>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	623b      	str	r3, [r7, #32]
}
 800b536:	bf00      	nop
 800b538:	bf00      	nop
 800b53a:	e7fd      	b.n	800b538 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b53c:	f001 fc56 	bl	800cdec <xTaskGetSchedulerState>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d102      	bne.n	800b54c <xQueueGenericSend+0xa4>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d101      	bne.n	800b550 <xQueueGenericSend+0xa8>
 800b54c:	2301      	movs	r3, #1
 800b54e:	e000      	b.n	800b552 <xQueueGenericSend+0xaa>
 800b550:	2300      	movs	r3, #0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d10b      	bne.n	800b56e <xQueueGenericSend+0xc6>
	__asm volatile
 800b556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b55a:	f383 8811 	msr	BASEPRI, r3
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	61fb      	str	r3, [r7, #28]
}
 800b568:	bf00      	nop
 800b56a:	bf00      	nop
 800b56c:	e7fd      	b.n	800b56a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b56e:	f002 faab 	bl	800dac8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d302      	bcc.n	800b584 <xQueueGenericSend+0xdc>
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2b02      	cmp	r3, #2
 800b582:	d129      	bne.n	800b5d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b584:	683a      	ldr	r2, [r7, #0]
 800b586:	68b9      	ldr	r1, [r7, #8]
 800b588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b58a:	f000 fc6d 	bl	800be68 <prvCopyDataToQueue>
 800b58e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b594:	2b00      	cmp	r3, #0
 800b596:	d010      	beq.n	800b5ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	3324      	adds	r3, #36	@ 0x24
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 fa65 	bl	800ca6c <xTaskRemoveFromEventList>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d013      	beq.n	800b5d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b5a8:	4b3f      	ldr	r3, [pc, #252]	@ (800b6a8 <xQueueGenericSend+0x200>)
 800b5aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5ae:	601a      	str	r2, [r3, #0]
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	e00a      	b.n	800b5d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d007      	beq.n	800b5d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b5c0:	4b39      	ldr	r3, [pc, #228]	@ (800b6a8 <xQueueGenericSend+0x200>)
 800b5c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5c6:	601a      	str	r2, [r3, #0]
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b5d0:	f002 faac 	bl	800db2c <vPortExitCritical>
				return pdPASS;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e063      	b.n	800b6a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d103      	bne.n	800b5e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5de:	f002 faa5 	bl	800db2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e05c      	b.n	800b6a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d106      	bne.n	800b5fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5ec:	f107 0314 	add.w	r3, r7, #20
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f001 fa9f 	bl	800cb34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5fa:	f002 fa97 	bl	800db2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5fe:	f001 f80f 	bl	800c620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b602:	f002 fa61 	bl	800dac8 <vPortEnterCritical>
 800b606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b608:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b60c:	b25b      	sxtb	r3, r3
 800b60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b612:	d103      	bne.n	800b61c <xQueueGenericSend+0x174>
 800b614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b616:	2200      	movs	r2, #0
 800b618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b622:	b25b      	sxtb	r3, r3
 800b624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b628:	d103      	bne.n	800b632 <xQueueGenericSend+0x18a>
 800b62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b632:	f002 fa7b 	bl	800db2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b636:	1d3a      	adds	r2, r7, #4
 800b638:	f107 0314 	add.w	r3, r7, #20
 800b63c:	4611      	mov	r1, r2
 800b63e:	4618      	mov	r0, r3
 800b640:	f001 fa8e 	bl	800cb60 <xTaskCheckForTimeOut>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d124      	bne.n	800b694 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b64a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b64c:	f000 fd04 	bl	800c058 <prvIsQueueFull>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d018      	beq.n	800b688 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b658:	3310      	adds	r3, #16
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	4611      	mov	r1, r2
 800b65e:	4618      	mov	r0, r3
 800b660:	f001 f9b2 	bl	800c9c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b664:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b666:	f000 fc8f 	bl	800bf88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b66a:	f000 ffe7 	bl	800c63c <xTaskResumeAll>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	f47f af7c 	bne.w	800b56e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b676:	4b0c      	ldr	r3, [pc, #48]	@ (800b6a8 <xQueueGenericSend+0x200>)
 800b678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	f3bf 8f6f 	isb	sy
 800b686:	e772      	b.n	800b56e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b688:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b68a:	f000 fc7d 	bl	800bf88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b68e:	f000 ffd5 	bl	800c63c <xTaskResumeAll>
 800b692:	e76c      	b.n	800b56e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b694:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b696:	f000 fc77 	bl	800bf88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b69a:	f000 ffcf 	bl	800c63c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b69e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3738      	adds	r7, #56	@ 0x38
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	e000ed04 	.word	0xe000ed04

0800b6ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b090      	sub	sp, #64	@ 0x40
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
 800b6b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10b      	bne.n	800b6dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b6d6:	bf00      	nop
 800b6d8:	bf00      	nop
 800b6da:	e7fd      	b.n	800b6d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d103      	bne.n	800b6ea <xQueueGenericSendFromISR+0x3e>
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <xQueueGenericSendFromISR+0x42>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e000      	b.n	800b6f0 <xQueueGenericSendFromISR+0x44>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10b      	bne.n	800b70c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b706:	bf00      	nop
 800b708:	bf00      	nop
 800b70a:	e7fd      	b.n	800b708 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d103      	bne.n	800b71a <xQueueGenericSendFromISR+0x6e>
 800b712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b716:	2b01      	cmp	r3, #1
 800b718:	d101      	bne.n	800b71e <xQueueGenericSendFromISR+0x72>
 800b71a:	2301      	movs	r3, #1
 800b71c:	e000      	b.n	800b720 <xQueueGenericSendFromISR+0x74>
 800b71e:	2300      	movs	r3, #0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10b      	bne.n	800b73c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	623b      	str	r3, [r7, #32]
}
 800b736:	bf00      	nop
 800b738:	bf00      	nop
 800b73a:	e7fd      	b.n	800b738 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b73c:	f002 faa4 	bl	800dc88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b740:	f3ef 8211 	mrs	r2, BASEPRI
 800b744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	61fa      	str	r2, [r7, #28]
 800b756:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b758:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b75a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b764:	429a      	cmp	r2, r3
 800b766:	d302      	bcc.n	800b76e <xQueueGenericSendFromISR+0xc2>
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	2b02      	cmp	r3, #2
 800b76c:	d12f      	bne.n	800b7ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b770:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b774:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b77c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	68b9      	ldr	r1, [r7, #8]
 800b782:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b784:	f000 fb70 	bl	800be68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b788:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b790:	d112      	bne.n	800b7b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b796:	2b00      	cmp	r3, #0
 800b798:	d016      	beq.n	800b7c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79c:	3324      	adds	r3, #36	@ 0x24
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f001 f964 	bl	800ca6c <xTaskRemoveFromEventList>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00e      	beq.n	800b7c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00b      	beq.n	800b7c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	e007      	b.n	800b7c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b7b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b7bc:	3301      	adds	r3, #1
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	b25a      	sxtb	r2, r3
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b7cc:	e001      	b.n	800b7d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b7dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3740      	adds	r7, #64	@ 0x40
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b08e      	sub	sp, #56	@ 0x38
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10b      	bne.n	800b814 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	623b      	str	r3, [r7, #32]
}
 800b80e:	bf00      	nop
 800b810:	bf00      	nop
 800b812:	e7fd      	b.n	800b810 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00b      	beq.n	800b834 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b820:	f383 8811 	msr	BASEPRI, r3
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	61fb      	str	r3, [r7, #28]
}
 800b82e:	bf00      	nop
 800b830:	bf00      	nop
 800b832:	e7fd      	b.n	800b830 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d103      	bne.n	800b844 <xQueueGiveFromISR+0x5c>
 800b83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <xQueueGiveFromISR+0x60>
 800b844:	2301      	movs	r3, #1
 800b846:	e000      	b.n	800b84a <xQueueGiveFromISR+0x62>
 800b848:	2300      	movs	r3, #0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10b      	bne.n	800b866 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	61bb      	str	r3, [r7, #24]
}
 800b860:	bf00      	nop
 800b862:	bf00      	nop
 800b864:	e7fd      	b.n	800b862 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b866:	f002 fa0f 	bl	800dc88 <vPortValidateInterruptPriority>
	__asm volatile
 800b86a:	f3ef 8211 	mrs	r2, BASEPRI
 800b86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	617a      	str	r2, [r7, #20]
 800b880:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b882:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b884:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b88a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b88e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b892:	429a      	cmp	r2, r3
 800b894:	d22b      	bcs.n	800b8ee <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b898:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b89c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b0:	d112      	bne.n	800b8d8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d016      	beq.n	800b8e8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8bc:	3324      	adds	r3, #36	@ 0x24
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f001 f8d4 	bl	800ca6c <xTaskRemoveFromEventList>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00e      	beq.n	800b8e8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00b      	beq.n	800b8e8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	601a      	str	r2, [r3, #0]
 800b8d6:	e007      	b.n	800b8e8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b8d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8dc:	3301      	adds	r3, #1
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	b25a      	sxtb	r2, r3
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8ec:	e001      	b.n	800b8f2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f383 8811 	msr	BASEPRI, r3
}
 800b8fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b900:	4618      	mov	r0, r3
 800b902:	3738      	adds	r7, #56	@ 0x38
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08c      	sub	sp, #48	@ 0x30
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b914:	2300      	movs	r3, #0
 800b916:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10b      	bne.n	800b93a <xQueueReceive+0x32>
	__asm volatile
 800b922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	623b      	str	r3, [r7, #32]
}
 800b934:	bf00      	nop
 800b936:	bf00      	nop
 800b938:	e7fd      	b.n	800b936 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d103      	bne.n	800b948 <xQueueReceive+0x40>
 800b940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b944:	2b00      	cmp	r3, #0
 800b946:	d101      	bne.n	800b94c <xQueueReceive+0x44>
 800b948:	2301      	movs	r3, #1
 800b94a:	e000      	b.n	800b94e <xQueueReceive+0x46>
 800b94c:	2300      	movs	r3, #0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d10b      	bne.n	800b96a <xQueueReceive+0x62>
	__asm volatile
 800b952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	61fb      	str	r3, [r7, #28]
}
 800b964:	bf00      	nop
 800b966:	bf00      	nop
 800b968:	e7fd      	b.n	800b966 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b96a:	f001 fa3f 	bl	800cdec <xTaskGetSchedulerState>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d102      	bne.n	800b97a <xQueueReceive+0x72>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <xQueueReceive+0x76>
 800b97a:	2301      	movs	r3, #1
 800b97c:	e000      	b.n	800b980 <xQueueReceive+0x78>
 800b97e:	2300      	movs	r3, #0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10b      	bne.n	800b99c <xQueueReceive+0x94>
	__asm volatile
 800b984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b988:	f383 8811 	msr	BASEPRI, r3
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	61bb      	str	r3, [r7, #24]
}
 800b996:	bf00      	nop
 800b998:	bf00      	nop
 800b99a:	e7fd      	b.n	800b998 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b99c:	f002 f894 	bl	800dac8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d01f      	beq.n	800b9ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9ac:	68b9      	ldr	r1, [r7, #8]
 800b9ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9b0:	f000 fac4 	bl	800bf3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b6:	1e5a      	subs	r2, r3, #1
 800b9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00f      	beq.n	800b9e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c6:	3310      	adds	r3, #16
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f001 f84f 	bl	800ca6c <xTaskRemoveFromEventList>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d007      	beq.n	800b9e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9d4:	4b3c      	ldr	r3, [pc, #240]	@ (800bac8 <xQueueReceive+0x1c0>)
 800b9d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9e4:	f002 f8a2 	bl	800db2c <vPortExitCritical>
				return pdPASS;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e069      	b.n	800bac0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d103      	bne.n	800b9fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9f2:	f002 f89b 	bl	800db2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e062      	b.n	800bac0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d106      	bne.n	800ba0e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba00:	f107 0310 	add.w	r3, r7, #16
 800ba04:	4618      	mov	r0, r3
 800ba06:	f001 f895 	bl	800cb34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba0e:	f002 f88d 	bl	800db2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba12:	f000 fe05 	bl	800c620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba16:	f002 f857 	bl	800dac8 <vPortEnterCritical>
 800ba1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba20:	b25b      	sxtb	r3, r3
 800ba22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba26:	d103      	bne.n	800ba30 <xQueueReceive+0x128>
 800ba28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba36:	b25b      	sxtb	r3, r3
 800ba38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba3c:	d103      	bne.n	800ba46 <xQueueReceive+0x13e>
 800ba3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba46:	f002 f871 	bl	800db2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba4a:	1d3a      	adds	r2, r7, #4
 800ba4c:	f107 0310 	add.w	r3, r7, #16
 800ba50:	4611      	mov	r1, r2
 800ba52:	4618      	mov	r0, r3
 800ba54:	f001 f884 	bl	800cb60 <xTaskCheckForTimeOut>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d123      	bne.n	800baa6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba60:	f000 fae4 	bl	800c02c <prvIsQueueEmpty>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d017      	beq.n	800ba9a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6c:	3324      	adds	r3, #36	@ 0x24
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 ffa8 	bl	800c9c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba7a:	f000 fa85 	bl	800bf88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba7e:	f000 fddd 	bl	800c63c <xTaskResumeAll>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d189      	bne.n	800b99c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ba88:	4b0f      	ldr	r3, [pc, #60]	@ (800bac8 <xQueueReceive+0x1c0>)
 800ba8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	e780      	b.n	800b99c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba9c:	f000 fa74 	bl	800bf88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800baa0:	f000 fdcc 	bl	800c63c <xTaskResumeAll>
 800baa4:	e77a      	b.n	800b99c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800baa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800baa8:	f000 fa6e 	bl	800bf88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800baac:	f000 fdc6 	bl	800c63c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bab0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bab2:	f000 fabb 	bl	800c02c <prvIsQueueEmpty>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f43f af6f 	beq.w	800b99c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800babe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3730      	adds	r7, #48	@ 0x30
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	e000ed04 	.word	0xe000ed04

0800bacc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b08e      	sub	sp, #56	@ 0x38
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bad6:	2300      	movs	r3, #0
 800bad8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bade:	2300      	movs	r3, #0
 800bae0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10b      	bne.n	800bb00 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	623b      	str	r3, [r7, #32]
}
 800bafa:	bf00      	nop
 800bafc:	bf00      	nop
 800bafe:	e7fd      	b.n	800bafc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d00b      	beq.n	800bb20 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800bb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0c:	f383 8811 	msr	BASEPRI, r3
 800bb10:	f3bf 8f6f 	isb	sy
 800bb14:	f3bf 8f4f 	dsb	sy
 800bb18:	61fb      	str	r3, [r7, #28]
}
 800bb1a:	bf00      	nop
 800bb1c:	bf00      	nop
 800bb1e:	e7fd      	b.n	800bb1c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb20:	f001 f964 	bl	800cdec <xTaskGetSchedulerState>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <xQueueSemaphoreTake+0x64>
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <xQueueSemaphoreTake+0x68>
 800bb30:	2301      	movs	r3, #1
 800bb32:	e000      	b.n	800bb36 <xQueueSemaphoreTake+0x6a>
 800bb34:	2300      	movs	r3, #0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10b      	bne.n	800bb52 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	61bb      	str	r3, [r7, #24]
}
 800bb4c:	bf00      	nop
 800bb4e:	bf00      	nop
 800bb50:	e7fd      	b.n	800bb4e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb52:	f001 ffb9 	bl	800dac8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb5a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bb5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d024      	beq.n	800bbac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb64:	1e5a      	subs	r2, r3, #1
 800bb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb68:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d104      	bne.n	800bb7c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bb72:	f001 fab5 	bl	800d0e0 <pvTaskIncrementMutexHeldCount>
 800bb76:	4602      	mov	r2, r0
 800bb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00f      	beq.n	800bba4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb86:	3310      	adds	r3, #16
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 ff6f 	bl	800ca6c <xTaskRemoveFromEventList>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d007      	beq.n	800bba4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb94:	4b54      	ldr	r3, [pc, #336]	@ (800bce8 <xQueueSemaphoreTake+0x21c>)
 800bb96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb9a:	601a      	str	r2, [r3, #0]
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bba4:	f001 ffc2 	bl	800db2c <vPortExitCritical>
				return pdPASS;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e098      	b.n	800bcde <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d112      	bne.n	800bbd8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00b      	beq.n	800bbd0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800bbb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	617b      	str	r3, [r7, #20]
}
 800bbca:	bf00      	nop
 800bbcc:	bf00      	nop
 800bbce:	e7fd      	b.n	800bbcc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bbd0:	f001 ffac 	bl	800db2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	e082      	b.n	800bcde <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbde:	f107 030c 	add.w	r3, r7, #12
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 ffa6 	bl	800cb34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbec:	f001 ff9e 	bl	800db2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbf0:	f000 fd16 	bl	800c620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbf4:	f001 ff68 	bl	800dac8 <vPortEnterCritical>
 800bbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbfe:	b25b      	sxtb	r3, r3
 800bc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc04:	d103      	bne.n	800bc0e <xQueueSemaphoreTake+0x142>
 800bc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc14:	b25b      	sxtb	r3, r3
 800bc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1a:	d103      	bne.n	800bc24 <xQueueSemaphoreTake+0x158>
 800bc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc24:	f001 ff82 	bl	800db2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc28:	463a      	mov	r2, r7
 800bc2a:	f107 030c 	add.w	r3, r7, #12
 800bc2e:	4611      	mov	r1, r2
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 ff95 	bl	800cb60 <xTaskCheckForTimeOut>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d132      	bne.n	800bca2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc3e:	f000 f9f5 	bl	800c02c <prvIsQueueEmpty>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d026      	beq.n	800bc96 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d109      	bne.n	800bc64 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bc50:	f001 ff3a 	bl	800dac8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f001 f8e5 	bl	800ce28 <xTaskPriorityInherit>
 800bc5e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bc60:	f001 ff64 	bl	800db2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc66:	3324      	adds	r3, #36	@ 0x24
 800bc68:	683a      	ldr	r2, [r7, #0]
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f000 feab 	bl	800c9c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc74:	f000 f988 	bl	800bf88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc78:	f000 fce0 	bl	800c63c <xTaskResumeAll>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f47f af67 	bne.w	800bb52 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bc84:	4b18      	ldr	r3, [pc, #96]	@ (800bce8 <xQueueSemaphoreTake+0x21c>)
 800bc86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc8a:	601a      	str	r2, [r3, #0]
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	e75d      	b.n	800bb52 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bc96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc98:	f000 f976 	bl	800bf88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc9c:	f000 fcce 	bl	800c63c <xTaskResumeAll>
 800bca0:	e757      	b.n	800bb52 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bca2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bca4:	f000 f970 	bl	800bf88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bca8:	f000 fcc8 	bl	800c63c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bcae:	f000 f9bd 	bl	800c02c <prvIsQueueEmpty>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f43f af4c 	beq.w	800bb52 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00d      	beq.n	800bcdc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800bcc0:	f001 ff02 	bl	800dac8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bcc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bcc6:	f000 f8b7 	bl	800be38 <prvGetDisinheritPriorityAfterTimeout>
 800bcca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f001 f980 	bl	800cfd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bcd8:	f001 ff28 	bl	800db2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bcdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3738      	adds	r7, #56	@ 0x38
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	e000ed04 	.word	0xe000ed04

0800bcec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b08e      	sub	sp, #56	@ 0x38
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10b      	bne.n	800bd1a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	623b      	str	r3, [r7, #32]
}
 800bd14:	bf00      	nop
 800bd16:	bf00      	nop
 800bd18:	e7fd      	b.n	800bd16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d103      	bne.n	800bd28 <xQueueReceiveFromISR+0x3c>
 800bd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d101      	bne.n	800bd2c <xQueueReceiveFromISR+0x40>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e000      	b.n	800bd2e <xQueueReceiveFromISR+0x42>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d10b      	bne.n	800bd4a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd36:	f383 8811 	msr	BASEPRI, r3
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	61fb      	str	r3, [r7, #28]
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop
 800bd48:	e7fd      	b.n	800bd46 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd4a:	f001 ff9d 	bl	800dc88 <vPortValidateInterruptPriority>
	__asm volatile
 800bd4e:	f3ef 8211 	mrs	r2, BASEPRI
 800bd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	61ba      	str	r2, [r7, #24]
 800bd64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bd66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd6e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d02f      	beq.n	800bdd6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd80:	68b9      	ldr	r1, [r7, #8]
 800bd82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd84:	f000 f8da 	bl	800bf3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8a:	1e5a      	subs	r2, r3, #1
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bd90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd98:	d112      	bne.n	800bdc0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9c:	691b      	ldr	r3, [r3, #16]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d016      	beq.n	800bdd0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda4:	3310      	adds	r3, #16
 800bda6:	4618      	mov	r0, r3
 800bda8:	f000 fe60 	bl	800ca6c <xTaskRemoveFromEventList>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00e      	beq.n	800bdd0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00b      	beq.n	800bdd0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	601a      	str	r2, [r3, #0]
 800bdbe:	e007      	b.n	800bdd0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bdc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	b25a      	sxtb	r2, r3
 800bdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdd4:	e001      	b.n	800bdda <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bddc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	f383 8811 	msr	BASEPRI, r3
}
 800bde4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bde6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3738      	adds	r7, #56	@ 0x38
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10b      	bne.n	800be1a <vQueueDelete+0x2a>
	__asm volatile
 800be02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	60bb      	str	r3, [r7, #8]
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop
 800be18:	e7fd      	b.n	800be16 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f000 f95e 	bl	800c0dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800be26:	2b00      	cmp	r3, #0
 800be28:	d102      	bne.n	800be30 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f002 f83c 	bl	800dea8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800be30:	bf00      	nop
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be44:	2b00      	cmp	r3, #0
 800be46:	d006      	beq.n	800be56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800be52:	60fb      	str	r3, [r7, #12]
 800be54:	e001      	b.n	800be5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800be56:	2300      	movs	r3, #0
 800be58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800be5a:	68fb      	ldr	r3, [r7, #12]
	}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3714      	adds	r7, #20
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b086      	sub	sp, #24
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be74:	2300      	movs	r3, #0
 800be76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10d      	bne.n	800bea2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d14d      	bne.n	800bf2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	4618      	mov	r0, r3
 800be94:	f001 f830 	bl	800cef8 <xTaskPriorityDisinherit>
 800be98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2200      	movs	r2, #0
 800be9e:	609a      	str	r2, [r3, #8]
 800bea0:	e043      	b.n	800bf2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d119      	bne.n	800bedc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6858      	ldr	r0, [r3, #4]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beb0:	461a      	mov	r2, r3
 800beb2:	68b9      	ldr	r1, [r7, #8]
 800beb4:	f003 fad5 	bl	800f462 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	685a      	ldr	r2, [r3, #4]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bec0:	441a      	add	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d32b      	bcc.n	800bf2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	605a      	str	r2, [r3, #4]
 800beda:	e026      	b.n	800bf2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	68d8      	ldr	r0, [r3, #12]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bee4:	461a      	mov	r2, r3
 800bee6:	68b9      	ldr	r1, [r7, #8]
 800bee8:	f003 fabb 	bl	800f462 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	68da      	ldr	r2, [r3, #12]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bef4:	425b      	negs	r3, r3
 800bef6:	441a      	add	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	68da      	ldr	r2, [r3, #12]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d207      	bcs.n	800bf18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	689a      	ldr	r2, [r3, #8]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf10:	425b      	negs	r3, r3
 800bf12:	441a      	add	r2, r3
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b02      	cmp	r3, #2
 800bf1c:	d105      	bne.n	800bf2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d002      	beq.n	800bf2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	3b01      	subs	r3, #1
 800bf28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	1c5a      	adds	r2, r3, #1
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bf32:	697b      	ldr	r3, [r7, #20]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3718      	adds	r7, #24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d018      	beq.n	800bf80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	68da      	ldr	r2, [r3, #12]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf56:	441a      	add	r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	68da      	ldr	r2, [r3, #12]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d303      	bcc.n	800bf70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	68d9      	ldr	r1, [r3, #12]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf78:	461a      	mov	r2, r3
 800bf7a:	6838      	ldr	r0, [r7, #0]
 800bf7c:	f003 fa71 	bl	800f462 <memcpy>
	}
}
 800bf80:	bf00      	nop
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf90:	f001 fd9a 	bl	800dac8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf9c:	e011      	b.n	800bfc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d012      	beq.n	800bfcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	3324      	adds	r3, #36	@ 0x24
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f000 fd5e 	bl	800ca6c <xTaskRemoveFromEventList>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bfb6:	f000 fe37 	bl	800cc28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	dce9      	bgt.n	800bf9e <prvUnlockQueue+0x16>
 800bfca:	e000      	b.n	800bfce <prvUnlockQueue+0x46>
					break;
 800bfcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	22ff      	movs	r2, #255	@ 0xff
 800bfd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bfd6:	f001 fda9 	bl	800db2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bfda:	f001 fd75 	bl	800dac8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bfe4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfe6:	e011      	b.n	800c00c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	691b      	ldr	r3, [r3, #16]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d012      	beq.n	800c016 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	3310      	adds	r3, #16
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 fd39 	bl	800ca6c <xTaskRemoveFromEventList>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d001      	beq.n	800c004 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c000:	f000 fe12 	bl	800cc28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c004:	7bbb      	ldrb	r3, [r7, #14]
 800c006:	3b01      	subs	r3, #1
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c00c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c010:	2b00      	cmp	r3, #0
 800c012:	dce9      	bgt.n	800bfe8 <prvUnlockQueue+0x60>
 800c014:	e000      	b.n	800c018 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c016:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	22ff      	movs	r2, #255	@ 0xff
 800c01c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c020:	f001 fd84 	bl	800db2c <vPortExitCritical>
}
 800c024:	bf00      	nop
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c034:	f001 fd48 	bl	800dac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d102      	bne.n	800c046 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c040:	2301      	movs	r3, #1
 800c042:	60fb      	str	r3, [r7, #12]
 800c044:	e001      	b.n	800c04a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c046:	2300      	movs	r3, #0
 800c048:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c04a:	f001 fd6f 	bl	800db2c <vPortExitCritical>

	return xReturn;
 800c04e:	68fb      	ldr	r3, [r7, #12]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c060:	f001 fd32 	bl	800dac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d102      	bne.n	800c076 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c070:	2301      	movs	r3, #1
 800c072:	60fb      	str	r3, [r7, #12]
 800c074:	e001      	b.n	800c07a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c076:	2300      	movs	r3, #0
 800c078:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c07a:	f001 fd57 	bl	800db2c <vPortExitCritical>

	return xReturn;
 800c07e:	68fb      	ldr	r3, [r7, #12]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3710      	adds	r7, #16
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c092:	2300      	movs	r3, #0
 800c094:	60fb      	str	r3, [r7, #12]
 800c096:	e014      	b.n	800c0c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c098:	4a0f      	ldr	r2, [pc, #60]	@ (800c0d8 <vQueueAddToRegistry+0x50>)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10b      	bne.n	800c0bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c0a4:	490c      	ldr	r1, [pc, #48]	@ (800c0d8 <vQueueAddToRegistry+0x50>)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	683a      	ldr	r2, [r7, #0]
 800c0aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c0ae:	4a0a      	ldr	r2, [pc, #40]	@ (800c0d8 <vQueueAddToRegistry+0x50>)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	4413      	add	r3, r2
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c0ba:	e006      	b.n	800c0ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	60fb      	str	r3, [r7, #12]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2b07      	cmp	r3, #7
 800c0c6:	d9e7      	bls.n	800c098 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c0c8:	bf00      	nop
 800c0ca:	bf00      	nop
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	20001fbc 	.word	0x20001fbc

0800c0dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	e016      	b.n	800c118 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c0ea:	4a10      	ldr	r2, [pc, #64]	@ (800c12c <vQueueUnregisterQueue+0x50>)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	00db      	lsls	r3, r3, #3
 800c0f0:	4413      	add	r3, r2
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d10b      	bne.n	800c112 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c0fa:	4a0c      	ldr	r2, [pc, #48]	@ (800c12c <vQueueUnregisterQueue+0x50>)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2100      	movs	r1, #0
 800c100:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c104:	4a09      	ldr	r2, [pc, #36]	@ (800c12c <vQueueUnregisterQueue+0x50>)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	00db      	lsls	r3, r3, #3
 800c10a:	4413      	add	r3, r2
 800c10c:	2200      	movs	r2, #0
 800c10e:	605a      	str	r2, [r3, #4]
				break;
 800c110:	e006      	b.n	800c120 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	3301      	adds	r3, #1
 800c116:	60fb      	str	r3, [r7, #12]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2b07      	cmp	r3, #7
 800c11c:	d9e5      	bls.n	800c0ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c11e:	bf00      	nop
 800c120:	bf00      	nop
 800c122:	3714      	adds	r7, #20
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	20001fbc 	.word	0x20001fbc

0800c130 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c140:	f001 fcc2 	bl	800dac8 <vPortEnterCritical>
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c14a:	b25b      	sxtb	r3, r3
 800c14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c150:	d103      	bne.n	800c15a <vQueueWaitForMessageRestricted+0x2a>
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c160:	b25b      	sxtb	r3, r3
 800c162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c166:	d103      	bne.n	800c170 <vQueueWaitForMessageRestricted+0x40>
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	2200      	movs	r2, #0
 800c16c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c170:	f001 fcdc 	bl	800db2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d106      	bne.n	800c18a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	3324      	adds	r3, #36	@ 0x24
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	68b9      	ldr	r1, [r7, #8]
 800c184:	4618      	mov	r0, r3
 800c186:	f000 fc45 	bl	800ca14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c18a:	6978      	ldr	r0, [r7, #20]
 800c18c:	f7ff fefc 	bl	800bf88 <prvUnlockQueue>
	}
 800c190:	bf00      	nop
 800c192:	3718      	adds	r7, #24
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b08e      	sub	sp, #56	@ 0x38
 800c19c:	af04      	add	r7, sp, #16
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
 800c1a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c1a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10b      	bne.n	800c1c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	623b      	str	r3, [r7, #32]
}
 800c1be:	bf00      	nop
 800c1c0:	bf00      	nop
 800c1c2:	e7fd      	b.n	800c1c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10b      	bne.n	800c1e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	61fb      	str	r3, [r7, #28]
}
 800c1dc:	bf00      	nop
 800c1de:	bf00      	nop
 800c1e0:	e7fd      	b.n	800c1de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c1e2:	235c      	movs	r3, #92	@ 0x5c
 800c1e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1ea:	d00b      	beq.n	800c204 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	61bb      	str	r3, [r7, #24]
}
 800c1fe:	bf00      	nop
 800c200:	bf00      	nop
 800c202:	e7fd      	b.n	800c200 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c204:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d01e      	beq.n	800c24a <xTaskCreateStatic+0xb2>
 800c20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d01b      	beq.n	800c24a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c214:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c218:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c21a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21e:	2202      	movs	r2, #2
 800c220:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c224:	2300      	movs	r3, #0
 800c226:	9303      	str	r3, [sp, #12]
 800c228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c22a:	9302      	str	r3, [sp, #8]
 800c22c:	f107 0314 	add.w	r3, r7, #20
 800c230:	9301      	str	r3, [sp, #4]
 800c232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	68b9      	ldr	r1, [r7, #8]
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f000 f850 	bl	800c2e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c242:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c244:	f000 f8de 	bl	800c404 <prvAddNewTaskToReadyList>
 800c248:	e001      	b.n	800c24e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c24a:	2300      	movs	r3, #0
 800c24c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c24e:	697b      	ldr	r3, [r7, #20]
	}
 800c250:	4618      	mov	r0, r3
 800c252:	3728      	adds	r7, #40	@ 0x28
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08c      	sub	sp, #48	@ 0x30
 800c25c:	af04      	add	r7, sp, #16
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	603b      	str	r3, [r7, #0]
 800c264:	4613      	mov	r3, r2
 800c266:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c268:	88fb      	ldrh	r3, [r7, #6]
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4618      	mov	r0, r3
 800c26e:	f001 fd4d 	bl	800dd0c <pvPortMalloc>
 800c272:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00e      	beq.n	800c298 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c27a:	205c      	movs	r0, #92	@ 0x5c
 800c27c:	f001 fd46 	bl	800dd0c <pvPortMalloc>
 800c280:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d003      	beq.n	800c290 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	697a      	ldr	r2, [r7, #20]
 800c28c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c28e:	e005      	b.n	800c29c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c290:	6978      	ldr	r0, [r7, #20]
 800c292:	f001 fe09 	bl	800dea8 <vPortFree>
 800c296:	e001      	b.n	800c29c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c298:	2300      	movs	r3, #0
 800c29a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d017      	beq.n	800c2d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c2aa:	88fa      	ldrh	r2, [r7, #6]
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	9303      	str	r3, [sp, #12]
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	9302      	str	r3, [sp, #8]
 800c2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b6:	9301      	str	r3, [sp, #4]
 800c2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	68b9      	ldr	r1, [r7, #8]
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f000 f80e 	bl	800c2e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2c6:	69f8      	ldr	r0, [r7, #28]
 800c2c8:	f000 f89c 	bl	800c404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	61bb      	str	r3, [r7, #24]
 800c2d0:	e002      	b.n	800c2d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c2d8:	69bb      	ldr	r3, [r7, #24]
	}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3720      	adds	r7, #32
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b088      	sub	sp, #32
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	60f8      	str	r0, [r7, #12]
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	607a      	str	r2, [r7, #4]
 800c2ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	21a5      	movs	r1, #165	@ 0xa5
 800c2fc:	f002 ff9a 	bl	800f234 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c302:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c30a:	3b01      	subs	r3, #1
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	4413      	add	r3, r2
 800c310:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	f023 0307 	bic.w	r3, r3, #7
 800c318:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	f003 0307 	and.w	r3, r3, #7
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00b      	beq.n	800c33c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	617b      	str	r3, [r7, #20]
}
 800c336:	bf00      	nop
 800c338:	bf00      	nop
 800c33a:	e7fd      	b.n	800c338 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d01f      	beq.n	800c382 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c342:	2300      	movs	r3, #0
 800c344:	61fb      	str	r3, [r7, #28]
 800c346:	e012      	b.n	800c36e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	4413      	add	r3, r2
 800c34e:	7819      	ldrb	r1, [r3, #0]
 800c350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	4413      	add	r3, r2
 800c356:	3334      	adds	r3, #52	@ 0x34
 800c358:	460a      	mov	r2, r1
 800c35a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	4413      	add	r3, r2
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d006      	beq.n	800c376 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	3301      	adds	r3, #1
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	2b0f      	cmp	r3, #15
 800c372:	d9e9      	bls.n	800c348 <prvInitialiseNewTask+0x66>
 800c374:	e000      	b.n	800c378 <prvInitialiseNewTask+0x96>
			{
				break;
 800c376:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c380:	e003      	b.n	800c38a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c38c:	2b37      	cmp	r3, #55	@ 0x37
 800c38e:	d901      	bls.n	800c394 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c390:	2337      	movs	r3, #55	@ 0x37
 800c392:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c398:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c39c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c39e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7fe fe34 	bl	800b018 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b2:	3318      	adds	r3, #24
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fe fe2f 	bl	800b018 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c3de:	683a      	ldr	r2, [r7, #0]
 800c3e0:	68f9      	ldr	r1, [r7, #12]
 800c3e2:	69b8      	ldr	r0, [r7, #24]
 800c3e4:	f001 fa3e 	bl	800d864 <pxPortInitialiseStack>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3fa:	bf00      	nop
 800c3fc:	3720      	adds	r7, #32
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
	...

0800c404 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c40c:	f001 fb5c 	bl	800dac8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c410:	4b2d      	ldr	r3, [pc, #180]	@ (800c4c8 <prvAddNewTaskToReadyList+0xc4>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3301      	adds	r3, #1
 800c416:	4a2c      	ldr	r2, [pc, #176]	@ (800c4c8 <prvAddNewTaskToReadyList+0xc4>)
 800c418:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c41a:	4b2c      	ldr	r3, [pc, #176]	@ (800c4cc <prvAddNewTaskToReadyList+0xc8>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d109      	bne.n	800c436 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c422:	4a2a      	ldr	r2, [pc, #168]	@ (800c4cc <prvAddNewTaskToReadyList+0xc8>)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c428:	4b27      	ldr	r3, [pc, #156]	@ (800c4c8 <prvAddNewTaskToReadyList+0xc4>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d110      	bne.n	800c452 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c430:	f000 fc1e 	bl	800cc70 <prvInitialiseTaskLists>
 800c434:	e00d      	b.n	800c452 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c436:	4b26      	ldr	r3, [pc, #152]	@ (800c4d0 <prvAddNewTaskToReadyList+0xcc>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d109      	bne.n	800c452 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c43e:	4b23      	ldr	r3, [pc, #140]	@ (800c4cc <prvAddNewTaskToReadyList+0xc8>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c448:	429a      	cmp	r2, r3
 800c44a:	d802      	bhi.n	800c452 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c44c:	4a1f      	ldr	r2, [pc, #124]	@ (800c4cc <prvAddNewTaskToReadyList+0xc8>)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c452:	4b20      	ldr	r3, [pc, #128]	@ (800c4d4 <prvAddNewTaskToReadyList+0xd0>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3301      	adds	r3, #1
 800c458:	4a1e      	ldr	r2, [pc, #120]	@ (800c4d4 <prvAddNewTaskToReadyList+0xd0>)
 800c45a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c45c:	4b1d      	ldr	r3, [pc, #116]	@ (800c4d4 <prvAddNewTaskToReadyList+0xd0>)
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c468:	4b1b      	ldr	r3, [pc, #108]	@ (800c4d8 <prvAddNewTaskToReadyList+0xd4>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d903      	bls.n	800c478 <prvAddNewTaskToReadyList+0x74>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c474:	4a18      	ldr	r2, [pc, #96]	@ (800c4d8 <prvAddNewTaskToReadyList+0xd4>)
 800c476:	6013      	str	r3, [r2, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c47c:	4613      	mov	r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	4413      	add	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4a15      	ldr	r2, [pc, #84]	@ (800c4dc <prvAddNewTaskToReadyList+0xd8>)
 800c486:	441a      	add	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	3304      	adds	r3, #4
 800c48c:	4619      	mov	r1, r3
 800c48e:	4610      	mov	r0, r2
 800c490:	f7fe fdcf 	bl	800b032 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c494:	f001 fb4a 	bl	800db2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c498:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d0 <prvAddNewTaskToReadyList+0xcc>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00e      	beq.n	800c4be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c4cc <prvAddNewTaskToReadyList+0xc8>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d207      	bcs.n	800c4be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4ae:	4b0c      	ldr	r3, [pc, #48]	@ (800c4e0 <prvAddNewTaskToReadyList+0xdc>)
 800c4b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4be:	bf00      	nop
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	200024d0 	.word	0x200024d0
 800c4cc:	20001ffc 	.word	0x20001ffc
 800c4d0:	200024dc 	.word	0x200024dc
 800c4d4:	200024ec 	.word	0x200024ec
 800c4d8:	200024d8 	.word	0x200024d8
 800c4dc:	20002000 	.word	0x20002000
 800c4e0:	e000ed04 	.word	0xe000ed04

0800c4e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d018      	beq.n	800c528 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c4f6:	4b14      	ldr	r3, [pc, #80]	@ (800c548 <vTaskDelay+0x64>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00b      	beq.n	800c516 <vTaskDelay+0x32>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	60bb      	str	r3, [r7, #8]
}
 800c510:	bf00      	nop
 800c512:	bf00      	nop
 800c514:	e7fd      	b.n	800c512 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c516:	f000 f883 	bl	800c620 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c51a:	2100      	movs	r1, #0
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fdf3 	bl	800d108 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c522:	f000 f88b 	bl	800c63c <xTaskResumeAll>
 800c526:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d107      	bne.n	800c53e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c52e:	4b07      	ldr	r3, [pc, #28]	@ (800c54c <vTaskDelay+0x68>)
 800c530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c53e:	bf00      	nop
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	200024f8 	.word	0x200024f8
 800c54c:	e000ed04 	.word	0xe000ed04

0800c550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b08a      	sub	sp, #40	@ 0x28
 800c554:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c556:	2300      	movs	r3, #0
 800c558:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c55a:	2300      	movs	r3, #0
 800c55c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c55e:	463a      	mov	r2, r7
 800c560:	1d39      	adds	r1, r7, #4
 800c562:	f107 0308 	add.w	r3, r7, #8
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe fd02 	bl	800af70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	9202      	str	r2, [sp, #8]
 800c574:	9301      	str	r3, [sp, #4]
 800c576:	2300      	movs	r3, #0
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	2300      	movs	r3, #0
 800c57c:	460a      	mov	r2, r1
 800c57e:	4922      	ldr	r1, [pc, #136]	@ (800c608 <vTaskStartScheduler+0xb8>)
 800c580:	4822      	ldr	r0, [pc, #136]	@ (800c60c <vTaskStartScheduler+0xbc>)
 800c582:	f7ff fe09 	bl	800c198 <xTaskCreateStatic>
 800c586:	4603      	mov	r3, r0
 800c588:	4a21      	ldr	r2, [pc, #132]	@ (800c610 <vTaskStartScheduler+0xc0>)
 800c58a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c58c:	4b20      	ldr	r3, [pc, #128]	@ (800c610 <vTaskStartScheduler+0xc0>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d002      	beq.n	800c59a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c594:	2301      	movs	r3, #1
 800c596:	617b      	str	r3, [r7, #20]
 800c598:	e001      	b.n	800c59e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c59a:	2300      	movs	r3, #0
 800c59c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d102      	bne.n	800c5aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c5a4:	f000 fe04 	bl	800d1b0 <xTimerCreateTimerTask>
 800c5a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d116      	bne.n	800c5de <vTaskStartScheduler+0x8e>
	__asm volatile
 800c5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b4:	f383 8811 	msr	BASEPRI, r3
 800c5b8:	f3bf 8f6f 	isb	sy
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	613b      	str	r3, [r7, #16]
}
 800c5c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c5c4:	4b13      	ldr	r3, [pc, #76]	@ (800c614 <vTaskStartScheduler+0xc4>)
 800c5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c5cc:	4b12      	ldr	r3, [pc, #72]	@ (800c618 <vTaskStartScheduler+0xc8>)
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c5d2:	4b12      	ldr	r3, [pc, #72]	@ (800c61c <vTaskStartScheduler+0xcc>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c5d8:	f001 f9d2 	bl	800d980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c5dc:	e00f      	b.n	800c5fe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e4:	d10b      	bne.n	800c5fe <vTaskStartScheduler+0xae>
	__asm volatile
 800c5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ea:	f383 8811 	msr	BASEPRI, r3
 800c5ee:	f3bf 8f6f 	isb	sy
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	60fb      	str	r3, [r7, #12]
}
 800c5f8:	bf00      	nop
 800c5fa:	bf00      	nop
 800c5fc:	e7fd      	b.n	800c5fa <vTaskStartScheduler+0xaa>
}
 800c5fe:	bf00      	nop
 800c600:	3718      	adds	r7, #24
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	08013490 	.word	0x08013490
 800c60c:	0800cc41 	.word	0x0800cc41
 800c610:	200024f4 	.word	0x200024f4
 800c614:	200024f0 	.word	0x200024f0
 800c618:	200024dc 	.word	0x200024dc
 800c61c:	200024d4 	.word	0x200024d4

0800c620 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c620:	b480      	push	{r7}
 800c622:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c624:	4b04      	ldr	r3, [pc, #16]	@ (800c638 <vTaskSuspendAll+0x18>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	3301      	adds	r3, #1
 800c62a:	4a03      	ldr	r2, [pc, #12]	@ (800c638 <vTaskSuspendAll+0x18>)
 800c62c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c62e:	bf00      	nop
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr
 800c638:	200024f8 	.word	0x200024f8

0800c63c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c642:	2300      	movs	r3, #0
 800c644:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c646:	2300      	movs	r3, #0
 800c648:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c64a:	4b42      	ldr	r3, [pc, #264]	@ (800c754 <xTaskResumeAll+0x118>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10b      	bne.n	800c66a <xTaskResumeAll+0x2e>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	603b      	str	r3, [r7, #0]
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop
 800c668:	e7fd      	b.n	800c666 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c66a:	f001 fa2d 	bl	800dac8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c66e:	4b39      	ldr	r3, [pc, #228]	@ (800c754 <xTaskResumeAll+0x118>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	3b01      	subs	r3, #1
 800c674:	4a37      	ldr	r2, [pc, #220]	@ (800c754 <xTaskResumeAll+0x118>)
 800c676:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c678:	4b36      	ldr	r3, [pc, #216]	@ (800c754 <xTaskResumeAll+0x118>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d162      	bne.n	800c746 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c680:	4b35      	ldr	r3, [pc, #212]	@ (800c758 <xTaskResumeAll+0x11c>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d05e      	beq.n	800c746 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c688:	e02f      	b.n	800c6ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c68a:	4b34      	ldr	r3, [pc, #208]	@ (800c75c <xTaskResumeAll+0x120>)
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	3318      	adds	r3, #24
 800c696:	4618      	mov	r0, r3
 800c698:	f7fe fd28 	bl	800b0ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7fe fd23 	bl	800b0ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6aa:	4b2d      	ldr	r3, [pc, #180]	@ (800c760 <xTaskResumeAll+0x124>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d903      	bls.n	800c6ba <xTaskResumeAll+0x7e>
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b6:	4a2a      	ldr	r2, [pc, #168]	@ (800c760 <xTaskResumeAll+0x124>)
 800c6b8:	6013      	str	r3, [r2, #0]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6be:	4613      	mov	r3, r2
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	4413      	add	r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4a27      	ldr	r2, [pc, #156]	@ (800c764 <xTaskResumeAll+0x128>)
 800c6c8:	441a      	add	r2, r3
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	3304      	adds	r3, #4
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	f7fe fcae 	bl	800b032 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6da:	4b23      	ldr	r3, [pc, #140]	@ (800c768 <xTaskResumeAll+0x12c>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d302      	bcc.n	800c6ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c6e4:	4b21      	ldr	r3, [pc, #132]	@ (800c76c <xTaskResumeAll+0x130>)
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6ea:	4b1c      	ldr	r3, [pc, #112]	@ (800c75c <xTaskResumeAll+0x120>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1cb      	bne.n	800c68a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d001      	beq.n	800c6fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c6f8:	f000 fb58 	bl	800cdac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c6fc:	4b1c      	ldr	r3, [pc, #112]	@ (800c770 <xTaskResumeAll+0x134>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d010      	beq.n	800c72a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c708:	f000 f846 	bl	800c798 <xTaskIncrementTick>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d002      	beq.n	800c718 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c712:	4b16      	ldr	r3, [pc, #88]	@ (800c76c <xTaskResumeAll+0x130>)
 800c714:	2201      	movs	r2, #1
 800c716:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1f1      	bne.n	800c708 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c724:	4b12      	ldr	r3, [pc, #72]	@ (800c770 <xTaskResumeAll+0x134>)
 800c726:	2200      	movs	r2, #0
 800c728:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c72a:	4b10      	ldr	r3, [pc, #64]	@ (800c76c <xTaskResumeAll+0x130>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d009      	beq.n	800c746 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c732:	2301      	movs	r3, #1
 800c734:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c736:	4b0f      	ldr	r3, [pc, #60]	@ (800c774 <xTaskResumeAll+0x138>)
 800c738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c746:	f001 f9f1 	bl	800db2c <vPortExitCritical>

	return xAlreadyYielded;
 800c74a:	68bb      	ldr	r3, [r7, #8]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	200024f8 	.word	0x200024f8
 800c758:	200024d0 	.word	0x200024d0
 800c75c:	20002490 	.word	0x20002490
 800c760:	200024d8 	.word	0x200024d8
 800c764:	20002000 	.word	0x20002000
 800c768:	20001ffc 	.word	0x20001ffc
 800c76c:	200024e4 	.word	0x200024e4
 800c770:	200024e0 	.word	0x200024e0
 800c774:	e000ed04 	.word	0xe000ed04

0800c778 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c77e:	4b05      	ldr	r3, [pc, #20]	@ (800c794 <xTaskGetTickCount+0x1c>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c784:	687b      	ldr	r3, [r7, #4]
}
 800c786:	4618      	mov	r0, r3
 800c788:	370c      	adds	r7, #12
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	200024d4 	.word	0x200024d4

0800c798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7a2:	4b4f      	ldr	r3, [pc, #316]	@ (800c8e0 <xTaskIncrementTick+0x148>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f040 8090 	bne.w	800c8cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c7ac:	4b4d      	ldr	r3, [pc, #308]	@ (800c8e4 <xTaskIncrementTick+0x14c>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c7b4:	4a4b      	ldr	r2, [pc, #300]	@ (800c8e4 <xTaskIncrementTick+0x14c>)
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d121      	bne.n	800c804 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c7c0:	4b49      	ldr	r3, [pc, #292]	@ (800c8e8 <xTaskIncrementTick+0x150>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00b      	beq.n	800c7e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	603b      	str	r3, [r7, #0]
}
 800c7dc:	bf00      	nop
 800c7de:	bf00      	nop
 800c7e0:	e7fd      	b.n	800c7de <xTaskIncrementTick+0x46>
 800c7e2:	4b41      	ldr	r3, [pc, #260]	@ (800c8e8 <xTaskIncrementTick+0x150>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	60fb      	str	r3, [r7, #12]
 800c7e8:	4b40      	ldr	r3, [pc, #256]	@ (800c8ec <xTaskIncrementTick+0x154>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a3e      	ldr	r2, [pc, #248]	@ (800c8e8 <xTaskIncrementTick+0x150>)
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	4a3e      	ldr	r2, [pc, #248]	@ (800c8ec <xTaskIncrementTick+0x154>)
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6013      	str	r3, [r2, #0]
 800c7f6:	4b3e      	ldr	r3, [pc, #248]	@ (800c8f0 <xTaskIncrementTick+0x158>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	4a3c      	ldr	r2, [pc, #240]	@ (800c8f0 <xTaskIncrementTick+0x158>)
 800c7fe:	6013      	str	r3, [r2, #0]
 800c800:	f000 fad4 	bl	800cdac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c804:	4b3b      	ldr	r3, [pc, #236]	@ (800c8f4 <xTaskIncrementTick+0x15c>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d349      	bcc.n	800c8a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c80e:	4b36      	ldr	r3, [pc, #216]	@ (800c8e8 <xTaskIncrementTick+0x150>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d104      	bne.n	800c822 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c818:	4b36      	ldr	r3, [pc, #216]	@ (800c8f4 <xTaskIncrementTick+0x15c>)
 800c81a:	f04f 32ff 	mov.w	r2, #4294967295
 800c81e:	601a      	str	r2, [r3, #0]
					break;
 800c820:	e03f      	b.n	800c8a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c822:	4b31      	ldr	r3, [pc, #196]	@ (800c8e8 <xTaskIncrementTick+0x150>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	429a      	cmp	r2, r3
 800c838:	d203      	bcs.n	800c842 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c83a:	4a2e      	ldr	r2, [pc, #184]	@ (800c8f4 <xTaskIncrementTick+0x15c>)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c840:	e02f      	b.n	800c8a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	3304      	adds	r3, #4
 800c846:	4618      	mov	r0, r3
 800c848:	f7fe fc50 	bl	800b0ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c850:	2b00      	cmp	r3, #0
 800c852:	d004      	beq.n	800c85e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	3318      	adds	r3, #24
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fe fc47 	bl	800b0ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c862:	4b25      	ldr	r3, [pc, #148]	@ (800c8f8 <xTaskIncrementTick+0x160>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	429a      	cmp	r2, r3
 800c868:	d903      	bls.n	800c872 <xTaskIncrementTick+0xda>
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c86e:	4a22      	ldr	r2, [pc, #136]	@ (800c8f8 <xTaskIncrementTick+0x160>)
 800c870:	6013      	str	r3, [r2, #0]
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c876:	4613      	mov	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4413      	add	r3, r2
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	4a1f      	ldr	r2, [pc, #124]	@ (800c8fc <xTaskIncrementTick+0x164>)
 800c880:	441a      	add	r2, r3
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	3304      	adds	r3, #4
 800c886:	4619      	mov	r1, r3
 800c888:	4610      	mov	r0, r2
 800c88a:	f7fe fbd2 	bl	800b032 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c892:	4b1b      	ldr	r3, [pc, #108]	@ (800c900 <xTaskIncrementTick+0x168>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c898:	429a      	cmp	r2, r3
 800c89a:	d3b8      	bcc.n	800c80e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c89c:	2301      	movs	r3, #1
 800c89e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8a0:	e7b5      	b.n	800c80e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c8a2:	4b17      	ldr	r3, [pc, #92]	@ (800c900 <xTaskIncrementTick+0x168>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8a8:	4914      	ldr	r1, [pc, #80]	@ (800c8fc <xTaskIncrementTick+0x164>)
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	440b      	add	r3, r1
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d901      	bls.n	800c8be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c8be:	4b11      	ldr	r3, [pc, #68]	@ (800c904 <xTaskIncrementTick+0x16c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d007      	beq.n	800c8d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	617b      	str	r3, [r7, #20]
 800c8ca:	e004      	b.n	800c8d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c8cc:	4b0e      	ldr	r3, [pc, #56]	@ (800c908 <xTaskIncrementTick+0x170>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	4a0d      	ldr	r2, [pc, #52]	@ (800c908 <xTaskIncrementTick+0x170>)
 800c8d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c8d6:	697b      	ldr	r3, [r7, #20]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3718      	adds	r7, #24
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	200024f8 	.word	0x200024f8
 800c8e4:	200024d4 	.word	0x200024d4
 800c8e8:	20002488 	.word	0x20002488
 800c8ec:	2000248c 	.word	0x2000248c
 800c8f0:	200024e8 	.word	0x200024e8
 800c8f4:	200024f0 	.word	0x200024f0
 800c8f8:	200024d8 	.word	0x200024d8
 800c8fc:	20002000 	.word	0x20002000
 800c900:	20001ffc 	.word	0x20001ffc
 800c904:	200024e4 	.word	0x200024e4
 800c908:	200024e0 	.word	0x200024e0

0800c90c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c912:	4b28      	ldr	r3, [pc, #160]	@ (800c9b4 <vTaskSwitchContext+0xa8>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c91a:	4b27      	ldr	r3, [pc, #156]	@ (800c9b8 <vTaskSwitchContext+0xac>)
 800c91c:	2201      	movs	r2, #1
 800c91e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c920:	e042      	b.n	800c9a8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800c922:	4b25      	ldr	r3, [pc, #148]	@ (800c9b8 <vTaskSwitchContext+0xac>)
 800c924:	2200      	movs	r2, #0
 800c926:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c928:	4b24      	ldr	r3, [pc, #144]	@ (800c9bc <vTaskSwitchContext+0xb0>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	60fb      	str	r3, [r7, #12]
 800c92e:	e011      	b.n	800c954 <vTaskSwitchContext+0x48>
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d10b      	bne.n	800c94e <vTaskSwitchContext+0x42>
	__asm volatile
 800c936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c93a:	f383 8811 	msr	BASEPRI, r3
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	607b      	str	r3, [r7, #4]
}
 800c948:	bf00      	nop
 800c94a:	bf00      	nop
 800c94c:	e7fd      	b.n	800c94a <vTaskSwitchContext+0x3e>
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3b01      	subs	r3, #1
 800c952:	60fb      	str	r3, [r7, #12]
 800c954:	491a      	ldr	r1, [pc, #104]	@ (800c9c0 <vTaskSwitchContext+0xb4>)
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	4613      	mov	r3, r2
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	4413      	add	r3, r2
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	440b      	add	r3, r1
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d0e3      	beq.n	800c930 <vTaskSwitchContext+0x24>
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	4613      	mov	r3, r2
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	4413      	add	r3, r2
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	4a13      	ldr	r2, [pc, #76]	@ (800c9c0 <vTaskSwitchContext+0xb4>)
 800c974:	4413      	add	r3, r2
 800c976:	60bb      	str	r3, [r7, #8]
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	605a      	str	r2, [r3, #4]
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	685a      	ldr	r2, [r3, #4]
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	3308      	adds	r3, #8
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d104      	bne.n	800c998 <vTaskSwitchContext+0x8c>
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	605a      	str	r2, [r3, #4]
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	4a09      	ldr	r2, [pc, #36]	@ (800c9c4 <vTaskSwitchContext+0xb8>)
 800c9a0:	6013      	str	r3, [r2, #0]
 800c9a2:	4a06      	ldr	r2, [pc, #24]	@ (800c9bc <vTaskSwitchContext+0xb0>)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6013      	str	r3, [r2, #0]
}
 800c9a8:	bf00      	nop
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr
 800c9b4:	200024f8 	.word	0x200024f8
 800c9b8:	200024e4 	.word	0x200024e4
 800c9bc:	200024d8 	.word	0x200024d8
 800c9c0:	20002000 	.word	0x20002000
 800c9c4:	20001ffc 	.word	0x20001ffc

0800c9c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10b      	bne.n	800c9f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9dc:	f383 8811 	msr	BASEPRI, r3
 800c9e0:	f3bf 8f6f 	isb	sy
 800c9e4:	f3bf 8f4f 	dsb	sy
 800c9e8:	60fb      	str	r3, [r7, #12]
}
 800c9ea:	bf00      	nop
 800c9ec:	bf00      	nop
 800c9ee:	e7fd      	b.n	800c9ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c9f0:	4b07      	ldr	r3, [pc, #28]	@ (800ca10 <vTaskPlaceOnEventList+0x48>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3318      	adds	r3, #24
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f7fe fb3e 	bl	800b07a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c9fe:	2101      	movs	r1, #1
 800ca00:	6838      	ldr	r0, [r7, #0]
 800ca02:	f000 fb81 	bl	800d108 <prvAddCurrentTaskToDelayedList>
}
 800ca06:	bf00      	nop
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	20001ffc 	.word	0x20001ffc

0800ca14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b086      	sub	sp, #24
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10b      	bne.n	800ca3e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ca26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca2a:	f383 8811 	msr	BASEPRI, r3
 800ca2e:	f3bf 8f6f 	isb	sy
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	617b      	str	r3, [r7, #20]
}
 800ca38:	bf00      	nop
 800ca3a:	bf00      	nop
 800ca3c:	e7fd      	b.n	800ca3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ca68 <vTaskPlaceOnEventListRestricted+0x54>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	3318      	adds	r3, #24
 800ca44:	4619      	mov	r1, r3
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f7fe faf3 	bl	800b032 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d002      	beq.n	800ca58 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ca52:	f04f 33ff 	mov.w	r3, #4294967295
 800ca56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ca58:	6879      	ldr	r1, [r7, #4]
 800ca5a:	68b8      	ldr	r0, [r7, #8]
 800ca5c:	f000 fb54 	bl	800d108 <prvAddCurrentTaskToDelayedList>
	}
 800ca60:	bf00      	nop
 800ca62:	3718      	adds	r7, #24
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	20001ffc 	.word	0x20001ffc

0800ca6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b086      	sub	sp, #24
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d10b      	bne.n	800ca9a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ca82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca86:	f383 8811 	msr	BASEPRI, r3
 800ca8a:	f3bf 8f6f 	isb	sy
 800ca8e:	f3bf 8f4f 	dsb	sy
 800ca92:	60fb      	str	r3, [r7, #12]
}
 800ca94:	bf00      	nop
 800ca96:	bf00      	nop
 800ca98:	e7fd      	b.n	800ca96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	3318      	adds	r3, #24
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fe fb24 	bl	800b0ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caa4:	4b1d      	ldr	r3, [pc, #116]	@ (800cb1c <xTaskRemoveFromEventList+0xb0>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d11d      	bne.n	800cae8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	3304      	adds	r3, #4
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7fe fb1b 	bl	800b0ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caba:	4b19      	ldr	r3, [pc, #100]	@ (800cb20 <xTaskRemoveFromEventList+0xb4>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d903      	bls.n	800caca <xTaskRemoveFromEventList+0x5e>
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cac6:	4a16      	ldr	r2, [pc, #88]	@ (800cb20 <xTaskRemoveFromEventList+0xb4>)
 800cac8:	6013      	str	r3, [r2, #0]
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cace:	4613      	mov	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	4a13      	ldr	r2, [pc, #76]	@ (800cb24 <xTaskRemoveFromEventList+0xb8>)
 800cad8:	441a      	add	r2, r3
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	3304      	adds	r3, #4
 800cade:	4619      	mov	r1, r3
 800cae0:	4610      	mov	r0, r2
 800cae2:	f7fe faa6 	bl	800b032 <vListInsertEnd>
 800cae6:	e005      	b.n	800caf4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	3318      	adds	r3, #24
 800caec:	4619      	mov	r1, r3
 800caee:	480e      	ldr	r0, [pc, #56]	@ (800cb28 <xTaskRemoveFromEventList+0xbc>)
 800caf0:	f7fe fa9f 	bl	800b032 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caf8:	4b0c      	ldr	r3, [pc, #48]	@ (800cb2c <xTaskRemoveFromEventList+0xc0>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d905      	bls.n	800cb0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cb02:	2301      	movs	r3, #1
 800cb04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cb06:	4b0a      	ldr	r3, [pc, #40]	@ (800cb30 <xTaskRemoveFromEventList+0xc4>)
 800cb08:	2201      	movs	r2, #1
 800cb0a:	601a      	str	r2, [r3, #0]
 800cb0c:	e001      	b.n	800cb12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cb12:	697b      	ldr	r3, [r7, #20]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3718      	adds	r7, #24
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	200024f8 	.word	0x200024f8
 800cb20:	200024d8 	.word	0x200024d8
 800cb24:	20002000 	.word	0x20002000
 800cb28:	20002490 	.word	0x20002490
 800cb2c:	20001ffc 	.word	0x20001ffc
 800cb30:	200024e4 	.word	0x200024e4

0800cb34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb3c:	4b06      	ldr	r3, [pc, #24]	@ (800cb58 <vTaskInternalSetTimeOutState+0x24>)
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cb44:	4b05      	ldr	r3, [pc, #20]	@ (800cb5c <vTaskInternalSetTimeOutState+0x28>)
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	605a      	str	r2, [r3, #4]
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr
 800cb58:	200024e8 	.word	0x200024e8
 800cb5c:	200024d4 	.word	0x200024d4

0800cb60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b088      	sub	sp, #32
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d10b      	bne.n	800cb88 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	613b      	str	r3, [r7, #16]
}
 800cb82:	bf00      	nop
 800cb84:	bf00      	nop
 800cb86:	e7fd      	b.n	800cb84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10b      	bne.n	800cba6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb92:	f383 8811 	msr	BASEPRI, r3
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	60fb      	str	r3, [r7, #12]
}
 800cba0:	bf00      	nop
 800cba2:	bf00      	nop
 800cba4:	e7fd      	b.n	800cba2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cba6:	f000 ff8f 	bl	800dac8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cbaa:	4b1d      	ldr	r3, [pc, #116]	@ (800cc20 <xTaskCheckForTimeOut+0xc0>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	69ba      	ldr	r2, [r7, #24]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc2:	d102      	bne.n	800cbca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	61fb      	str	r3, [r7, #28]
 800cbc8:	e023      	b.n	800cc12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	4b15      	ldr	r3, [pc, #84]	@ (800cc24 <xTaskCheckForTimeOut+0xc4>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d007      	beq.n	800cbe6 <xTaskCheckForTimeOut+0x86>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	69ba      	ldr	r2, [r7, #24]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d302      	bcc.n	800cbe6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	61fb      	str	r3, [r7, #28]
 800cbe4:	e015      	b.n	800cc12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d20b      	bcs.n	800cc08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	1ad2      	subs	r2, r2, r3
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff ff99 	bl	800cb34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc02:	2300      	movs	r3, #0
 800cc04:	61fb      	str	r3, [r7, #28]
 800cc06:	e004      	b.n	800cc12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc12:	f000 ff8b 	bl	800db2c <vPortExitCritical>

	return xReturn;
 800cc16:	69fb      	ldr	r3, [r7, #28]
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3720      	adds	r7, #32
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	200024d4 	.word	0x200024d4
 800cc24:	200024e8 	.word	0x200024e8

0800cc28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc28:	b480      	push	{r7}
 800cc2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc2c:	4b03      	ldr	r3, [pc, #12]	@ (800cc3c <vTaskMissedYield+0x14>)
 800cc2e:	2201      	movs	r2, #1
 800cc30:	601a      	str	r2, [r3, #0]
}
 800cc32:	bf00      	nop
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	200024e4 	.word	0x200024e4

0800cc40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cc48:	f000 f852 	bl	800ccf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cc4c:	4b06      	ldr	r3, [pc, #24]	@ (800cc68 <prvIdleTask+0x28>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d9f9      	bls.n	800cc48 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cc54:	4b05      	ldr	r3, [pc, #20]	@ (800cc6c <prvIdleTask+0x2c>)
 800cc56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc5a:	601a      	str	r2, [r3, #0]
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cc64:	e7f0      	b.n	800cc48 <prvIdleTask+0x8>
 800cc66:	bf00      	nop
 800cc68:	20002000 	.word	0x20002000
 800cc6c:	e000ed04 	.word	0xe000ed04

0800cc70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc76:	2300      	movs	r3, #0
 800cc78:	607b      	str	r3, [r7, #4]
 800cc7a:	e00c      	b.n	800cc96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4413      	add	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4a12      	ldr	r2, [pc, #72]	@ (800ccd0 <prvInitialiseTaskLists+0x60>)
 800cc88:	4413      	add	r3, r2
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fe f9a4 	bl	800afd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	3301      	adds	r3, #1
 800cc94:	607b      	str	r3, [r7, #4]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b37      	cmp	r3, #55	@ 0x37
 800cc9a:	d9ef      	bls.n	800cc7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cc9c:	480d      	ldr	r0, [pc, #52]	@ (800ccd4 <prvInitialiseTaskLists+0x64>)
 800cc9e:	f7fe f99b 	bl	800afd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cca2:	480d      	ldr	r0, [pc, #52]	@ (800ccd8 <prvInitialiseTaskLists+0x68>)
 800cca4:	f7fe f998 	bl	800afd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cca8:	480c      	ldr	r0, [pc, #48]	@ (800ccdc <prvInitialiseTaskLists+0x6c>)
 800ccaa:	f7fe f995 	bl	800afd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ccae:	480c      	ldr	r0, [pc, #48]	@ (800cce0 <prvInitialiseTaskLists+0x70>)
 800ccb0:	f7fe f992 	bl	800afd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ccb4:	480b      	ldr	r0, [pc, #44]	@ (800cce4 <prvInitialiseTaskLists+0x74>)
 800ccb6:	f7fe f98f 	bl	800afd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ccba:	4b0b      	ldr	r3, [pc, #44]	@ (800cce8 <prvInitialiseTaskLists+0x78>)
 800ccbc:	4a05      	ldr	r2, [pc, #20]	@ (800ccd4 <prvInitialiseTaskLists+0x64>)
 800ccbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ccc0:	4b0a      	ldr	r3, [pc, #40]	@ (800ccec <prvInitialiseTaskLists+0x7c>)
 800ccc2:	4a05      	ldr	r2, [pc, #20]	@ (800ccd8 <prvInitialiseTaskLists+0x68>)
 800ccc4:	601a      	str	r2, [r3, #0]
}
 800ccc6:	bf00      	nop
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	20002000 	.word	0x20002000
 800ccd4:	20002460 	.word	0x20002460
 800ccd8:	20002474 	.word	0x20002474
 800ccdc:	20002490 	.word	0x20002490
 800cce0:	200024a4 	.word	0x200024a4
 800cce4:	200024bc 	.word	0x200024bc
 800cce8:	20002488 	.word	0x20002488
 800ccec:	2000248c 	.word	0x2000248c

0800ccf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ccf6:	e019      	b.n	800cd2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ccf8:	f000 fee6 	bl	800dac8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccfc:	4b10      	ldr	r3, [pc, #64]	@ (800cd40 <prvCheckTasksWaitingTermination+0x50>)
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	3304      	adds	r3, #4
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fe f9ef 	bl	800b0ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd0e:	4b0d      	ldr	r3, [pc, #52]	@ (800cd44 <prvCheckTasksWaitingTermination+0x54>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	3b01      	subs	r3, #1
 800cd14:	4a0b      	ldr	r2, [pc, #44]	@ (800cd44 <prvCheckTasksWaitingTermination+0x54>)
 800cd16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd18:	4b0b      	ldr	r3, [pc, #44]	@ (800cd48 <prvCheckTasksWaitingTermination+0x58>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	4a0a      	ldr	r2, [pc, #40]	@ (800cd48 <prvCheckTasksWaitingTermination+0x58>)
 800cd20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd22:	f000 ff03 	bl	800db2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 f810 	bl	800cd4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd2c:	4b06      	ldr	r3, [pc, #24]	@ (800cd48 <prvCheckTasksWaitingTermination+0x58>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d1e1      	bne.n	800ccf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd34:	bf00      	nop
 800cd36:	bf00      	nop
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	200024a4 	.word	0x200024a4
 800cd44:	200024d0 	.word	0x200024d0
 800cd48:	200024b8 	.word	0x200024b8

0800cd4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d108      	bne.n	800cd70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd62:	4618      	mov	r0, r3
 800cd64:	f001 f8a0 	bl	800dea8 <vPortFree>
				vPortFree( pxTCB );
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f001 f89d 	bl	800dea8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cd6e:	e019      	b.n	800cda4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d103      	bne.n	800cd82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f001 f894 	bl	800dea8 <vPortFree>
	}
 800cd80:	e010      	b.n	800cda4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cd88:	2b02      	cmp	r3, #2
 800cd8a:	d00b      	beq.n	800cda4 <prvDeleteTCB+0x58>
	__asm volatile
 800cd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	60fb      	str	r3, [r7, #12]
}
 800cd9e:	bf00      	nop
 800cda0:	bf00      	nop
 800cda2:	e7fd      	b.n	800cda0 <prvDeleteTCB+0x54>
	}
 800cda4:	bf00      	nop
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdb2:	4b0c      	ldr	r3, [pc, #48]	@ (800cde4 <prvResetNextTaskUnblockTime+0x38>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d104      	bne.n	800cdc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cdbc:	4b0a      	ldr	r3, [pc, #40]	@ (800cde8 <prvResetNextTaskUnblockTime+0x3c>)
 800cdbe:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cdc4:	e008      	b.n	800cdd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdc6:	4b07      	ldr	r3, [pc, #28]	@ (800cde4 <prvResetNextTaskUnblockTime+0x38>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	4a04      	ldr	r2, [pc, #16]	@ (800cde8 <prvResetNextTaskUnblockTime+0x3c>)
 800cdd6:	6013      	str	r3, [r2, #0]
}
 800cdd8:	bf00      	nop
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr
 800cde4:	20002488 	.word	0x20002488
 800cde8:	200024f0 	.word	0x200024f0

0800cdec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cdf2:	4b0b      	ldr	r3, [pc, #44]	@ (800ce20 <xTaskGetSchedulerState+0x34>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d102      	bne.n	800ce00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	607b      	str	r3, [r7, #4]
 800cdfe:	e008      	b.n	800ce12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce00:	4b08      	ldr	r3, [pc, #32]	@ (800ce24 <xTaskGetSchedulerState+0x38>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d102      	bne.n	800ce0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce08:	2302      	movs	r3, #2
 800ce0a:	607b      	str	r3, [r7, #4]
 800ce0c:	e001      	b.n	800ce12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce12:	687b      	ldr	r3, [r7, #4]
	}
 800ce14:	4618      	mov	r0, r3
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr
 800ce20:	200024dc 	.word	0x200024dc
 800ce24:	200024f8 	.word	0x200024f8

0800ce28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ce34:	2300      	movs	r3, #0
 800ce36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d051      	beq.n	800cee2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce42:	4b2a      	ldr	r3, [pc, #168]	@ (800ceec <xTaskPriorityInherit+0xc4>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d241      	bcs.n	800ced0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	699b      	ldr	r3, [r3, #24]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	db06      	blt.n	800ce62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce54:	4b25      	ldr	r3, [pc, #148]	@ (800ceec <xTaskPriorityInherit+0xc4>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce5a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	6959      	ldr	r1, [r3, #20]
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	4413      	add	r3, r2
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	4a1f      	ldr	r2, [pc, #124]	@ (800cef0 <xTaskPriorityInherit+0xc8>)
 800ce74:	4413      	add	r3, r2
 800ce76:	4299      	cmp	r1, r3
 800ce78:	d122      	bne.n	800cec0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	3304      	adds	r3, #4
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fe f934 	bl	800b0ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce84:	4b19      	ldr	r3, [pc, #100]	@ (800ceec <xTaskPriorityInherit+0xc4>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce92:	4b18      	ldr	r3, [pc, #96]	@ (800cef4 <xTaskPriorityInherit+0xcc>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d903      	bls.n	800cea2 <xTaskPriorityInherit+0x7a>
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce9e:	4a15      	ldr	r2, [pc, #84]	@ (800cef4 <xTaskPriorityInherit+0xcc>)
 800cea0:	6013      	str	r3, [r2, #0]
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cea6:	4613      	mov	r3, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4413      	add	r3, r2
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	4a10      	ldr	r2, [pc, #64]	@ (800cef0 <xTaskPriorityInherit+0xc8>)
 800ceb0:	441a      	add	r2, r3
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	4610      	mov	r0, r2
 800ceba:	f7fe f8ba 	bl	800b032 <vListInsertEnd>
 800cebe:	e004      	b.n	800ceca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cec0:	4b0a      	ldr	r3, [pc, #40]	@ (800ceec <xTaskPriorityInherit+0xc4>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ceca:	2301      	movs	r3, #1
 800cecc:	60fb      	str	r3, [r7, #12]
 800cece:	e008      	b.n	800cee2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ced4:	4b05      	ldr	r3, [pc, #20]	@ (800ceec <xTaskPriorityInherit+0xc4>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d201      	bcs.n	800cee2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cede:	2301      	movs	r3, #1
 800cee0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cee2:	68fb      	ldr	r3, [r7, #12]
	}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3710      	adds	r7, #16
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	20001ffc 	.word	0x20001ffc
 800cef0:	20002000 	.word	0x20002000
 800cef4:	200024d8 	.word	0x200024d8

0800cef8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf04:	2300      	movs	r3, #0
 800cf06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d058      	beq.n	800cfc0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf0e:	4b2f      	ldr	r3, [pc, #188]	@ (800cfcc <xTaskPriorityDisinherit+0xd4>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	693a      	ldr	r2, [r7, #16]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d00b      	beq.n	800cf30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cf18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf1c:	f383 8811 	msr	BASEPRI, r3
 800cf20:	f3bf 8f6f 	isb	sy
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	60fb      	str	r3, [r7, #12]
}
 800cf2a:	bf00      	nop
 800cf2c:	bf00      	nop
 800cf2e:	e7fd      	b.n	800cf2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d10b      	bne.n	800cf50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cf38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf3c:	f383 8811 	msr	BASEPRI, r3
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	60bb      	str	r3, [r7, #8]
}
 800cf4a:	bf00      	nop
 800cf4c:	bf00      	nop
 800cf4e:	e7fd      	b.n	800cf4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf54:	1e5a      	subs	r2, r3, #1
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d02c      	beq.n	800cfc0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d128      	bne.n	800cfc0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	3304      	adds	r3, #4
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fe f8ba 	bl	800b0ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf90:	4b0f      	ldr	r3, [pc, #60]	@ (800cfd0 <xTaskPriorityDisinherit+0xd8>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d903      	bls.n	800cfa0 <xTaskPriorityDisinherit+0xa8>
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf9c:	4a0c      	ldr	r2, [pc, #48]	@ (800cfd0 <xTaskPriorityDisinherit+0xd8>)
 800cf9e:	6013      	str	r3, [r2, #0]
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4a09      	ldr	r2, [pc, #36]	@ (800cfd4 <xTaskPriorityDisinherit+0xdc>)
 800cfae:	441a      	add	r2, r3
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	4610      	mov	r0, r2
 800cfb8:	f7fe f83b 	bl	800b032 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfc0:	697b      	ldr	r3, [r7, #20]
	}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3718      	adds	r7, #24
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	20001ffc 	.word	0x20001ffc
 800cfd0:	200024d8 	.word	0x200024d8
 800cfd4:	20002000 	.word	0x20002000

0800cfd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b088      	sub	sp, #32
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d06c      	beq.n	800d0ca <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10b      	bne.n	800d010 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	60fb      	str	r3, [r7, #12]
}
 800d00a:	bf00      	nop
 800d00c:	bf00      	nop
 800d00e:	e7fd      	b.n	800d00c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d014:	683a      	ldr	r2, [r7, #0]
 800d016:	429a      	cmp	r2, r3
 800d018:	d902      	bls.n	800d020 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	61fb      	str	r3, [r7, #28]
 800d01e:	e002      	b.n	800d026 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d024:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d02a:	69fa      	ldr	r2, [r7, #28]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d04c      	beq.n	800d0ca <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d034:	697a      	ldr	r2, [r7, #20]
 800d036:	429a      	cmp	r2, r3
 800d038:	d147      	bne.n	800d0ca <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d03a:	4b26      	ldr	r3, [pc, #152]	@ (800d0d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	69ba      	ldr	r2, [r7, #24]
 800d040:	429a      	cmp	r2, r3
 800d042:	d10b      	bne.n	800d05c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d048:	f383 8811 	msr	BASEPRI, r3
 800d04c:	f3bf 8f6f 	isb	sy
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	60bb      	str	r3, [r7, #8]
}
 800d056:	bf00      	nop
 800d058:	bf00      	nop
 800d05a:	e7fd      	b.n	800d058 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d060:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	69fa      	ldr	r2, [r7, #28]
 800d066:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	db04      	blt.n	800d07a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	6959      	ldr	r1, [r3, #20]
 800d07e:	693a      	ldr	r2, [r7, #16]
 800d080:	4613      	mov	r3, r2
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	4413      	add	r3, r2
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4a13      	ldr	r2, [pc, #76]	@ (800d0d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d08a:	4413      	add	r3, r2
 800d08c:	4299      	cmp	r1, r3
 800d08e:	d11c      	bne.n	800d0ca <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	3304      	adds	r3, #4
 800d094:	4618      	mov	r0, r3
 800d096:	f7fe f829 	bl	800b0ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d09e:	4b0f      	ldr	r3, [pc, #60]	@ (800d0dc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d903      	bls.n	800d0ae <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0aa:	4a0c      	ldr	r2, [pc, #48]	@ (800d0dc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d0ac:	6013      	str	r3, [r2, #0]
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4a07      	ldr	r2, [pc, #28]	@ (800d0d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d0bc:	441a      	add	r2, r3
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	3304      	adds	r3, #4
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	4610      	mov	r0, r2
 800d0c6:	f7fd ffb4 	bl	800b032 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0ca:	bf00      	nop
 800d0cc:	3720      	adds	r7, #32
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	20001ffc 	.word	0x20001ffc
 800d0d8:	20002000 	.word	0x20002000
 800d0dc:	200024d8 	.word	0x200024d8

0800d0e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d0e0:	b480      	push	{r7}
 800d0e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d0e4:	4b07      	ldr	r3, [pc, #28]	@ (800d104 <pvTaskIncrementMutexHeldCount+0x24>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d004      	beq.n	800d0f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d0ec:	4b05      	ldr	r3, [pc, #20]	@ (800d104 <pvTaskIncrementMutexHeldCount+0x24>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d0f2:	3201      	adds	r2, #1
 800d0f4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800d0f6:	4b03      	ldr	r3, [pc, #12]	@ (800d104 <pvTaskIncrementMutexHeldCount+0x24>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
	}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr
 800d104:	20001ffc 	.word	0x20001ffc

0800d108 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d112:	4b21      	ldr	r3, [pc, #132]	@ (800d198 <prvAddCurrentTaskToDelayedList+0x90>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d118:	4b20      	ldr	r3, [pc, #128]	@ (800d19c <prvAddCurrentTaskToDelayedList+0x94>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	3304      	adds	r3, #4
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fd ffe4 	bl	800b0ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d12a:	d10a      	bne.n	800d142 <prvAddCurrentTaskToDelayedList+0x3a>
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d007      	beq.n	800d142 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d132:	4b1a      	ldr	r3, [pc, #104]	@ (800d19c <prvAddCurrentTaskToDelayedList+0x94>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	3304      	adds	r3, #4
 800d138:	4619      	mov	r1, r3
 800d13a:	4819      	ldr	r0, [pc, #100]	@ (800d1a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d13c:	f7fd ff79 	bl	800b032 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d140:	e026      	b.n	800d190 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d142:	68fa      	ldr	r2, [r7, #12]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	4413      	add	r3, r2
 800d148:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d14a:	4b14      	ldr	r3, [pc, #80]	@ (800d19c <prvAddCurrentTaskToDelayedList+0x94>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	68ba      	ldr	r2, [r7, #8]
 800d150:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d152:	68ba      	ldr	r2, [r7, #8]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	429a      	cmp	r2, r3
 800d158:	d209      	bcs.n	800d16e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d15a:	4b12      	ldr	r3, [pc, #72]	@ (800d1a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	4b0f      	ldr	r3, [pc, #60]	@ (800d19c <prvAddCurrentTaskToDelayedList+0x94>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	3304      	adds	r3, #4
 800d164:	4619      	mov	r1, r3
 800d166:	4610      	mov	r0, r2
 800d168:	f7fd ff87 	bl	800b07a <vListInsert>
}
 800d16c:	e010      	b.n	800d190 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d16e:	4b0e      	ldr	r3, [pc, #56]	@ (800d1a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	4b0a      	ldr	r3, [pc, #40]	@ (800d19c <prvAddCurrentTaskToDelayedList+0x94>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3304      	adds	r3, #4
 800d178:	4619      	mov	r1, r3
 800d17a:	4610      	mov	r0, r2
 800d17c:	f7fd ff7d 	bl	800b07a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d180:	4b0a      	ldr	r3, [pc, #40]	@ (800d1ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	68ba      	ldr	r2, [r7, #8]
 800d186:	429a      	cmp	r2, r3
 800d188:	d202      	bcs.n	800d190 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d18a:	4a08      	ldr	r2, [pc, #32]	@ (800d1ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	6013      	str	r3, [r2, #0]
}
 800d190:	bf00      	nop
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	200024d4 	.word	0x200024d4
 800d19c:	20001ffc 	.word	0x20001ffc
 800d1a0:	200024bc 	.word	0x200024bc
 800d1a4:	2000248c 	.word	0x2000248c
 800d1a8:	20002488 	.word	0x20002488
 800d1ac:	200024f0 	.word	0x200024f0

0800d1b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b08a      	sub	sp, #40	@ 0x28
 800d1b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d1ba:	f000 fb13 	bl	800d7e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d1be:	4b1d      	ldr	r3, [pc, #116]	@ (800d234 <xTimerCreateTimerTask+0x84>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d021      	beq.n	800d20a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d1ce:	1d3a      	adds	r2, r7, #4
 800d1d0:	f107 0108 	add.w	r1, r7, #8
 800d1d4:	f107 030c 	add.w	r3, r7, #12
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7fd fee3 	bl	800afa4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d1de:	6879      	ldr	r1, [r7, #4]
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	9202      	str	r2, [sp, #8]
 800d1e6:	9301      	str	r3, [sp, #4]
 800d1e8:	2302      	movs	r3, #2
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	460a      	mov	r2, r1
 800d1f0:	4911      	ldr	r1, [pc, #68]	@ (800d238 <xTimerCreateTimerTask+0x88>)
 800d1f2:	4812      	ldr	r0, [pc, #72]	@ (800d23c <xTimerCreateTimerTask+0x8c>)
 800d1f4:	f7fe ffd0 	bl	800c198 <xTaskCreateStatic>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	4a11      	ldr	r2, [pc, #68]	@ (800d240 <xTimerCreateTimerTask+0x90>)
 800d1fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d1fe:	4b10      	ldr	r3, [pc, #64]	@ (800d240 <xTimerCreateTimerTask+0x90>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d001      	beq.n	800d20a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d206:	2301      	movs	r3, #1
 800d208:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d10b      	bne.n	800d228 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d214:	f383 8811 	msr	BASEPRI, r3
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	613b      	str	r3, [r7, #16]
}
 800d222:	bf00      	nop
 800d224:	bf00      	nop
 800d226:	e7fd      	b.n	800d224 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d228:	697b      	ldr	r3, [r7, #20]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3718      	adds	r7, #24
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	2000252c 	.word	0x2000252c
 800d238:	08013498 	.word	0x08013498
 800d23c:	0800d37d 	.word	0x0800d37d
 800d240:	20002530 	.word	0x20002530

0800d244 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b08a      	sub	sp, #40	@ 0x28
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	607a      	str	r2, [r7, #4]
 800d250:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d252:	2300      	movs	r3, #0
 800d254:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10b      	bne.n	800d274 <xTimerGenericCommand+0x30>
	__asm volatile
 800d25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d260:	f383 8811 	msr	BASEPRI, r3
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	623b      	str	r3, [r7, #32]
}
 800d26e:	bf00      	nop
 800d270:	bf00      	nop
 800d272:	e7fd      	b.n	800d270 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d274:	4b19      	ldr	r3, [pc, #100]	@ (800d2dc <xTimerGenericCommand+0x98>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d02a      	beq.n	800d2d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	2b05      	cmp	r3, #5
 800d28c:	dc18      	bgt.n	800d2c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d28e:	f7ff fdad 	bl	800cdec <xTaskGetSchedulerState>
 800d292:	4603      	mov	r3, r0
 800d294:	2b02      	cmp	r3, #2
 800d296:	d109      	bne.n	800d2ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d298:	4b10      	ldr	r3, [pc, #64]	@ (800d2dc <xTimerGenericCommand+0x98>)
 800d29a:	6818      	ldr	r0, [r3, #0]
 800d29c:	f107 0110 	add.w	r1, r7, #16
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2a4:	f7fe f900 	bl	800b4a8 <xQueueGenericSend>
 800d2a8:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2aa:	e012      	b.n	800d2d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d2ac:	4b0b      	ldr	r3, [pc, #44]	@ (800d2dc <xTimerGenericCommand+0x98>)
 800d2ae:	6818      	ldr	r0, [r3, #0]
 800d2b0:	f107 0110 	add.w	r1, r7, #16
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f7fe f8f6 	bl	800b4a8 <xQueueGenericSend>
 800d2bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2be:	e008      	b.n	800d2d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d2c0:	4b06      	ldr	r3, [pc, #24]	@ (800d2dc <xTimerGenericCommand+0x98>)
 800d2c2:	6818      	ldr	r0, [r3, #0]
 800d2c4:	f107 0110 	add.w	r1, r7, #16
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	683a      	ldr	r2, [r7, #0]
 800d2cc:	f7fe f9ee 	bl	800b6ac <xQueueGenericSendFromISR>
 800d2d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3728      	adds	r7, #40	@ 0x28
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	2000252c 	.word	0x2000252c

0800d2e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b088      	sub	sp, #32
 800d2e4:	af02      	add	r7, sp, #8
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ea:	4b23      	ldr	r3, [pc, #140]	@ (800d378 <prvProcessExpiredTimer+0x98>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	3304      	adds	r3, #4
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7fd fef7 	bl	800b0ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d304:	f003 0304 	and.w	r3, r3, #4
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d023      	beq.n	800d354 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	699a      	ldr	r2, [r3, #24]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	18d1      	adds	r1, r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	683a      	ldr	r2, [r7, #0]
 800d318:	6978      	ldr	r0, [r7, #20]
 800d31a:	f000 f8d5 	bl	800d4c8 <prvInsertTimerInActiveList>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d020      	beq.n	800d366 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d324:	2300      	movs	r3, #0
 800d326:	9300      	str	r3, [sp, #0]
 800d328:	2300      	movs	r3, #0
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	2100      	movs	r1, #0
 800d32e:	6978      	ldr	r0, [r7, #20]
 800d330:	f7ff ff88 	bl	800d244 <xTimerGenericCommand>
 800d334:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d114      	bne.n	800d366 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d340:	f383 8811 	msr	BASEPRI, r3
 800d344:	f3bf 8f6f 	isb	sy
 800d348:	f3bf 8f4f 	dsb	sy
 800d34c:	60fb      	str	r3, [r7, #12]
}
 800d34e:	bf00      	nop
 800d350:	bf00      	nop
 800d352:	e7fd      	b.n	800d350 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d35a:	f023 0301 	bic.w	r3, r3, #1
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	6a1b      	ldr	r3, [r3, #32]
 800d36a:	6978      	ldr	r0, [r7, #20]
 800d36c:	4798      	blx	r3
}
 800d36e:	bf00      	nop
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	20002524 	.word	0x20002524

0800d37c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d384:	f107 0308 	add.w	r3, r7, #8
 800d388:	4618      	mov	r0, r3
 800d38a:	f000 f859 	bl	800d440 <prvGetNextExpireTime>
 800d38e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	4619      	mov	r1, r3
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	f000 f805 	bl	800d3a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d39a:	f000 f8d7 	bl	800d54c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d39e:	bf00      	nop
 800d3a0:	e7f0      	b.n	800d384 <prvTimerTask+0x8>
	...

0800d3a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d3ae:	f7ff f937 	bl	800c620 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d3b2:	f107 0308 	add.w	r3, r7, #8
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f000 f866 	bl	800d488 <prvSampleTimeNow>
 800d3bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d130      	bne.n	800d426 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d10a      	bne.n	800d3e0 <prvProcessTimerOrBlockTask+0x3c>
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d806      	bhi.n	800d3e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d3d2:	f7ff f933 	bl	800c63c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d3d6:	68f9      	ldr	r1, [r7, #12]
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7ff ff81 	bl	800d2e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d3de:	e024      	b.n	800d42a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d008      	beq.n	800d3f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d3e6:	4b13      	ldr	r3, [pc, #76]	@ (800d434 <prvProcessTimerOrBlockTask+0x90>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d101      	bne.n	800d3f4 <prvProcessTimerOrBlockTask+0x50>
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e000      	b.n	800d3f6 <prvProcessTimerOrBlockTask+0x52>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d3f8:	4b0f      	ldr	r3, [pc, #60]	@ (800d438 <prvProcessTimerOrBlockTask+0x94>)
 800d3fa:	6818      	ldr	r0, [r3, #0]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	683a      	ldr	r2, [r7, #0]
 800d404:	4619      	mov	r1, r3
 800d406:	f7fe fe93 	bl	800c130 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d40a:	f7ff f917 	bl	800c63c <xTaskResumeAll>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10a      	bne.n	800d42a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d414:	4b09      	ldr	r3, [pc, #36]	@ (800d43c <prvProcessTimerOrBlockTask+0x98>)
 800d416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d41a:	601a      	str	r2, [r3, #0]
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	f3bf 8f6f 	isb	sy
}
 800d424:	e001      	b.n	800d42a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d426:	f7ff f909 	bl	800c63c <xTaskResumeAll>
}
 800d42a:	bf00      	nop
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	20002528 	.word	0x20002528
 800d438:	2000252c 	.word	0x2000252c
 800d43c:	e000ed04 	.word	0xe000ed04

0800d440 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d440:	b480      	push	{r7}
 800d442:	b085      	sub	sp, #20
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d448:	4b0e      	ldr	r3, [pc, #56]	@ (800d484 <prvGetNextExpireTime+0x44>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d101      	bne.n	800d456 <prvGetNextExpireTime+0x16>
 800d452:	2201      	movs	r2, #1
 800d454:	e000      	b.n	800d458 <prvGetNextExpireTime+0x18>
 800d456:	2200      	movs	r2, #0
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d105      	bne.n	800d470 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d464:	4b07      	ldr	r3, [pc, #28]	@ (800d484 <prvGetNextExpireTime+0x44>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	68db      	ldr	r3, [r3, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	60fb      	str	r3, [r7, #12]
 800d46e:	e001      	b.n	800d474 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d470:	2300      	movs	r3, #0
 800d472:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d474:	68fb      	ldr	r3, [r7, #12]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3714      	adds	r7, #20
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	20002524 	.word	0x20002524

0800d488 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d490:	f7ff f972 	bl	800c778 <xTaskGetTickCount>
 800d494:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d496:	4b0b      	ldr	r3, [pc, #44]	@ (800d4c4 <prvSampleTimeNow+0x3c>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d205      	bcs.n	800d4ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d4a0:	f000 f93a 	bl	800d718 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	601a      	str	r2, [r3, #0]
 800d4aa:	e002      	b.n	800d4b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d4b2:	4a04      	ldr	r2, [pc, #16]	@ (800d4c4 <prvSampleTimeNow+0x3c>)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	20002534 	.word	0x20002534

0800d4c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	60f8      	str	r0, [r7, #12]
 800d4d0:	60b9      	str	r1, [r7, #8]
 800d4d2:	607a      	str	r2, [r7, #4]
 800d4d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d4e6:	68ba      	ldr	r2, [r7, #8]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d812      	bhi.n	800d514 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	1ad2      	subs	r2, r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	699b      	ldr	r3, [r3, #24]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d302      	bcc.n	800d502 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	617b      	str	r3, [r7, #20]
 800d500:	e01b      	b.n	800d53a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d502:	4b10      	ldr	r3, [pc, #64]	@ (800d544 <prvInsertTimerInActiveList+0x7c>)
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	3304      	adds	r3, #4
 800d50a:	4619      	mov	r1, r3
 800d50c:	4610      	mov	r0, r2
 800d50e:	f7fd fdb4 	bl	800b07a <vListInsert>
 800d512:	e012      	b.n	800d53a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d206      	bcs.n	800d52a <prvInsertTimerInActiveList+0x62>
 800d51c:	68ba      	ldr	r2, [r7, #8]
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	429a      	cmp	r2, r3
 800d522:	d302      	bcc.n	800d52a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d524:	2301      	movs	r3, #1
 800d526:	617b      	str	r3, [r7, #20]
 800d528:	e007      	b.n	800d53a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d52a:	4b07      	ldr	r3, [pc, #28]	@ (800d548 <prvInsertTimerInActiveList+0x80>)
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	3304      	adds	r3, #4
 800d532:	4619      	mov	r1, r3
 800d534:	4610      	mov	r0, r2
 800d536:	f7fd fda0 	bl	800b07a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d53a:	697b      	ldr	r3, [r7, #20]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3718      	adds	r7, #24
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	20002528 	.word	0x20002528
 800d548:	20002524 	.word	0x20002524

0800d54c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b08e      	sub	sp, #56	@ 0x38
 800d550:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d552:	e0ce      	b.n	800d6f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	da19      	bge.n	800d58e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d55a:	1d3b      	adds	r3, r7, #4
 800d55c:	3304      	adds	r3, #4
 800d55e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d562:	2b00      	cmp	r3, #0
 800d564:	d10b      	bne.n	800d57e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d56a:	f383 8811 	msr	BASEPRI, r3
 800d56e:	f3bf 8f6f 	isb	sy
 800d572:	f3bf 8f4f 	dsb	sy
 800d576:	61fb      	str	r3, [r7, #28]
}
 800d578:	bf00      	nop
 800d57a:	bf00      	nop
 800d57c:	e7fd      	b.n	800d57a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d584:	6850      	ldr	r0, [r2, #4]
 800d586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d588:	6892      	ldr	r2, [r2, #8]
 800d58a:	4611      	mov	r1, r2
 800d58c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	f2c0 80ae 	blt.w	800d6f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59c:	695b      	ldr	r3, [r3, #20]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d004      	beq.n	800d5ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a4:	3304      	adds	r3, #4
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fd fda0 	bl	800b0ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d5ac:	463b      	mov	r3, r7
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7ff ff6a 	bl	800d488 <prvSampleTimeNow>
 800d5b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2b09      	cmp	r3, #9
 800d5ba:	f200 8097 	bhi.w	800d6ec <prvProcessReceivedCommands+0x1a0>
 800d5be:	a201      	add	r2, pc, #4	@ (adr r2, 800d5c4 <prvProcessReceivedCommands+0x78>)
 800d5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c4:	0800d5ed 	.word	0x0800d5ed
 800d5c8:	0800d5ed 	.word	0x0800d5ed
 800d5cc:	0800d5ed 	.word	0x0800d5ed
 800d5d0:	0800d663 	.word	0x0800d663
 800d5d4:	0800d677 	.word	0x0800d677
 800d5d8:	0800d6c3 	.word	0x0800d6c3
 800d5dc:	0800d5ed 	.word	0x0800d5ed
 800d5e0:	0800d5ed 	.word	0x0800d5ed
 800d5e4:	0800d663 	.word	0x0800d663
 800d5e8:	0800d677 	.word	0x0800d677
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5f2:	f043 0301 	orr.w	r3, r3, #1
 800d5f6:	b2da      	uxtb	r2, r3
 800d5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d602:	699b      	ldr	r3, [r3, #24]
 800d604:	18d1      	adds	r1, r2, r3
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d60a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d60c:	f7ff ff5c 	bl	800d4c8 <prvInsertTimerInActiveList>
 800d610:	4603      	mov	r3, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	d06c      	beq.n	800d6f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d618:	6a1b      	ldr	r3, [r3, #32]
 800d61a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d61c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d624:	f003 0304 	and.w	r3, r3, #4
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d061      	beq.n	800d6f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d630:	699b      	ldr	r3, [r3, #24]
 800d632:	441a      	add	r2, r3
 800d634:	2300      	movs	r3, #0
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	2300      	movs	r3, #0
 800d63a:	2100      	movs	r1, #0
 800d63c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d63e:	f7ff fe01 	bl	800d244 <xTimerGenericCommand>
 800d642:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d644:	6a3b      	ldr	r3, [r7, #32]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d152      	bne.n	800d6f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d64e:	f383 8811 	msr	BASEPRI, r3
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	f3bf 8f4f 	dsb	sy
 800d65a:	61bb      	str	r3, [r7, #24]
}
 800d65c:	bf00      	nop
 800d65e:	bf00      	nop
 800d660:	e7fd      	b.n	800d65e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d664:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d668:	f023 0301 	bic.w	r3, r3, #1
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d670:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d674:	e03d      	b.n	800d6f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d678:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d67c:	f043 0301 	orr.w	r3, r3, #1
 800d680:	b2da      	uxtb	r2, r3
 800d682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d684:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d688:	68ba      	ldr	r2, [r7, #8]
 800d68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d68c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d690:	699b      	ldr	r3, [r3, #24]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d10b      	bne.n	800d6ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d69a:	f383 8811 	msr	BASEPRI, r3
 800d69e:	f3bf 8f6f 	isb	sy
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	617b      	str	r3, [r7, #20]
}
 800d6a8:	bf00      	nop
 800d6aa:	bf00      	nop
 800d6ac:	e7fd      	b.n	800d6aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6b0:	699a      	ldr	r2, [r3, #24]
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b4:	18d1      	adds	r1, r2, r3
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6bc:	f7ff ff04 	bl	800d4c8 <prvInsertTimerInActiveList>
					break;
 800d6c0:	e017      	b.n	800d6f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6c8:	f003 0302 	and.w	r3, r3, #2
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d103      	bne.n	800d6d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d6d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6d2:	f000 fbe9 	bl	800dea8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d6d6:	e00c      	b.n	800d6f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6de:	f023 0301 	bic.w	r3, r3, #1
 800d6e2:	b2da      	uxtb	r2, r3
 800d6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d6ea:	e002      	b.n	800d6f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d6ec:	bf00      	nop
 800d6ee:	e000      	b.n	800d6f2 <prvProcessReceivedCommands+0x1a6>
					break;
 800d6f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d6f2:	4b08      	ldr	r3, [pc, #32]	@ (800d714 <prvProcessReceivedCommands+0x1c8>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	1d39      	adds	r1, r7, #4
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fe f904 	bl	800b908 <xQueueReceive>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	f47f af26 	bne.w	800d554 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d708:	bf00      	nop
 800d70a:	bf00      	nop
 800d70c:	3730      	adds	r7, #48	@ 0x30
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	2000252c 	.word	0x2000252c

0800d718 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b088      	sub	sp, #32
 800d71c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d71e:	e049      	b.n	800d7b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d720:	4b2e      	ldr	r3, [pc, #184]	@ (800d7dc <prvSwitchTimerLists+0xc4>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d72a:	4b2c      	ldr	r3, [pc, #176]	@ (800d7dc <prvSwitchTimerLists+0xc4>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	68db      	ldr	r3, [r3, #12]
 800d732:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	3304      	adds	r3, #4
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fd fcd7 	bl	800b0ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	6a1b      	ldr	r3, [r3, #32]
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d74c:	f003 0304 	and.w	r3, r3, #4
 800d750:	2b00      	cmp	r3, #0
 800d752:	d02f      	beq.n	800d7b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	699b      	ldr	r3, [r3, #24]
 800d758:	693a      	ldr	r2, [r7, #16]
 800d75a:	4413      	add	r3, r2
 800d75c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	429a      	cmp	r2, r3
 800d764:	d90e      	bls.n	800d784 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	68ba      	ldr	r2, [r7, #8]
 800d76a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	68fa      	ldr	r2, [r7, #12]
 800d770:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d772:	4b1a      	ldr	r3, [pc, #104]	@ (800d7dc <prvSwitchTimerLists+0xc4>)
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	3304      	adds	r3, #4
 800d77a:	4619      	mov	r1, r3
 800d77c:	4610      	mov	r0, r2
 800d77e:	f7fd fc7c 	bl	800b07a <vListInsert>
 800d782:	e017      	b.n	800d7b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d784:	2300      	movs	r3, #0
 800d786:	9300      	str	r3, [sp, #0]
 800d788:	2300      	movs	r3, #0
 800d78a:	693a      	ldr	r2, [r7, #16]
 800d78c:	2100      	movs	r1, #0
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	f7ff fd58 	bl	800d244 <xTimerGenericCommand>
 800d794:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d10b      	bne.n	800d7b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a0:	f383 8811 	msr	BASEPRI, r3
 800d7a4:	f3bf 8f6f 	isb	sy
 800d7a8:	f3bf 8f4f 	dsb	sy
 800d7ac:	603b      	str	r3, [r7, #0]
}
 800d7ae:	bf00      	nop
 800d7b0:	bf00      	nop
 800d7b2:	e7fd      	b.n	800d7b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7b4:	4b09      	ldr	r3, [pc, #36]	@ (800d7dc <prvSwitchTimerLists+0xc4>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1b0      	bne.n	800d720 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d7be:	4b07      	ldr	r3, [pc, #28]	@ (800d7dc <prvSwitchTimerLists+0xc4>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d7c4:	4b06      	ldr	r3, [pc, #24]	@ (800d7e0 <prvSwitchTimerLists+0xc8>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a04      	ldr	r2, [pc, #16]	@ (800d7dc <prvSwitchTimerLists+0xc4>)
 800d7ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d7cc:	4a04      	ldr	r2, [pc, #16]	@ (800d7e0 <prvSwitchTimerLists+0xc8>)
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	6013      	str	r3, [r2, #0]
}
 800d7d2:	bf00      	nop
 800d7d4:	3718      	adds	r7, #24
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	20002524 	.word	0x20002524
 800d7e0:	20002528 	.word	0x20002528

0800d7e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d7ea:	f000 f96d 	bl	800dac8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d7ee:	4b15      	ldr	r3, [pc, #84]	@ (800d844 <prvCheckForValidListAndQueue+0x60>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d120      	bne.n	800d838 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d7f6:	4814      	ldr	r0, [pc, #80]	@ (800d848 <prvCheckForValidListAndQueue+0x64>)
 800d7f8:	f7fd fbee 	bl	800afd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d7fc:	4813      	ldr	r0, [pc, #76]	@ (800d84c <prvCheckForValidListAndQueue+0x68>)
 800d7fe:	f7fd fbeb 	bl	800afd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d802:	4b13      	ldr	r3, [pc, #76]	@ (800d850 <prvCheckForValidListAndQueue+0x6c>)
 800d804:	4a10      	ldr	r2, [pc, #64]	@ (800d848 <prvCheckForValidListAndQueue+0x64>)
 800d806:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d808:	4b12      	ldr	r3, [pc, #72]	@ (800d854 <prvCheckForValidListAndQueue+0x70>)
 800d80a:	4a10      	ldr	r2, [pc, #64]	@ (800d84c <prvCheckForValidListAndQueue+0x68>)
 800d80c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d80e:	2300      	movs	r3, #0
 800d810:	9300      	str	r3, [sp, #0]
 800d812:	4b11      	ldr	r3, [pc, #68]	@ (800d858 <prvCheckForValidListAndQueue+0x74>)
 800d814:	4a11      	ldr	r2, [pc, #68]	@ (800d85c <prvCheckForValidListAndQueue+0x78>)
 800d816:	2110      	movs	r1, #16
 800d818:	200a      	movs	r0, #10
 800d81a:	f7fd fcfb 	bl	800b214 <xQueueGenericCreateStatic>
 800d81e:	4603      	mov	r3, r0
 800d820:	4a08      	ldr	r2, [pc, #32]	@ (800d844 <prvCheckForValidListAndQueue+0x60>)
 800d822:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d824:	4b07      	ldr	r3, [pc, #28]	@ (800d844 <prvCheckForValidListAndQueue+0x60>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d005      	beq.n	800d838 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d82c:	4b05      	ldr	r3, [pc, #20]	@ (800d844 <prvCheckForValidListAndQueue+0x60>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	490b      	ldr	r1, [pc, #44]	@ (800d860 <prvCheckForValidListAndQueue+0x7c>)
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe fc28 	bl	800c088 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d838:	f000 f978 	bl	800db2c <vPortExitCritical>
}
 800d83c:	bf00      	nop
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	2000252c 	.word	0x2000252c
 800d848:	200024fc 	.word	0x200024fc
 800d84c:	20002510 	.word	0x20002510
 800d850:	20002524 	.word	0x20002524
 800d854:	20002528 	.word	0x20002528
 800d858:	200025d8 	.word	0x200025d8
 800d85c:	20002538 	.word	0x20002538
 800d860:	080134a0 	.word	0x080134a0

0800d864 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d864:	b480      	push	{r7}
 800d866:	b085      	sub	sp, #20
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	3b04      	subs	r3, #4
 800d874:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d87c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	3b04      	subs	r3, #4
 800d882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	f023 0201 	bic.w	r2, r3, #1
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	3b04      	subs	r3, #4
 800d892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d894:	4a0c      	ldr	r2, [pc, #48]	@ (800d8c8 <pxPortInitialiseStack+0x64>)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	3b14      	subs	r3, #20
 800d89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3b04      	subs	r3, #4
 800d8aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f06f 0202 	mvn.w	r2, #2
 800d8b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	3b20      	subs	r3, #32
 800d8b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3714      	adds	r7, #20
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr
 800d8c8:	0800d8cd 	.word	0x0800d8cd

0800d8cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b085      	sub	sp, #20
 800d8d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d8d6:	4b13      	ldr	r3, [pc, #76]	@ (800d924 <prvTaskExitError+0x58>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8de:	d00b      	beq.n	800d8f8 <prvTaskExitError+0x2c>
	__asm volatile
 800d8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e4:	f383 8811 	msr	BASEPRI, r3
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	60fb      	str	r3, [r7, #12]
}
 800d8f2:	bf00      	nop
 800d8f4:	bf00      	nop
 800d8f6:	e7fd      	b.n	800d8f4 <prvTaskExitError+0x28>
	__asm volatile
 800d8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8fc:	f383 8811 	msr	BASEPRI, r3
 800d900:	f3bf 8f6f 	isb	sy
 800d904:	f3bf 8f4f 	dsb	sy
 800d908:	60bb      	str	r3, [r7, #8]
}
 800d90a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d90c:	bf00      	nop
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d0fc      	beq.n	800d90e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d914:	bf00      	nop
 800d916:	bf00      	nop
 800d918:	3714      	adds	r7, #20
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop
 800d924:	200000b8 	.word	0x200000b8
	...

0800d930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d930:	4b07      	ldr	r3, [pc, #28]	@ (800d950 <pxCurrentTCBConst2>)
 800d932:	6819      	ldr	r1, [r3, #0]
 800d934:	6808      	ldr	r0, [r1, #0]
 800d936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93a:	f380 8809 	msr	PSP, r0
 800d93e:	f3bf 8f6f 	isb	sy
 800d942:	f04f 0000 	mov.w	r0, #0
 800d946:	f380 8811 	msr	BASEPRI, r0
 800d94a:	4770      	bx	lr
 800d94c:	f3af 8000 	nop.w

0800d950 <pxCurrentTCBConst2>:
 800d950:	20001ffc 	.word	0x20001ffc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d954:	bf00      	nop
 800d956:	bf00      	nop

0800d958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d958:	4808      	ldr	r0, [pc, #32]	@ (800d97c <prvPortStartFirstTask+0x24>)
 800d95a:	6800      	ldr	r0, [r0, #0]
 800d95c:	6800      	ldr	r0, [r0, #0]
 800d95e:	f380 8808 	msr	MSP, r0
 800d962:	f04f 0000 	mov.w	r0, #0
 800d966:	f380 8814 	msr	CONTROL, r0
 800d96a:	b662      	cpsie	i
 800d96c:	b661      	cpsie	f
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	df00      	svc	0
 800d978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d97a:	bf00      	nop
 800d97c:	e000ed08 	.word	0xe000ed08

0800d980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d986:	4b47      	ldr	r3, [pc, #284]	@ (800daa4 <xPortStartScheduler+0x124>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a47      	ldr	r2, [pc, #284]	@ (800daa8 <xPortStartScheduler+0x128>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d10b      	bne.n	800d9a8 <xPortStartScheduler+0x28>
	__asm volatile
 800d990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	613b      	str	r3, [r7, #16]
}
 800d9a2:	bf00      	nop
 800d9a4:	bf00      	nop
 800d9a6:	e7fd      	b.n	800d9a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d9a8:	4b3e      	ldr	r3, [pc, #248]	@ (800daa4 <xPortStartScheduler+0x124>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a3f      	ldr	r2, [pc, #252]	@ (800daac <xPortStartScheduler+0x12c>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d10b      	bne.n	800d9ca <xPortStartScheduler+0x4a>
	__asm volatile
 800d9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b6:	f383 8811 	msr	BASEPRI, r3
 800d9ba:	f3bf 8f6f 	isb	sy
 800d9be:	f3bf 8f4f 	dsb	sy
 800d9c2:	60fb      	str	r3, [r7, #12]
}
 800d9c4:	bf00      	nop
 800d9c6:	bf00      	nop
 800d9c8:	e7fd      	b.n	800d9c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d9ca:	4b39      	ldr	r3, [pc, #228]	@ (800dab0 <xPortStartScheduler+0x130>)
 800d9cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	22ff      	movs	r2, #255	@ 0xff
 800d9da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d9e4:	78fb      	ldrb	r3, [r7, #3]
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d9ec:	b2da      	uxtb	r2, r3
 800d9ee:	4b31      	ldr	r3, [pc, #196]	@ (800dab4 <xPortStartScheduler+0x134>)
 800d9f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d9f2:	4b31      	ldr	r3, [pc, #196]	@ (800dab8 <xPortStartScheduler+0x138>)
 800d9f4:	2207      	movs	r2, #7
 800d9f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d9f8:	e009      	b.n	800da0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d9fa:	4b2f      	ldr	r3, [pc, #188]	@ (800dab8 <xPortStartScheduler+0x138>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	3b01      	subs	r3, #1
 800da00:	4a2d      	ldr	r2, [pc, #180]	@ (800dab8 <xPortStartScheduler+0x138>)
 800da02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da04:	78fb      	ldrb	r3, [r7, #3]
 800da06:	b2db      	uxtb	r3, r3
 800da08:	005b      	lsls	r3, r3, #1
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da0e:	78fb      	ldrb	r3, [r7, #3]
 800da10:	b2db      	uxtb	r3, r3
 800da12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da16:	2b80      	cmp	r3, #128	@ 0x80
 800da18:	d0ef      	beq.n	800d9fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800da1a:	4b27      	ldr	r3, [pc, #156]	@ (800dab8 <xPortStartScheduler+0x138>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f1c3 0307 	rsb	r3, r3, #7
 800da22:	2b04      	cmp	r3, #4
 800da24:	d00b      	beq.n	800da3e <xPortStartScheduler+0xbe>
	__asm volatile
 800da26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2a:	f383 8811 	msr	BASEPRI, r3
 800da2e:	f3bf 8f6f 	isb	sy
 800da32:	f3bf 8f4f 	dsb	sy
 800da36:	60bb      	str	r3, [r7, #8]
}
 800da38:	bf00      	nop
 800da3a:	bf00      	nop
 800da3c:	e7fd      	b.n	800da3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800da3e:	4b1e      	ldr	r3, [pc, #120]	@ (800dab8 <xPortStartScheduler+0x138>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	021b      	lsls	r3, r3, #8
 800da44:	4a1c      	ldr	r2, [pc, #112]	@ (800dab8 <xPortStartScheduler+0x138>)
 800da46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800da48:	4b1b      	ldr	r3, [pc, #108]	@ (800dab8 <xPortStartScheduler+0x138>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800da50:	4a19      	ldr	r2, [pc, #100]	@ (800dab8 <xPortStartScheduler+0x138>)
 800da52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	b2da      	uxtb	r2, r3
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800da5c:	4b17      	ldr	r3, [pc, #92]	@ (800dabc <xPortStartScheduler+0x13c>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a16      	ldr	r2, [pc, #88]	@ (800dabc <xPortStartScheduler+0x13c>)
 800da62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800da66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800da68:	4b14      	ldr	r3, [pc, #80]	@ (800dabc <xPortStartScheduler+0x13c>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a13      	ldr	r2, [pc, #76]	@ (800dabc <xPortStartScheduler+0x13c>)
 800da6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800da72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800da74:	f000 f8da 	bl	800dc2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800da78:	4b11      	ldr	r3, [pc, #68]	@ (800dac0 <xPortStartScheduler+0x140>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800da7e:	f000 f8f9 	bl	800dc74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800da82:	4b10      	ldr	r3, [pc, #64]	@ (800dac4 <xPortStartScheduler+0x144>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4a0f      	ldr	r2, [pc, #60]	@ (800dac4 <xPortStartScheduler+0x144>)
 800da88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800da8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800da8e:	f7ff ff63 	bl	800d958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800da92:	f7fe ff3b 	bl	800c90c <vTaskSwitchContext>
	prvTaskExitError();
 800da96:	f7ff ff19 	bl	800d8cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3718      	adds	r7, #24
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	e000ed00 	.word	0xe000ed00
 800daa8:	410fc271 	.word	0x410fc271
 800daac:	410fc270 	.word	0x410fc270
 800dab0:	e000e400 	.word	0xe000e400
 800dab4:	20002628 	.word	0x20002628
 800dab8:	2000262c 	.word	0x2000262c
 800dabc:	e000ed20 	.word	0xe000ed20
 800dac0:	200000b8 	.word	0x200000b8
 800dac4:	e000ef34 	.word	0xe000ef34

0800dac8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
	__asm volatile
 800dace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad2:	f383 8811 	msr	BASEPRI, r3
 800dad6:	f3bf 8f6f 	isb	sy
 800dada:	f3bf 8f4f 	dsb	sy
 800dade:	607b      	str	r3, [r7, #4]
}
 800dae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dae2:	4b10      	ldr	r3, [pc, #64]	@ (800db24 <vPortEnterCritical+0x5c>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	3301      	adds	r3, #1
 800dae8:	4a0e      	ldr	r2, [pc, #56]	@ (800db24 <vPortEnterCritical+0x5c>)
 800daea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800daec:	4b0d      	ldr	r3, [pc, #52]	@ (800db24 <vPortEnterCritical+0x5c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d110      	bne.n	800db16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800daf4:	4b0c      	ldr	r3, [pc, #48]	@ (800db28 <vPortEnterCritical+0x60>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00b      	beq.n	800db16 <vPortEnterCritical+0x4e>
	__asm volatile
 800dafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	603b      	str	r3, [r7, #0]
}
 800db10:	bf00      	nop
 800db12:	bf00      	nop
 800db14:	e7fd      	b.n	800db12 <vPortEnterCritical+0x4a>
	}
}
 800db16:	bf00      	nop
 800db18:	370c      	adds	r7, #12
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	200000b8 	.word	0x200000b8
 800db28:	e000ed04 	.word	0xe000ed04

0800db2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800db32:	4b12      	ldr	r3, [pc, #72]	@ (800db7c <vPortExitCritical+0x50>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d10b      	bne.n	800db52 <vPortExitCritical+0x26>
	__asm volatile
 800db3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db3e:	f383 8811 	msr	BASEPRI, r3
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	607b      	str	r3, [r7, #4]
}
 800db4c:	bf00      	nop
 800db4e:	bf00      	nop
 800db50:	e7fd      	b.n	800db4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800db52:	4b0a      	ldr	r3, [pc, #40]	@ (800db7c <vPortExitCritical+0x50>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	3b01      	subs	r3, #1
 800db58:	4a08      	ldr	r2, [pc, #32]	@ (800db7c <vPortExitCritical+0x50>)
 800db5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800db5c:	4b07      	ldr	r3, [pc, #28]	@ (800db7c <vPortExitCritical+0x50>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d105      	bne.n	800db70 <vPortExitCritical+0x44>
 800db64:	2300      	movs	r3, #0
 800db66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	f383 8811 	msr	BASEPRI, r3
}
 800db6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800db70:	bf00      	nop
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	200000b8 	.word	0x200000b8

0800db80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800db80:	f3ef 8009 	mrs	r0, PSP
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	4b15      	ldr	r3, [pc, #84]	@ (800dbe0 <pxCurrentTCBConst>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	f01e 0f10 	tst.w	lr, #16
 800db90:	bf08      	it	eq
 800db92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800db96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9a:	6010      	str	r0, [r2, #0]
 800db9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dba0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dba4:	f380 8811 	msr	BASEPRI, r0
 800dba8:	f3bf 8f4f 	dsb	sy
 800dbac:	f3bf 8f6f 	isb	sy
 800dbb0:	f7fe feac 	bl	800c90c <vTaskSwitchContext>
 800dbb4:	f04f 0000 	mov.w	r0, #0
 800dbb8:	f380 8811 	msr	BASEPRI, r0
 800dbbc:	bc09      	pop	{r0, r3}
 800dbbe:	6819      	ldr	r1, [r3, #0]
 800dbc0:	6808      	ldr	r0, [r1, #0]
 800dbc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc6:	f01e 0f10 	tst.w	lr, #16
 800dbca:	bf08      	it	eq
 800dbcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dbd0:	f380 8809 	msr	PSP, r0
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	4770      	bx	lr
 800dbda:	bf00      	nop
 800dbdc:	f3af 8000 	nop.w

0800dbe0 <pxCurrentTCBConst>:
 800dbe0:	20001ffc 	.word	0x20001ffc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dbe4:	bf00      	nop
 800dbe6:	bf00      	nop

0800dbe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
	__asm volatile
 800dbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf2:	f383 8811 	msr	BASEPRI, r3
 800dbf6:	f3bf 8f6f 	isb	sy
 800dbfa:	f3bf 8f4f 	dsb	sy
 800dbfe:	607b      	str	r3, [r7, #4]
}
 800dc00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dc02:	f7fe fdc9 	bl	800c798 <xTaskIncrementTick>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d003      	beq.n	800dc14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc0c:	4b06      	ldr	r3, [pc, #24]	@ (800dc28 <xPortSysTickHandler+0x40>)
 800dc0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc12:	601a      	str	r2, [r3, #0]
 800dc14:	2300      	movs	r3, #0
 800dc16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	f383 8811 	msr	BASEPRI, r3
}
 800dc1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dc20:	bf00      	nop
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	e000ed04 	.word	0xe000ed04

0800dc2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dc30:	4b0b      	ldr	r3, [pc, #44]	@ (800dc60 <vPortSetupTimerInterrupt+0x34>)
 800dc32:	2200      	movs	r2, #0
 800dc34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dc36:	4b0b      	ldr	r3, [pc, #44]	@ (800dc64 <vPortSetupTimerInterrupt+0x38>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dc3c:	4b0a      	ldr	r3, [pc, #40]	@ (800dc68 <vPortSetupTimerInterrupt+0x3c>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a0a      	ldr	r2, [pc, #40]	@ (800dc6c <vPortSetupTimerInterrupt+0x40>)
 800dc42:	fba2 2303 	umull	r2, r3, r2, r3
 800dc46:	099b      	lsrs	r3, r3, #6
 800dc48:	4a09      	ldr	r2, [pc, #36]	@ (800dc70 <vPortSetupTimerInterrupt+0x44>)
 800dc4a:	3b01      	subs	r3, #1
 800dc4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dc4e:	4b04      	ldr	r3, [pc, #16]	@ (800dc60 <vPortSetupTimerInterrupt+0x34>)
 800dc50:	2207      	movs	r2, #7
 800dc52:	601a      	str	r2, [r3, #0]
}
 800dc54:	bf00      	nop
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	e000e010 	.word	0xe000e010
 800dc64:	e000e018 	.word	0xe000e018
 800dc68:	20000044 	.word	0x20000044
 800dc6c:	10624dd3 	.word	0x10624dd3
 800dc70:	e000e014 	.word	0xe000e014

0800dc74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dc74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dc84 <vPortEnableVFP+0x10>
 800dc78:	6801      	ldr	r1, [r0, #0]
 800dc7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dc7e:	6001      	str	r1, [r0, #0]
 800dc80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dc82:	bf00      	nop
 800dc84:	e000ed88 	.word	0xe000ed88

0800dc88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dc88:	b480      	push	{r7}
 800dc8a:	b085      	sub	sp, #20
 800dc8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dc8e:	f3ef 8305 	mrs	r3, IPSR
 800dc92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2b0f      	cmp	r3, #15
 800dc98:	d915      	bls.n	800dcc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dc9a:	4a18      	ldr	r2, [pc, #96]	@ (800dcfc <vPortValidateInterruptPriority+0x74>)
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	4413      	add	r3, r2
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dca4:	4b16      	ldr	r3, [pc, #88]	@ (800dd00 <vPortValidateInterruptPriority+0x78>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	7afa      	ldrb	r2, [r7, #11]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d20b      	bcs.n	800dcc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800dcae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb2:	f383 8811 	msr	BASEPRI, r3
 800dcb6:	f3bf 8f6f 	isb	sy
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	607b      	str	r3, [r7, #4]
}
 800dcc0:	bf00      	nop
 800dcc2:	bf00      	nop
 800dcc4:	e7fd      	b.n	800dcc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dcc6:	4b0f      	ldr	r3, [pc, #60]	@ (800dd04 <vPortValidateInterruptPriority+0x7c>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dcce:	4b0e      	ldr	r3, [pc, #56]	@ (800dd08 <vPortValidateInterruptPriority+0x80>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d90b      	bls.n	800dcee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcda:	f383 8811 	msr	BASEPRI, r3
 800dcde:	f3bf 8f6f 	isb	sy
 800dce2:	f3bf 8f4f 	dsb	sy
 800dce6:	603b      	str	r3, [r7, #0]
}
 800dce8:	bf00      	nop
 800dcea:	bf00      	nop
 800dcec:	e7fd      	b.n	800dcea <vPortValidateInterruptPriority+0x62>
	}
 800dcee:	bf00      	nop
 800dcf0:	3714      	adds	r7, #20
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	e000e3f0 	.word	0xe000e3f0
 800dd00:	20002628 	.word	0x20002628
 800dd04:	e000ed0c 	.word	0xe000ed0c
 800dd08:	2000262c 	.word	0x2000262c

0800dd0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b08a      	sub	sp, #40	@ 0x28
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd14:	2300      	movs	r3, #0
 800dd16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dd18:	f7fe fc82 	bl	800c620 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dd1c:	4b5c      	ldr	r3, [pc, #368]	@ (800de90 <pvPortMalloc+0x184>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d101      	bne.n	800dd28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dd24:	f000 f924 	bl	800df70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd28:	4b5a      	ldr	r3, [pc, #360]	@ (800de94 <pvPortMalloc+0x188>)
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4013      	ands	r3, r2
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f040 8095 	bne.w	800de60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d01e      	beq.n	800dd7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dd3c:	2208      	movs	r2, #8
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	4413      	add	r3, r2
 800dd42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f003 0307 	and.w	r3, r3, #7
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d015      	beq.n	800dd7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f023 0307 	bic.w	r3, r3, #7
 800dd54:	3308      	adds	r3, #8
 800dd56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f003 0307 	and.w	r3, r3, #7
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00b      	beq.n	800dd7a <pvPortMalloc+0x6e>
	__asm volatile
 800dd62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	617b      	str	r3, [r7, #20]
}
 800dd74:	bf00      	nop
 800dd76:	bf00      	nop
 800dd78:	e7fd      	b.n	800dd76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d06f      	beq.n	800de60 <pvPortMalloc+0x154>
 800dd80:	4b45      	ldr	r3, [pc, #276]	@ (800de98 <pvPortMalloc+0x18c>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d86a      	bhi.n	800de60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dd8a:	4b44      	ldr	r3, [pc, #272]	@ (800de9c <pvPortMalloc+0x190>)
 800dd8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dd8e:	4b43      	ldr	r3, [pc, #268]	@ (800de9c <pvPortMalloc+0x190>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd94:	e004      	b.n	800dda0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d903      	bls.n	800ddb2 <pvPortMalloc+0xa6>
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d1f1      	bne.n	800dd96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ddb2:	4b37      	ldr	r3, [pc, #220]	@ (800de90 <pvPortMalloc+0x184>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d051      	beq.n	800de60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2208      	movs	r2, #8
 800ddc2:	4413      	add	r3, r2
 800ddc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	6a3b      	ldr	r3, [r7, #32]
 800ddcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ddce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd0:	685a      	ldr	r2, [r3, #4]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	1ad2      	subs	r2, r2, r3
 800ddd6:	2308      	movs	r3, #8
 800ddd8:	005b      	lsls	r3, r3, #1
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d920      	bls.n	800de20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ddde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	4413      	add	r3, r2
 800dde4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	f003 0307 	and.w	r3, r3, #7
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d00b      	beq.n	800de08 <pvPortMalloc+0xfc>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	613b      	str	r3, [r7, #16]
}
 800de02:	bf00      	nop
 800de04:	bf00      	nop
 800de06:	e7fd      	b.n	800de04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0a:	685a      	ldr	r2, [r3, #4]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	1ad2      	subs	r2, r2, r3
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800de1a:	69b8      	ldr	r0, [r7, #24]
 800de1c:	f000 f90a 	bl	800e034 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800de20:	4b1d      	ldr	r3, [pc, #116]	@ (800de98 <pvPortMalloc+0x18c>)
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	1ad3      	subs	r3, r2, r3
 800de2a:	4a1b      	ldr	r2, [pc, #108]	@ (800de98 <pvPortMalloc+0x18c>)
 800de2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800de2e:	4b1a      	ldr	r3, [pc, #104]	@ (800de98 <pvPortMalloc+0x18c>)
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	4b1b      	ldr	r3, [pc, #108]	@ (800dea0 <pvPortMalloc+0x194>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	429a      	cmp	r2, r3
 800de38:	d203      	bcs.n	800de42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800de3a:	4b17      	ldr	r3, [pc, #92]	@ (800de98 <pvPortMalloc+0x18c>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a18      	ldr	r2, [pc, #96]	@ (800dea0 <pvPortMalloc+0x194>)
 800de40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800de42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de44:	685a      	ldr	r2, [r3, #4]
 800de46:	4b13      	ldr	r3, [pc, #76]	@ (800de94 <pvPortMalloc+0x188>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	431a      	orrs	r2, r3
 800de4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800de50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de52:	2200      	movs	r2, #0
 800de54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800de56:	4b13      	ldr	r3, [pc, #76]	@ (800dea4 <pvPortMalloc+0x198>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	3301      	adds	r3, #1
 800de5c:	4a11      	ldr	r2, [pc, #68]	@ (800dea4 <pvPortMalloc+0x198>)
 800de5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800de60:	f7fe fbec 	bl	800c63c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	f003 0307 	and.w	r3, r3, #7
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00b      	beq.n	800de86 <pvPortMalloc+0x17a>
	__asm volatile
 800de6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de72:	f383 8811 	msr	BASEPRI, r3
 800de76:	f3bf 8f6f 	isb	sy
 800de7a:	f3bf 8f4f 	dsb	sy
 800de7e:	60fb      	str	r3, [r7, #12]
}
 800de80:	bf00      	nop
 800de82:	bf00      	nop
 800de84:	e7fd      	b.n	800de82 <pvPortMalloc+0x176>
	return pvReturn;
 800de86:	69fb      	ldr	r3, [r7, #28]
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3728      	adds	r7, #40	@ 0x28
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	200031f0 	.word	0x200031f0
 800de94:	20003204 	.word	0x20003204
 800de98:	200031f4 	.word	0x200031f4
 800de9c:	200031e8 	.word	0x200031e8
 800dea0:	200031f8 	.word	0x200031f8
 800dea4:	200031fc 	.word	0x200031fc

0800dea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b086      	sub	sp, #24
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d04f      	beq.n	800df5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800deba:	2308      	movs	r3, #8
 800debc:	425b      	negs	r3, r3
 800debe:	697a      	ldr	r2, [r7, #20]
 800dec0:	4413      	add	r3, r2
 800dec2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	685a      	ldr	r2, [r3, #4]
 800decc:	4b25      	ldr	r3, [pc, #148]	@ (800df64 <vPortFree+0xbc>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4013      	ands	r3, r2
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10b      	bne.n	800deee <vPortFree+0x46>
	__asm volatile
 800ded6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deda:	f383 8811 	msr	BASEPRI, r3
 800dede:	f3bf 8f6f 	isb	sy
 800dee2:	f3bf 8f4f 	dsb	sy
 800dee6:	60fb      	str	r3, [r7, #12]
}
 800dee8:	bf00      	nop
 800deea:	bf00      	nop
 800deec:	e7fd      	b.n	800deea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00b      	beq.n	800df0e <vPortFree+0x66>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	60bb      	str	r3, [r7, #8]
}
 800df08:	bf00      	nop
 800df0a:	bf00      	nop
 800df0c:	e7fd      	b.n	800df0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	685a      	ldr	r2, [r3, #4]
 800df12:	4b14      	ldr	r3, [pc, #80]	@ (800df64 <vPortFree+0xbc>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4013      	ands	r3, r2
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d01e      	beq.n	800df5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d11a      	bne.n	800df5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	685a      	ldr	r2, [r3, #4]
 800df28:	4b0e      	ldr	r3, [pc, #56]	@ (800df64 <vPortFree+0xbc>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	43db      	mvns	r3, r3
 800df2e:	401a      	ands	r2, r3
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800df34:	f7fe fb74 	bl	800c620 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	685a      	ldr	r2, [r3, #4]
 800df3c:	4b0a      	ldr	r3, [pc, #40]	@ (800df68 <vPortFree+0xc0>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4413      	add	r3, r2
 800df42:	4a09      	ldr	r2, [pc, #36]	@ (800df68 <vPortFree+0xc0>)
 800df44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800df46:	6938      	ldr	r0, [r7, #16]
 800df48:	f000 f874 	bl	800e034 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800df4c:	4b07      	ldr	r3, [pc, #28]	@ (800df6c <vPortFree+0xc4>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	3301      	adds	r3, #1
 800df52:	4a06      	ldr	r2, [pc, #24]	@ (800df6c <vPortFree+0xc4>)
 800df54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800df56:	f7fe fb71 	bl	800c63c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800df5a:	bf00      	nop
 800df5c:	3718      	adds	r7, #24
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	20003204 	.word	0x20003204
 800df68:	200031f4 	.word	0x200031f4
 800df6c:	20003200 	.word	0x20003200

0800df70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800df76:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800df7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800df7c:	4b27      	ldr	r3, [pc, #156]	@ (800e01c <prvHeapInit+0xac>)
 800df7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f003 0307 	and.w	r3, r3, #7
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00c      	beq.n	800dfa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	3307      	adds	r3, #7
 800df8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f023 0307 	bic.w	r3, r3, #7
 800df96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	4a1f      	ldr	r2, [pc, #124]	@ (800e01c <prvHeapInit+0xac>)
 800dfa0:	4413      	add	r3, r2
 800dfa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dfa8:	4a1d      	ldr	r2, [pc, #116]	@ (800e020 <prvHeapInit+0xb0>)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dfae:	4b1c      	ldr	r3, [pc, #112]	@ (800e020 <prvHeapInit+0xb0>)
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	68ba      	ldr	r2, [r7, #8]
 800dfb8:	4413      	add	r3, r2
 800dfba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dfbc:	2208      	movs	r2, #8
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	1a9b      	subs	r3, r3, r2
 800dfc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f023 0307 	bic.w	r3, r3, #7
 800dfca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	4a15      	ldr	r2, [pc, #84]	@ (800e024 <prvHeapInit+0xb4>)
 800dfd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dfd2:	4b14      	ldr	r3, [pc, #80]	@ (800e024 <prvHeapInit+0xb4>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dfda:	4b12      	ldr	r3, [pc, #72]	@ (800e024 <prvHeapInit+0xb4>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	1ad2      	subs	r2, r2, r3
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dff0:	4b0c      	ldr	r3, [pc, #48]	@ (800e024 <prvHeapInit+0xb4>)
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	4a0a      	ldr	r2, [pc, #40]	@ (800e028 <prvHeapInit+0xb8>)
 800dffe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	4a09      	ldr	r2, [pc, #36]	@ (800e02c <prvHeapInit+0xbc>)
 800e006:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e008:	4b09      	ldr	r3, [pc, #36]	@ (800e030 <prvHeapInit+0xc0>)
 800e00a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e00e:	601a      	str	r2, [r3, #0]
}
 800e010:	bf00      	nop
 800e012:	3714      	adds	r7, #20
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr
 800e01c:	20002630 	.word	0x20002630
 800e020:	200031e8 	.word	0x200031e8
 800e024:	200031f0 	.word	0x200031f0
 800e028:	200031f8 	.word	0x200031f8
 800e02c:	200031f4 	.word	0x200031f4
 800e030:	20003204 	.word	0x20003204

0800e034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e03c:	4b28      	ldr	r3, [pc, #160]	@ (800e0e0 <prvInsertBlockIntoFreeList+0xac>)
 800e03e:	60fb      	str	r3, [r7, #12]
 800e040:	e002      	b.n	800e048 <prvInsertBlockIntoFreeList+0x14>
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	60fb      	str	r3, [r7, #12]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d8f7      	bhi.n	800e042 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	68ba      	ldr	r2, [r7, #8]
 800e05c:	4413      	add	r3, r2
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	429a      	cmp	r2, r3
 800e062:	d108      	bne.n	800e076 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	685a      	ldr	r2, [r3, #4]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	441a      	add	r2, r3
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	68ba      	ldr	r2, [r7, #8]
 800e080:	441a      	add	r2, r3
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	429a      	cmp	r2, r3
 800e088:	d118      	bne.n	800e0bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	4b15      	ldr	r3, [pc, #84]	@ (800e0e4 <prvInsertBlockIntoFreeList+0xb0>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	429a      	cmp	r2, r3
 800e094:	d00d      	beq.n	800e0b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	685a      	ldr	r2, [r3, #4]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	441a      	add	r2, r3
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	601a      	str	r2, [r3, #0]
 800e0b0:	e008      	b.n	800e0c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e0b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e0e4 <prvInsertBlockIntoFreeList+0xb0>)
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	601a      	str	r2, [r3, #0]
 800e0ba:	e003      	b.n	800e0c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d002      	beq.n	800e0d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0d2:	bf00      	nop
 800e0d4:	3714      	adds	r7, #20
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop
 800e0e0:	200031e8 	.word	0x200031e8
 800e0e4:	200031f0 	.word	0x200031f0

0800e0e8 <__cvt>:
 800e0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ec:	ec57 6b10 	vmov	r6, r7, d0
 800e0f0:	2f00      	cmp	r7, #0
 800e0f2:	460c      	mov	r4, r1
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	463b      	mov	r3, r7
 800e0f8:	bfbb      	ittet	lt
 800e0fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e0fe:	461f      	movlt	r7, r3
 800e100:	2300      	movge	r3, #0
 800e102:	232d      	movlt	r3, #45	@ 0x2d
 800e104:	700b      	strb	r3, [r1, #0]
 800e106:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e108:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e10c:	4691      	mov	r9, r2
 800e10e:	f023 0820 	bic.w	r8, r3, #32
 800e112:	bfbc      	itt	lt
 800e114:	4632      	movlt	r2, r6
 800e116:	4616      	movlt	r6, r2
 800e118:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e11c:	d005      	beq.n	800e12a <__cvt+0x42>
 800e11e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e122:	d100      	bne.n	800e126 <__cvt+0x3e>
 800e124:	3401      	adds	r4, #1
 800e126:	2102      	movs	r1, #2
 800e128:	e000      	b.n	800e12c <__cvt+0x44>
 800e12a:	2103      	movs	r1, #3
 800e12c:	ab03      	add	r3, sp, #12
 800e12e:	9301      	str	r3, [sp, #4]
 800e130:	ab02      	add	r3, sp, #8
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	ec47 6b10 	vmov	d0, r6, r7
 800e138:	4653      	mov	r3, sl
 800e13a:	4622      	mov	r2, r4
 800e13c:	f001 fa4c 	bl	800f5d8 <_dtoa_r>
 800e140:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e144:	4605      	mov	r5, r0
 800e146:	d119      	bne.n	800e17c <__cvt+0x94>
 800e148:	f019 0f01 	tst.w	r9, #1
 800e14c:	d00e      	beq.n	800e16c <__cvt+0x84>
 800e14e:	eb00 0904 	add.w	r9, r0, r4
 800e152:	2200      	movs	r2, #0
 800e154:	2300      	movs	r3, #0
 800e156:	4630      	mov	r0, r6
 800e158:	4639      	mov	r1, r7
 800e15a:	f7f2 fcb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e15e:	b108      	cbz	r0, 800e164 <__cvt+0x7c>
 800e160:	f8cd 900c 	str.w	r9, [sp, #12]
 800e164:	2230      	movs	r2, #48	@ 0x30
 800e166:	9b03      	ldr	r3, [sp, #12]
 800e168:	454b      	cmp	r3, r9
 800e16a:	d31e      	bcc.n	800e1aa <__cvt+0xc2>
 800e16c:	9b03      	ldr	r3, [sp, #12]
 800e16e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e170:	1b5b      	subs	r3, r3, r5
 800e172:	4628      	mov	r0, r5
 800e174:	6013      	str	r3, [r2, #0]
 800e176:	b004      	add	sp, #16
 800e178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e17c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e180:	eb00 0904 	add.w	r9, r0, r4
 800e184:	d1e5      	bne.n	800e152 <__cvt+0x6a>
 800e186:	7803      	ldrb	r3, [r0, #0]
 800e188:	2b30      	cmp	r3, #48	@ 0x30
 800e18a:	d10a      	bne.n	800e1a2 <__cvt+0xba>
 800e18c:	2200      	movs	r2, #0
 800e18e:	2300      	movs	r3, #0
 800e190:	4630      	mov	r0, r6
 800e192:	4639      	mov	r1, r7
 800e194:	f7f2 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 800e198:	b918      	cbnz	r0, 800e1a2 <__cvt+0xba>
 800e19a:	f1c4 0401 	rsb	r4, r4, #1
 800e19e:	f8ca 4000 	str.w	r4, [sl]
 800e1a2:	f8da 3000 	ldr.w	r3, [sl]
 800e1a6:	4499      	add	r9, r3
 800e1a8:	e7d3      	b.n	800e152 <__cvt+0x6a>
 800e1aa:	1c59      	adds	r1, r3, #1
 800e1ac:	9103      	str	r1, [sp, #12]
 800e1ae:	701a      	strb	r2, [r3, #0]
 800e1b0:	e7d9      	b.n	800e166 <__cvt+0x7e>

0800e1b2 <__exponent>:
 800e1b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1b4:	2900      	cmp	r1, #0
 800e1b6:	bfba      	itte	lt
 800e1b8:	4249      	neglt	r1, r1
 800e1ba:	232d      	movlt	r3, #45	@ 0x2d
 800e1bc:	232b      	movge	r3, #43	@ 0x2b
 800e1be:	2909      	cmp	r1, #9
 800e1c0:	7002      	strb	r2, [r0, #0]
 800e1c2:	7043      	strb	r3, [r0, #1]
 800e1c4:	dd29      	ble.n	800e21a <__exponent+0x68>
 800e1c6:	f10d 0307 	add.w	r3, sp, #7
 800e1ca:	461d      	mov	r5, r3
 800e1cc:	270a      	movs	r7, #10
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800e1d4:	fb07 1416 	mls	r4, r7, r6, r1
 800e1d8:	3430      	adds	r4, #48	@ 0x30
 800e1da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e1de:	460c      	mov	r4, r1
 800e1e0:	2c63      	cmp	r4, #99	@ 0x63
 800e1e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e1e6:	4631      	mov	r1, r6
 800e1e8:	dcf1      	bgt.n	800e1ce <__exponent+0x1c>
 800e1ea:	3130      	adds	r1, #48	@ 0x30
 800e1ec:	1e94      	subs	r4, r2, #2
 800e1ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e1f2:	1c41      	adds	r1, r0, #1
 800e1f4:	4623      	mov	r3, r4
 800e1f6:	42ab      	cmp	r3, r5
 800e1f8:	d30a      	bcc.n	800e210 <__exponent+0x5e>
 800e1fa:	f10d 0309 	add.w	r3, sp, #9
 800e1fe:	1a9b      	subs	r3, r3, r2
 800e200:	42ac      	cmp	r4, r5
 800e202:	bf88      	it	hi
 800e204:	2300      	movhi	r3, #0
 800e206:	3302      	adds	r3, #2
 800e208:	4403      	add	r3, r0
 800e20a:	1a18      	subs	r0, r3, r0
 800e20c:	b003      	add	sp, #12
 800e20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e210:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e214:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e218:	e7ed      	b.n	800e1f6 <__exponent+0x44>
 800e21a:	2330      	movs	r3, #48	@ 0x30
 800e21c:	3130      	adds	r1, #48	@ 0x30
 800e21e:	7083      	strb	r3, [r0, #2]
 800e220:	70c1      	strb	r1, [r0, #3]
 800e222:	1d03      	adds	r3, r0, #4
 800e224:	e7f1      	b.n	800e20a <__exponent+0x58>
	...

0800e228 <_printf_float>:
 800e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	b08d      	sub	sp, #52	@ 0x34
 800e22e:	460c      	mov	r4, r1
 800e230:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e234:	4616      	mov	r6, r2
 800e236:	461f      	mov	r7, r3
 800e238:	4605      	mov	r5, r0
 800e23a:	f001 f89b 	bl	800f374 <_localeconv_r>
 800e23e:	6803      	ldr	r3, [r0, #0]
 800e240:	9304      	str	r3, [sp, #16]
 800e242:	4618      	mov	r0, r3
 800e244:	f7f2 f814 	bl	8000270 <strlen>
 800e248:	2300      	movs	r3, #0
 800e24a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e24c:	f8d8 3000 	ldr.w	r3, [r8]
 800e250:	9005      	str	r0, [sp, #20]
 800e252:	3307      	adds	r3, #7
 800e254:	f023 0307 	bic.w	r3, r3, #7
 800e258:	f103 0208 	add.w	r2, r3, #8
 800e25c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e260:	f8d4 b000 	ldr.w	fp, [r4]
 800e264:	f8c8 2000 	str.w	r2, [r8]
 800e268:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e26c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e270:	9307      	str	r3, [sp, #28]
 800e272:	f8cd 8018 	str.w	r8, [sp, #24]
 800e276:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e27a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e27e:	4b9c      	ldr	r3, [pc, #624]	@ (800e4f0 <_printf_float+0x2c8>)
 800e280:	f04f 32ff 	mov.w	r2, #4294967295
 800e284:	f7f2 fc52 	bl	8000b2c <__aeabi_dcmpun>
 800e288:	bb70      	cbnz	r0, 800e2e8 <_printf_float+0xc0>
 800e28a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e28e:	4b98      	ldr	r3, [pc, #608]	@ (800e4f0 <_printf_float+0x2c8>)
 800e290:	f04f 32ff 	mov.w	r2, #4294967295
 800e294:	f7f2 fc2c 	bl	8000af0 <__aeabi_dcmple>
 800e298:	bb30      	cbnz	r0, 800e2e8 <_printf_float+0xc0>
 800e29a:	2200      	movs	r2, #0
 800e29c:	2300      	movs	r3, #0
 800e29e:	4640      	mov	r0, r8
 800e2a0:	4649      	mov	r1, r9
 800e2a2:	f7f2 fc1b 	bl	8000adc <__aeabi_dcmplt>
 800e2a6:	b110      	cbz	r0, 800e2ae <_printf_float+0x86>
 800e2a8:	232d      	movs	r3, #45	@ 0x2d
 800e2aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2ae:	4a91      	ldr	r2, [pc, #580]	@ (800e4f4 <_printf_float+0x2cc>)
 800e2b0:	4b91      	ldr	r3, [pc, #580]	@ (800e4f8 <_printf_float+0x2d0>)
 800e2b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e2b6:	bf94      	ite	ls
 800e2b8:	4690      	movls	r8, r2
 800e2ba:	4698      	movhi	r8, r3
 800e2bc:	2303      	movs	r3, #3
 800e2be:	6123      	str	r3, [r4, #16]
 800e2c0:	f02b 0304 	bic.w	r3, fp, #4
 800e2c4:	6023      	str	r3, [r4, #0]
 800e2c6:	f04f 0900 	mov.w	r9, #0
 800e2ca:	9700      	str	r7, [sp, #0]
 800e2cc:	4633      	mov	r3, r6
 800e2ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	f000 f9d2 	bl	800e67c <_printf_common>
 800e2d8:	3001      	adds	r0, #1
 800e2da:	f040 808d 	bne.w	800e3f8 <_printf_float+0x1d0>
 800e2de:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e2:	b00d      	add	sp, #52	@ 0x34
 800e2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e8:	4642      	mov	r2, r8
 800e2ea:	464b      	mov	r3, r9
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	4649      	mov	r1, r9
 800e2f0:	f7f2 fc1c 	bl	8000b2c <__aeabi_dcmpun>
 800e2f4:	b140      	cbz	r0, 800e308 <_printf_float+0xe0>
 800e2f6:	464b      	mov	r3, r9
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	bfbc      	itt	lt
 800e2fc:	232d      	movlt	r3, #45	@ 0x2d
 800e2fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e302:	4a7e      	ldr	r2, [pc, #504]	@ (800e4fc <_printf_float+0x2d4>)
 800e304:	4b7e      	ldr	r3, [pc, #504]	@ (800e500 <_printf_float+0x2d8>)
 800e306:	e7d4      	b.n	800e2b2 <_printf_float+0x8a>
 800e308:	6863      	ldr	r3, [r4, #4]
 800e30a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e30e:	9206      	str	r2, [sp, #24]
 800e310:	1c5a      	adds	r2, r3, #1
 800e312:	d13b      	bne.n	800e38c <_printf_float+0x164>
 800e314:	2306      	movs	r3, #6
 800e316:	6063      	str	r3, [r4, #4]
 800e318:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e31c:	2300      	movs	r3, #0
 800e31e:	6022      	str	r2, [r4, #0]
 800e320:	9303      	str	r3, [sp, #12]
 800e322:	ab0a      	add	r3, sp, #40	@ 0x28
 800e324:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e328:	ab09      	add	r3, sp, #36	@ 0x24
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	6861      	ldr	r1, [r4, #4]
 800e32e:	ec49 8b10 	vmov	d0, r8, r9
 800e332:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e336:	4628      	mov	r0, r5
 800e338:	f7ff fed6 	bl	800e0e8 <__cvt>
 800e33c:	9b06      	ldr	r3, [sp, #24]
 800e33e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e340:	2b47      	cmp	r3, #71	@ 0x47
 800e342:	4680      	mov	r8, r0
 800e344:	d129      	bne.n	800e39a <_printf_float+0x172>
 800e346:	1cc8      	adds	r0, r1, #3
 800e348:	db02      	blt.n	800e350 <_printf_float+0x128>
 800e34a:	6863      	ldr	r3, [r4, #4]
 800e34c:	4299      	cmp	r1, r3
 800e34e:	dd41      	ble.n	800e3d4 <_printf_float+0x1ac>
 800e350:	f1aa 0a02 	sub.w	sl, sl, #2
 800e354:	fa5f fa8a 	uxtb.w	sl, sl
 800e358:	3901      	subs	r1, #1
 800e35a:	4652      	mov	r2, sl
 800e35c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e360:	9109      	str	r1, [sp, #36]	@ 0x24
 800e362:	f7ff ff26 	bl	800e1b2 <__exponent>
 800e366:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e368:	1813      	adds	r3, r2, r0
 800e36a:	2a01      	cmp	r2, #1
 800e36c:	4681      	mov	r9, r0
 800e36e:	6123      	str	r3, [r4, #16]
 800e370:	dc02      	bgt.n	800e378 <_printf_float+0x150>
 800e372:	6822      	ldr	r2, [r4, #0]
 800e374:	07d2      	lsls	r2, r2, #31
 800e376:	d501      	bpl.n	800e37c <_printf_float+0x154>
 800e378:	3301      	adds	r3, #1
 800e37a:	6123      	str	r3, [r4, #16]
 800e37c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e380:	2b00      	cmp	r3, #0
 800e382:	d0a2      	beq.n	800e2ca <_printf_float+0xa2>
 800e384:	232d      	movs	r3, #45	@ 0x2d
 800e386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e38a:	e79e      	b.n	800e2ca <_printf_float+0xa2>
 800e38c:	9a06      	ldr	r2, [sp, #24]
 800e38e:	2a47      	cmp	r2, #71	@ 0x47
 800e390:	d1c2      	bne.n	800e318 <_printf_float+0xf0>
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1c0      	bne.n	800e318 <_printf_float+0xf0>
 800e396:	2301      	movs	r3, #1
 800e398:	e7bd      	b.n	800e316 <_printf_float+0xee>
 800e39a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e39e:	d9db      	bls.n	800e358 <_printf_float+0x130>
 800e3a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e3a4:	d118      	bne.n	800e3d8 <_printf_float+0x1b0>
 800e3a6:	2900      	cmp	r1, #0
 800e3a8:	6863      	ldr	r3, [r4, #4]
 800e3aa:	dd0b      	ble.n	800e3c4 <_printf_float+0x19c>
 800e3ac:	6121      	str	r1, [r4, #16]
 800e3ae:	b913      	cbnz	r3, 800e3b6 <_printf_float+0x18e>
 800e3b0:	6822      	ldr	r2, [r4, #0]
 800e3b2:	07d0      	lsls	r0, r2, #31
 800e3b4:	d502      	bpl.n	800e3bc <_printf_float+0x194>
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	440b      	add	r3, r1
 800e3ba:	6123      	str	r3, [r4, #16]
 800e3bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e3be:	f04f 0900 	mov.w	r9, #0
 800e3c2:	e7db      	b.n	800e37c <_printf_float+0x154>
 800e3c4:	b913      	cbnz	r3, 800e3cc <_printf_float+0x1a4>
 800e3c6:	6822      	ldr	r2, [r4, #0]
 800e3c8:	07d2      	lsls	r2, r2, #31
 800e3ca:	d501      	bpl.n	800e3d0 <_printf_float+0x1a8>
 800e3cc:	3302      	adds	r3, #2
 800e3ce:	e7f4      	b.n	800e3ba <_printf_float+0x192>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	e7f2      	b.n	800e3ba <_printf_float+0x192>
 800e3d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e3d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3da:	4299      	cmp	r1, r3
 800e3dc:	db05      	blt.n	800e3ea <_printf_float+0x1c2>
 800e3de:	6823      	ldr	r3, [r4, #0]
 800e3e0:	6121      	str	r1, [r4, #16]
 800e3e2:	07d8      	lsls	r0, r3, #31
 800e3e4:	d5ea      	bpl.n	800e3bc <_printf_float+0x194>
 800e3e6:	1c4b      	adds	r3, r1, #1
 800e3e8:	e7e7      	b.n	800e3ba <_printf_float+0x192>
 800e3ea:	2900      	cmp	r1, #0
 800e3ec:	bfd4      	ite	le
 800e3ee:	f1c1 0202 	rsble	r2, r1, #2
 800e3f2:	2201      	movgt	r2, #1
 800e3f4:	4413      	add	r3, r2
 800e3f6:	e7e0      	b.n	800e3ba <_printf_float+0x192>
 800e3f8:	6823      	ldr	r3, [r4, #0]
 800e3fa:	055a      	lsls	r2, r3, #21
 800e3fc:	d407      	bmi.n	800e40e <_printf_float+0x1e6>
 800e3fe:	6923      	ldr	r3, [r4, #16]
 800e400:	4642      	mov	r2, r8
 800e402:	4631      	mov	r1, r6
 800e404:	4628      	mov	r0, r5
 800e406:	47b8      	blx	r7
 800e408:	3001      	adds	r0, #1
 800e40a:	d12b      	bne.n	800e464 <_printf_float+0x23c>
 800e40c:	e767      	b.n	800e2de <_printf_float+0xb6>
 800e40e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e412:	f240 80dd 	bls.w	800e5d0 <_printf_float+0x3a8>
 800e416:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e41a:	2200      	movs	r2, #0
 800e41c:	2300      	movs	r3, #0
 800e41e:	f7f2 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 800e422:	2800      	cmp	r0, #0
 800e424:	d033      	beq.n	800e48e <_printf_float+0x266>
 800e426:	4a37      	ldr	r2, [pc, #220]	@ (800e504 <_printf_float+0x2dc>)
 800e428:	2301      	movs	r3, #1
 800e42a:	4631      	mov	r1, r6
 800e42c:	4628      	mov	r0, r5
 800e42e:	47b8      	blx	r7
 800e430:	3001      	adds	r0, #1
 800e432:	f43f af54 	beq.w	800e2de <_printf_float+0xb6>
 800e436:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e43a:	4543      	cmp	r3, r8
 800e43c:	db02      	blt.n	800e444 <_printf_float+0x21c>
 800e43e:	6823      	ldr	r3, [r4, #0]
 800e440:	07d8      	lsls	r0, r3, #31
 800e442:	d50f      	bpl.n	800e464 <_printf_float+0x23c>
 800e444:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e448:	4631      	mov	r1, r6
 800e44a:	4628      	mov	r0, r5
 800e44c:	47b8      	blx	r7
 800e44e:	3001      	adds	r0, #1
 800e450:	f43f af45 	beq.w	800e2de <_printf_float+0xb6>
 800e454:	f04f 0900 	mov.w	r9, #0
 800e458:	f108 38ff 	add.w	r8, r8, #4294967295
 800e45c:	f104 0a1a 	add.w	sl, r4, #26
 800e460:	45c8      	cmp	r8, r9
 800e462:	dc09      	bgt.n	800e478 <_printf_float+0x250>
 800e464:	6823      	ldr	r3, [r4, #0]
 800e466:	079b      	lsls	r3, r3, #30
 800e468:	f100 8103 	bmi.w	800e672 <_printf_float+0x44a>
 800e46c:	68e0      	ldr	r0, [r4, #12]
 800e46e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e470:	4298      	cmp	r0, r3
 800e472:	bfb8      	it	lt
 800e474:	4618      	movlt	r0, r3
 800e476:	e734      	b.n	800e2e2 <_printf_float+0xba>
 800e478:	2301      	movs	r3, #1
 800e47a:	4652      	mov	r2, sl
 800e47c:	4631      	mov	r1, r6
 800e47e:	4628      	mov	r0, r5
 800e480:	47b8      	blx	r7
 800e482:	3001      	adds	r0, #1
 800e484:	f43f af2b 	beq.w	800e2de <_printf_float+0xb6>
 800e488:	f109 0901 	add.w	r9, r9, #1
 800e48c:	e7e8      	b.n	800e460 <_printf_float+0x238>
 800e48e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e490:	2b00      	cmp	r3, #0
 800e492:	dc39      	bgt.n	800e508 <_printf_float+0x2e0>
 800e494:	4a1b      	ldr	r2, [pc, #108]	@ (800e504 <_printf_float+0x2dc>)
 800e496:	2301      	movs	r3, #1
 800e498:	4631      	mov	r1, r6
 800e49a:	4628      	mov	r0, r5
 800e49c:	47b8      	blx	r7
 800e49e:	3001      	adds	r0, #1
 800e4a0:	f43f af1d 	beq.w	800e2de <_printf_float+0xb6>
 800e4a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e4a8:	ea59 0303 	orrs.w	r3, r9, r3
 800e4ac:	d102      	bne.n	800e4b4 <_printf_float+0x28c>
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	07d9      	lsls	r1, r3, #31
 800e4b2:	d5d7      	bpl.n	800e464 <_printf_float+0x23c>
 800e4b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	47b8      	blx	r7
 800e4be:	3001      	adds	r0, #1
 800e4c0:	f43f af0d 	beq.w	800e2de <_printf_float+0xb6>
 800e4c4:	f04f 0a00 	mov.w	sl, #0
 800e4c8:	f104 0b1a 	add.w	fp, r4, #26
 800e4cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ce:	425b      	negs	r3, r3
 800e4d0:	4553      	cmp	r3, sl
 800e4d2:	dc01      	bgt.n	800e4d8 <_printf_float+0x2b0>
 800e4d4:	464b      	mov	r3, r9
 800e4d6:	e793      	b.n	800e400 <_printf_float+0x1d8>
 800e4d8:	2301      	movs	r3, #1
 800e4da:	465a      	mov	r2, fp
 800e4dc:	4631      	mov	r1, r6
 800e4de:	4628      	mov	r0, r5
 800e4e0:	47b8      	blx	r7
 800e4e2:	3001      	adds	r0, #1
 800e4e4:	f43f aefb 	beq.w	800e2de <_printf_float+0xb6>
 800e4e8:	f10a 0a01 	add.w	sl, sl, #1
 800e4ec:	e7ee      	b.n	800e4cc <_printf_float+0x2a4>
 800e4ee:	bf00      	nop
 800e4f0:	7fefffff 	.word	0x7fefffff
 800e4f4:	0801358c 	.word	0x0801358c
 800e4f8:	08013590 	.word	0x08013590
 800e4fc:	08013594 	.word	0x08013594
 800e500:	08013598 	.word	0x08013598
 800e504:	0801359c 	.word	0x0801359c
 800e508:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e50a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e50e:	4553      	cmp	r3, sl
 800e510:	bfa8      	it	ge
 800e512:	4653      	movge	r3, sl
 800e514:	2b00      	cmp	r3, #0
 800e516:	4699      	mov	r9, r3
 800e518:	dc36      	bgt.n	800e588 <_printf_float+0x360>
 800e51a:	f04f 0b00 	mov.w	fp, #0
 800e51e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e522:	f104 021a 	add.w	r2, r4, #26
 800e526:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e528:	9306      	str	r3, [sp, #24]
 800e52a:	eba3 0309 	sub.w	r3, r3, r9
 800e52e:	455b      	cmp	r3, fp
 800e530:	dc31      	bgt.n	800e596 <_printf_float+0x36e>
 800e532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e534:	459a      	cmp	sl, r3
 800e536:	dc3a      	bgt.n	800e5ae <_printf_float+0x386>
 800e538:	6823      	ldr	r3, [r4, #0]
 800e53a:	07da      	lsls	r2, r3, #31
 800e53c:	d437      	bmi.n	800e5ae <_printf_float+0x386>
 800e53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e540:	ebaa 0903 	sub.w	r9, sl, r3
 800e544:	9b06      	ldr	r3, [sp, #24]
 800e546:	ebaa 0303 	sub.w	r3, sl, r3
 800e54a:	4599      	cmp	r9, r3
 800e54c:	bfa8      	it	ge
 800e54e:	4699      	movge	r9, r3
 800e550:	f1b9 0f00 	cmp.w	r9, #0
 800e554:	dc33      	bgt.n	800e5be <_printf_float+0x396>
 800e556:	f04f 0800 	mov.w	r8, #0
 800e55a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e55e:	f104 0b1a 	add.w	fp, r4, #26
 800e562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e564:	ebaa 0303 	sub.w	r3, sl, r3
 800e568:	eba3 0309 	sub.w	r3, r3, r9
 800e56c:	4543      	cmp	r3, r8
 800e56e:	f77f af79 	ble.w	800e464 <_printf_float+0x23c>
 800e572:	2301      	movs	r3, #1
 800e574:	465a      	mov	r2, fp
 800e576:	4631      	mov	r1, r6
 800e578:	4628      	mov	r0, r5
 800e57a:	47b8      	blx	r7
 800e57c:	3001      	adds	r0, #1
 800e57e:	f43f aeae 	beq.w	800e2de <_printf_float+0xb6>
 800e582:	f108 0801 	add.w	r8, r8, #1
 800e586:	e7ec      	b.n	800e562 <_printf_float+0x33a>
 800e588:	4642      	mov	r2, r8
 800e58a:	4631      	mov	r1, r6
 800e58c:	4628      	mov	r0, r5
 800e58e:	47b8      	blx	r7
 800e590:	3001      	adds	r0, #1
 800e592:	d1c2      	bne.n	800e51a <_printf_float+0x2f2>
 800e594:	e6a3      	b.n	800e2de <_printf_float+0xb6>
 800e596:	2301      	movs	r3, #1
 800e598:	4631      	mov	r1, r6
 800e59a:	4628      	mov	r0, r5
 800e59c:	9206      	str	r2, [sp, #24]
 800e59e:	47b8      	blx	r7
 800e5a0:	3001      	adds	r0, #1
 800e5a2:	f43f ae9c 	beq.w	800e2de <_printf_float+0xb6>
 800e5a6:	9a06      	ldr	r2, [sp, #24]
 800e5a8:	f10b 0b01 	add.w	fp, fp, #1
 800e5ac:	e7bb      	b.n	800e526 <_printf_float+0x2fe>
 800e5ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5b2:	4631      	mov	r1, r6
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	47b8      	blx	r7
 800e5b8:	3001      	adds	r0, #1
 800e5ba:	d1c0      	bne.n	800e53e <_printf_float+0x316>
 800e5bc:	e68f      	b.n	800e2de <_printf_float+0xb6>
 800e5be:	9a06      	ldr	r2, [sp, #24]
 800e5c0:	464b      	mov	r3, r9
 800e5c2:	4442      	add	r2, r8
 800e5c4:	4631      	mov	r1, r6
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	47b8      	blx	r7
 800e5ca:	3001      	adds	r0, #1
 800e5cc:	d1c3      	bne.n	800e556 <_printf_float+0x32e>
 800e5ce:	e686      	b.n	800e2de <_printf_float+0xb6>
 800e5d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e5d4:	f1ba 0f01 	cmp.w	sl, #1
 800e5d8:	dc01      	bgt.n	800e5de <_printf_float+0x3b6>
 800e5da:	07db      	lsls	r3, r3, #31
 800e5dc:	d536      	bpl.n	800e64c <_printf_float+0x424>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	4642      	mov	r2, r8
 800e5e2:	4631      	mov	r1, r6
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	47b8      	blx	r7
 800e5e8:	3001      	adds	r0, #1
 800e5ea:	f43f ae78 	beq.w	800e2de <_printf_float+0xb6>
 800e5ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	47b8      	blx	r7
 800e5f8:	3001      	adds	r0, #1
 800e5fa:	f43f ae70 	beq.w	800e2de <_printf_float+0xb6>
 800e5fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e602:	2200      	movs	r2, #0
 800e604:	2300      	movs	r3, #0
 800e606:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e60a:	f7f2 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e60e:	b9c0      	cbnz	r0, 800e642 <_printf_float+0x41a>
 800e610:	4653      	mov	r3, sl
 800e612:	f108 0201 	add.w	r2, r8, #1
 800e616:	4631      	mov	r1, r6
 800e618:	4628      	mov	r0, r5
 800e61a:	47b8      	blx	r7
 800e61c:	3001      	adds	r0, #1
 800e61e:	d10c      	bne.n	800e63a <_printf_float+0x412>
 800e620:	e65d      	b.n	800e2de <_printf_float+0xb6>
 800e622:	2301      	movs	r3, #1
 800e624:	465a      	mov	r2, fp
 800e626:	4631      	mov	r1, r6
 800e628:	4628      	mov	r0, r5
 800e62a:	47b8      	blx	r7
 800e62c:	3001      	adds	r0, #1
 800e62e:	f43f ae56 	beq.w	800e2de <_printf_float+0xb6>
 800e632:	f108 0801 	add.w	r8, r8, #1
 800e636:	45d0      	cmp	r8, sl
 800e638:	dbf3      	blt.n	800e622 <_printf_float+0x3fa>
 800e63a:	464b      	mov	r3, r9
 800e63c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e640:	e6df      	b.n	800e402 <_printf_float+0x1da>
 800e642:	f04f 0800 	mov.w	r8, #0
 800e646:	f104 0b1a 	add.w	fp, r4, #26
 800e64a:	e7f4      	b.n	800e636 <_printf_float+0x40e>
 800e64c:	2301      	movs	r3, #1
 800e64e:	4642      	mov	r2, r8
 800e650:	e7e1      	b.n	800e616 <_printf_float+0x3ee>
 800e652:	2301      	movs	r3, #1
 800e654:	464a      	mov	r2, r9
 800e656:	4631      	mov	r1, r6
 800e658:	4628      	mov	r0, r5
 800e65a:	47b8      	blx	r7
 800e65c:	3001      	adds	r0, #1
 800e65e:	f43f ae3e 	beq.w	800e2de <_printf_float+0xb6>
 800e662:	f108 0801 	add.w	r8, r8, #1
 800e666:	68e3      	ldr	r3, [r4, #12]
 800e668:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e66a:	1a5b      	subs	r3, r3, r1
 800e66c:	4543      	cmp	r3, r8
 800e66e:	dcf0      	bgt.n	800e652 <_printf_float+0x42a>
 800e670:	e6fc      	b.n	800e46c <_printf_float+0x244>
 800e672:	f04f 0800 	mov.w	r8, #0
 800e676:	f104 0919 	add.w	r9, r4, #25
 800e67a:	e7f4      	b.n	800e666 <_printf_float+0x43e>

0800e67c <_printf_common>:
 800e67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e680:	4616      	mov	r6, r2
 800e682:	4698      	mov	r8, r3
 800e684:	688a      	ldr	r2, [r1, #8]
 800e686:	690b      	ldr	r3, [r1, #16]
 800e688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e68c:	4293      	cmp	r3, r2
 800e68e:	bfb8      	it	lt
 800e690:	4613      	movlt	r3, r2
 800e692:	6033      	str	r3, [r6, #0]
 800e694:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e698:	4607      	mov	r7, r0
 800e69a:	460c      	mov	r4, r1
 800e69c:	b10a      	cbz	r2, 800e6a2 <_printf_common+0x26>
 800e69e:	3301      	adds	r3, #1
 800e6a0:	6033      	str	r3, [r6, #0]
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	0699      	lsls	r1, r3, #26
 800e6a6:	bf42      	ittt	mi
 800e6a8:	6833      	ldrmi	r3, [r6, #0]
 800e6aa:	3302      	addmi	r3, #2
 800e6ac:	6033      	strmi	r3, [r6, #0]
 800e6ae:	6825      	ldr	r5, [r4, #0]
 800e6b0:	f015 0506 	ands.w	r5, r5, #6
 800e6b4:	d106      	bne.n	800e6c4 <_printf_common+0x48>
 800e6b6:	f104 0a19 	add.w	sl, r4, #25
 800e6ba:	68e3      	ldr	r3, [r4, #12]
 800e6bc:	6832      	ldr	r2, [r6, #0]
 800e6be:	1a9b      	subs	r3, r3, r2
 800e6c0:	42ab      	cmp	r3, r5
 800e6c2:	dc26      	bgt.n	800e712 <_printf_common+0x96>
 800e6c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e6c8:	6822      	ldr	r2, [r4, #0]
 800e6ca:	3b00      	subs	r3, #0
 800e6cc:	bf18      	it	ne
 800e6ce:	2301      	movne	r3, #1
 800e6d0:	0692      	lsls	r2, r2, #26
 800e6d2:	d42b      	bmi.n	800e72c <_printf_common+0xb0>
 800e6d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e6d8:	4641      	mov	r1, r8
 800e6da:	4638      	mov	r0, r7
 800e6dc:	47c8      	blx	r9
 800e6de:	3001      	adds	r0, #1
 800e6e0:	d01e      	beq.n	800e720 <_printf_common+0xa4>
 800e6e2:	6823      	ldr	r3, [r4, #0]
 800e6e4:	6922      	ldr	r2, [r4, #16]
 800e6e6:	f003 0306 	and.w	r3, r3, #6
 800e6ea:	2b04      	cmp	r3, #4
 800e6ec:	bf02      	ittt	eq
 800e6ee:	68e5      	ldreq	r5, [r4, #12]
 800e6f0:	6833      	ldreq	r3, [r6, #0]
 800e6f2:	1aed      	subeq	r5, r5, r3
 800e6f4:	68a3      	ldr	r3, [r4, #8]
 800e6f6:	bf0c      	ite	eq
 800e6f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6fc:	2500      	movne	r5, #0
 800e6fe:	4293      	cmp	r3, r2
 800e700:	bfc4      	itt	gt
 800e702:	1a9b      	subgt	r3, r3, r2
 800e704:	18ed      	addgt	r5, r5, r3
 800e706:	2600      	movs	r6, #0
 800e708:	341a      	adds	r4, #26
 800e70a:	42b5      	cmp	r5, r6
 800e70c:	d11a      	bne.n	800e744 <_printf_common+0xc8>
 800e70e:	2000      	movs	r0, #0
 800e710:	e008      	b.n	800e724 <_printf_common+0xa8>
 800e712:	2301      	movs	r3, #1
 800e714:	4652      	mov	r2, sl
 800e716:	4641      	mov	r1, r8
 800e718:	4638      	mov	r0, r7
 800e71a:	47c8      	blx	r9
 800e71c:	3001      	adds	r0, #1
 800e71e:	d103      	bne.n	800e728 <_printf_common+0xac>
 800e720:	f04f 30ff 	mov.w	r0, #4294967295
 800e724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e728:	3501      	adds	r5, #1
 800e72a:	e7c6      	b.n	800e6ba <_printf_common+0x3e>
 800e72c:	18e1      	adds	r1, r4, r3
 800e72e:	1c5a      	adds	r2, r3, #1
 800e730:	2030      	movs	r0, #48	@ 0x30
 800e732:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e736:	4422      	add	r2, r4
 800e738:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e73c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e740:	3302      	adds	r3, #2
 800e742:	e7c7      	b.n	800e6d4 <_printf_common+0x58>
 800e744:	2301      	movs	r3, #1
 800e746:	4622      	mov	r2, r4
 800e748:	4641      	mov	r1, r8
 800e74a:	4638      	mov	r0, r7
 800e74c:	47c8      	blx	r9
 800e74e:	3001      	adds	r0, #1
 800e750:	d0e6      	beq.n	800e720 <_printf_common+0xa4>
 800e752:	3601      	adds	r6, #1
 800e754:	e7d9      	b.n	800e70a <_printf_common+0x8e>
	...

0800e758 <_printf_i>:
 800e758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e75c:	7e0f      	ldrb	r7, [r1, #24]
 800e75e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e760:	2f78      	cmp	r7, #120	@ 0x78
 800e762:	4691      	mov	r9, r2
 800e764:	4680      	mov	r8, r0
 800e766:	460c      	mov	r4, r1
 800e768:	469a      	mov	sl, r3
 800e76a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e76e:	d807      	bhi.n	800e780 <_printf_i+0x28>
 800e770:	2f62      	cmp	r7, #98	@ 0x62
 800e772:	d80a      	bhi.n	800e78a <_printf_i+0x32>
 800e774:	2f00      	cmp	r7, #0
 800e776:	f000 80d2 	beq.w	800e91e <_printf_i+0x1c6>
 800e77a:	2f58      	cmp	r7, #88	@ 0x58
 800e77c:	f000 80b9 	beq.w	800e8f2 <_printf_i+0x19a>
 800e780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e784:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e788:	e03a      	b.n	800e800 <_printf_i+0xa8>
 800e78a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e78e:	2b15      	cmp	r3, #21
 800e790:	d8f6      	bhi.n	800e780 <_printf_i+0x28>
 800e792:	a101      	add	r1, pc, #4	@ (adr r1, 800e798 <_printf_i+0x40>)
 800e794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e798:	0800e7f1 	.word	0x0800e7f1
 800e79c:	0800e805 	.word	0x0800e805
 800e7a0:	0800e781 	.word	0x0800e781
 800e7a4:	0800e781 	.word	0x0800e781
 800e7a8:	0800e781 	.word	0x0800e781
 800e7ac:	0800e781 	.word	0x0800e781
 800e7b0:	0800e805 	.word	0x0800e805
 800e7b4:	0800e781 	.word	0x0800e781
 800e7b8:	0800e781 	.word	0x0800e781
 800e7bc:	0800e781 	.word	0x0800e781
 800e7c0:	0800e781 	.word	0x0800e781
 800e7c4:	0800e905 	.word	0x0800e905
 800e7c8:	0800e82f 	.word	0x0800e82f
 800e7cc:	0800e8bf 	.word	0x0800e8bf
 800e7d0:	0800e781 	.word	0x0800e781
 800e7d4:	0800e781 	.word	0x0800e781
 800e7d8:	0800e927 	.word	0x0800e927
 800e7dc:	0800e781 	.word	0x0800e781
 800e7e0:	0800e82f 	.word	0x0800e82f
 800e7e4:	0800e781 	.word	0x0800e781
 800e7e8:	0800e781 	.word	0x0800e781
 800e7ec:	0800e8c7 	.word	0x0800e8c7
 800e7f0:	6833      	ldr	r3, [r6, #0]
 800e7f2:	1d1a      	adds	r2, r3, #4
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	6032      	str	r2, [r6, #0]
 800e7f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e800:	2301      	movs	r3, #1
 800e802:	e09d      	b.n	800e940 <_printf_i+0x1e8>
 800e804:	6833      	ldr	r3, [r6, #0]
 800e806:	6820      	ldr	r0, [r4, #0]
 800e808:	1d19      	adds	r1, r3, #4
 800e80a:	6031      	str	r1, [r6, #0]
 800e80c:	0606      	lsls	r6, r0, #24
 800e80e:	d501      	bpl.n	800e814 <_printf_i+0xbc>
 800e810:	681d      	ldr	r5, [r3, #0]
 800e812:	e003      	b.n	800e81c <_printf_i+0xc4>
 800e814:	0645      	lsls	r5, r0, #25
 800e816:	d5fb      	bpl.n	800e810 <_printf_i+0xb8>
 800e818:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e81c:	2d00      	cmp	r5, #0
 800e81e:	da03      	bge.n	800e828 <_printf_i+0xd0>
 800e820:	232d      	movs	r3, #45	@ 0x2d
 800e822:	426d      	negs	r5, r5
 800e824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e828:	4859      	ldr	r0, [pc, #356]	@ (800e990 <_printf_i+0x238>)
 800e82a:	230a      	movs	r3, #10
 800e82c:	e011      	b.n	800e852 <_printf_i+0xfa>
 800e82e:	6821      	ldr	r1, [r4, #0]
 800e830:	6833      	ldr	r3, [r6, #0]
 800e832:	0608      	lsls	r0, r1, #24
 800e834:	f853 5b04 	ldr.w	r5, [r3], #4
 800e838:	d402      	bmi.n	800e840 <_printf_i+0xe8>
 800e83a:	0649      	lsls	r1, r1, #25
 800e83c:	bf48      	it	mi
 800e83e:	b2ad      	uxthmi	r5, r5
 800e840:	2f6f      	cmp	r7, #111	@ 0x6f
 800e842:	4853      	ldr	r0, [pc, #332]	@ (800e990 <_printf_i+0x238>)
 800e844:	6033      	str	r3, [r6, #0]
 800e846:	bf14      	ite	ne
 800e848:	230a      	movne	r3, #10
 800e84a:	2308      	moveq	r3, #8
 800e84c:	2100      	movs	r1, #0
 800e84e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e852:	6866      	ldr	r6, [r4, #4]
 800e854:	60a6      	str	r6, [r4, #8]
 800e856:	2e00      	cmp	r6, #0
 800e858:	bfa2      	ittt	ge
 800e85a:	6821      	ldrge	r1, [r4, #0]
 800e85c:	f021 0104 	bicge.w	r1, r1, #4
 800e860:	6021      	strge	r1, [r4, #0]
 800e862:	b90d      	cbnz	r5, 800e868 <_printf_i+0x110>
 800e864:	2e00      	cmp	r6, #0
 800e866:	d04b      	beq.n	800e900 <_printf_i+0x1a8>
 800e868:	4616      	mov	r6, r2
 800e86a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e86e:	fb03 5711 	mls	r7, r3, r1, r5
 800e872:	5dc7      	ldrb	r7, [r0, r7]
 800e874:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e878:	462f      	mov	r7, r5
 800e87a:	42bb      	cmp	r3, r7
 800e87c:	460d      	mov	r5, r1
 800e87e:	d9f4      	bls.n	800e86a <_printf_i+0x112>
 800e880:	2b08      	cmp	r3, #8
 800e882:	d10b      	bne.n	800e89c <_printf_i+0x144>
 800e884:	6823      	ldr	r3, [r4, #0]
 800e886:	07df      	lsls	r7, r3, #31
 800e888:	d508      	bpl.n	800e89c <_printf_i+0x144>
 800e88a:	6923      	ldr	r3, [r4, #16]
 800e88c:	6861      	ldr	r1, [r4, #4]
 800e88e:	4299      	cmp	r1, r3
 800e890:	bfde      	ittt	le
 800e892:	2330      	movle	r3, #48	@ 0x30
 800e894:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e898:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e89c:	1b92      	subs	r2, r2, r6
 800e89e:	6122      	str	r2, [r4, #16]
 800e8a0:	f8cd a000 	str.w	sl, [sp]
 800e8a4:	464b      	mov	r3, r9
 800e8a6:	aa03      	add	r2, sp, #12
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	4640      	mov	r0, r8
 800e8ac:	f7ff fee6 	bl	800e67c <_printf_common>
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	d14a      	bne.n	800e94a <_printf_i+0x1f2>
 800e8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b8:	b004      	add	sp, #16
 800e8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8be:	6823      	ldr	r3, [r4, #0]
 800e8c0:	f043 0320 	orr.w	r3, r3, #32
 800e8c4:	6023      	str	r3, [r4, #0]
 800e8c6:	4833      	ldr	r0, [pc, #204]	@ (800e994 <_printf_i+0x23c>)
 800e8c8:	2778      	movs	r7, #120	@ 0x78
 800e8ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e8ce:	6823      	ldr	r3, [r4, #0]
 800e8d0:	6831      	ldr	r1, [r6, #0]
 800e8d2:	061f      	lsls	r7, r3, #24
 800e8d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800e8d8:	d402      	bmi.n	800e8e0 <_printf_i+0x188>
 800e8da:	065f      	lsls	r7, r3, #25
 800e8dc:	bf48      	it	mi
 800e8de:	b2ad      	uxthmi	r5, r5
 800e8e0:	6031      	str	r1, [r6, #0]
 800e8e2:	07d9      	lsls	r1, r3, #31
 800e8e4:	bf44      	itt	mi
 800e8e6:	f043 0320 	orrmi.w	r3, r3, #32
 800e8ea:	6023      	strmi	r3, [r4, #0]
 800e8ec:	b11d      	cbz	r5, 800e8f6 <_printf_i+0x19e>
 800e8ee:	2310      	movs	r3, #16
 800e8f0:	e7ac      	b.n	800e84c <_printf_i+0xf4>
 800e8f2:	4827      	ldr	r0, [pc, #156]	@ (800e990 <_printf_i+0x238>)
 800e8f4:	e7e9      	b.n	800e8ca <_printf_i+0x172>
 800e8f6:	6823      	ldr	r3, [r4, #0]
 800e8f8:	f023 0320 	bic.w	r3, r3, #32
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	e7f6      	b.n	800e8ee <_printf_i+0x196>
 800e900:	4616      	mov	r6, r2
 800e902:	e7bd      	b.n	800e880 <_printf_i+0x128>
 800e904:	6833      	ldr	r3, [r6, #0]
 800e906:	6825      	ldr	r5, [r4, #0]
 800e908:	6961      	ldr	r1, [r4, #20]
 800e90a:	1d18      	adds	r0, r3, #4
 800e90c:	6030      	str	r0, [r6, #0]
 800e90e:	062e      	lsls	r6, r5, #24
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	d501      	bpl.n	800e918 <_printf_i+0x1c0>
 800e914:	6019      	str	r1, [r3, #0]
 800e916:	e002      	b.n	800e91e <_printf_i+0x1c6>
 800e918:	0668      	lsls	r0, r5, #25
 800e91a:	d5fb      	bpl.n	800e914 <_printf_i+0x1bc>
 800e91c:	8019      	strh	r1, [r3, #0]
 800e91e:	2300      	movs	r3, #0
 800e920:	6123      	str	r3, [r4, #16]
 800e922:	4616      	mov	r6, r2
 800e924:	e7bc      	b.n	800e8a0 <_printf_i+0x148>
 800e926:	6833      	ldr	r3, [r6, #0]
 800e928:	1d1a      	adds	r2, r3, #4
 800e92a:	6032      	str	r2, [r6, #0]
 800e92c:	681e      	ldr	r6, [r3, #0]
 800e92e:	6862      	ldr	r2, [r4, #4]
 800e930:	2100      	movs	r1, #0
 800e932:	4630      	mov	r0, r6
 800e934:	f7f1 fc4c 	bl	80001d0 <memchr>
 800e938:	b108      	cbz	r0, 800e93e <_printf_i+0x1e6>
 800e93a:	1b80      	subs	r0, r0, r6
 800e93c:	6060      	str	r0, [r4, #4]
 800e93e:	6863      	ldr	r3, [r4, #4]
 800e940:	6123      	str	r3, [r4, #16]
 800e942:	2300      	movs	r3, #0
 800e944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e948:	e7aa      	b.n	800e8a0 <_printf_i+0x148>
 800e94a:	6923      	ldr	r3, [r4, #16]
 800e94c:	4632      	mov	r2, r6
 800e94e:	4649      	mov	r1, r9
 800e950:	4640      	mov	r0, r8
 800e952:	47d0      	blx	sl
 800e954:	3001      	adds	r0, #1
 800e956:	d0ad      	beq.n	800e8b4 <_printf_i+0x15c>
 800e958:	6823      	ldr	r3, [r4, #0]
 800e95a:	079b      	lsls	r3, r3, #30
 800e95c:	d413      	bmi.n	800e986 <_printf_i+0x22e>
 800e95e:	68e0      	ldr	r0, [r4, #12]
 800e960:	9b03      	ldr	r3, [sp, #12]
 800e962:	4298      	cmp	r0, r3
 800e964:	bfb8      	it	lt
 800e966:	4618      	movlt	r0, r3
 800e968:	e7a6      	b.n	800e8b8 <_printf_i+0x160>
 800e96a:	2301      	movs	r3, #1
 800e96c:	4632      	mov	r2, r6
 800e96e:	4649      	mov	r1, r9
 800e970:	4640      	mov	r0, r8
 800e972:	47d0      	blx	sl
 800e974:	3001      	adds	r0, #1
 800e976:	d09d      	beq.n	800e8b4 <_printf_i+0x15c>
 800e978:	3501      	adds	r5, #1
 800e97a:	68e3      	ldr	r3, [r4, #12]
 800e97c:	9903      	ldr	r1, [sp, #12]
 800e97e:	1a5b      	subs	r3, r3, r1
 800e980:	42ab      	cmp	r3, r5
 800e982:	dcf2      	bgt.n	800e96a <_printf_i+0x212>
 800e984:	e7eb      	b.n	800e95e <_printf_i+0x206>
 800e986:	2500      	movs	r5, #0
 800e988:	f104 0619 	add.w	r6, r4, #25
 800e98c:	e7f5      	b.n	800e97a <_printf_i+0x222>
 800e98e:	bf00      	nop
 800e990:	0801359e 	.word	0x0801359e
 800e994:	080135af 	.word	0x080135af

0800e998 <_scanf_float>:
 800e998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99c:	b087      	sub	sp, #28
 800e99e:	4617      	mov	r7, r2
 800e9a0:	9303      	str	r3, [sp, #12]
 800e9a2:	688b      	ldr	r3, [r1, #8]
 800e9a4:	1e5a      	subs	r2, r3, #1
 800e9a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e9aa:	bf81      	itttt	hi
 800e9ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e9b0:	eb03 0b05 	addhi.w	fp, r3, r5
 800e9b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e9b8:	608b      	strhi	r3, [r1, #8]
 800e9ba:	680b      	ldr	r3, [r1, #0]
 800e9bc:	460a      	mov	r2, r1
 800e9be:	f04f 0500 	mov.w	r5, #0
 800e9c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e9c6:	f842 3b1c 	str.w	r3, [r2], #28
 800e9ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e9ce:	4680      	mov	r8, r0
 800e9d0:	460c      	mov	r4, r1
 800e9d2:	bf98      	it	ls
 800e9d4:	f04f 0b00 	movls.w	fp, #0
 800e9d8:	9201      	str	r2, [sp, #4]
 800e9da:	4616      	mov	r6, r2
 800e9dc:	46aa      	mov	sl, r5
 800e9de:	46a9      	mov	r9, r5
 800e9e0:	9502      	str	r5, [sp, #8]
 800e9e2:	68a2      	ldr	r2, [r4, #8]
 800e9e4:	b152      	cbz	r2, 800e9fc <_scanf_float+0x64>
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	2b4e      	cmp	r3, #78	@ 0x4e
 800e9ec:	d864      	bhi.n	800eab8 <_scanf_float+0x120>
 800e9ee:	2b40      	cmp	r3, #64	@ 0x40
 800e9f0:	d83c      	bhi.n	800ea6c <_scanf_float+0xd4>
 800e9f2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e9f6:	b2c8      	uxtb	r0, r1
 800e9f8:	280e      	cmp	r0, #14
 800e9fa:	d93a      	bls.n	800ea72 <_scanf_float+0xda>
 800e9fc:	f1b9 0f00 	cmp.w	r9, #0
 800ea00:	d003      	beq.n	800ea0a <_scanf_float+0x72>
 800ea02:	6823      	ldr	r3, [r4, #0]
 800ea04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea08:	6023      	str	r3, [r4, #0]
 800ea0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea0e:	f1ba 0f01 	cmp.w	sl, #1
 800ea12:	f200 8117 	bhi.w	800ec44 <_scanf_float+0x2ac>
 800ea16:	9b01      	ldr	r3, [sp, #4]
 800ea18:	429e      	cmp	r6, r3
 800ea1a:	f200 8108 	bhi.w	800ec2e <_scanf_float+0x296>
 800ea1e:	2001      	movs	r0, #1
 800ea20:	b007      	add	sp, #28
 800ea22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea26:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ea2a:	2a0d      	cmp	r2, #13
 800ea2c:	d8e6      	bhi.n	800e9fc <_scanf_float+0x64>
 800ea2e:	a101      	add	r1, pc, #4	@ (adr r1, 800ea34 <_scanf_float+0x9c>)
 800ea30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ea34:	0800eb7b 	.word	0x0800eb7b
 800ea38:	0800e9fd 	.word	0x0800e9fd
 800ea3c:	0800e9fd 	.word	0x0800e9fd
 800ea40:	0800e9fd 	.word	0x0800e9fd
 800ea44:	0800ebdb 	.word	0x0800ebdb
 800ea48:	0800ebb3 	.word	0x0800ebb3
 800ea4c:	0800e9fd 	.word	0x0800e9fd
 800ea50:	0800e9fd 	.word	0x0800e9fd
 800ea54:	0800eb89 	.word	0x0800eb89
 800ea58:	0800e9fd 	.word	0x0800e9fd
 800ea5c:	0800e9fd 	.word	0x0800e9fd
 800ea60:	0800e9fd 	.word	0x0800e9fd
 800ea64:	0800e9fd 	.word	0x0800e9fd
 800ea68:	0800eb41 	.word	0x0800eb41
 800ea6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ea70:	e7db      	b.n	800ea2a <_scanf_float+0x92>
 800ea72:	290e      	cmp	r1, #14
 800ea74:	d8c2      	bhi.n	800e9fc <_scanf_float+0x64>
 800ea76:	a001      	add	r0, pc, #4	@ (adr r0, 800ea7c <_scanf_float+0xe4>)
 800ea78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ea7c:	0800eb31 	.word	0x0800eb31
 800ea80:	0800e9fd 	.word	0x0800e9fd
 800ea84:	0800eb31 	.word	0x0800eb31
 800ea88:	0800ebc7 	.word	0x0800ebc7
 800ea8c:	0800e9fd 	.word	0x0800e9fd
 800ea90:	0800ead9 	.word	0x0800ead9
 800ea94:	0800eb17 	.word	0x0800eb17
 800ea98:	0800eb17 	.word	0x0800eb17
 800ea9c:	0800eb17 	.word	0x0800eb17
 800eaa0:	0800eb17 	.word	0x0800eb17
 800eaa4:	0800eb17 	.word	0x0800eb17
 800eaa8:	0800eb17 	.word	0x0800eb17
 800eaac:	0800eb17 	.word	0x0800eb17
 800eab0:	0800eb17 	.word	0x0800eb17
 800eab4:	0800eb17 	.word	0x0800eb17
 800eab8:	2b6e      	cmp	r3, #110	@ 0x6e
 800eaba:	d809      	bhi.n	800ead0 <_scanf_float+0x138>
 800eabc:	2b60      	cmp	r3, #96	@ 0x60
 800eabe:	d8b2      	bhi.n	800ea26 <_scanf_float+0x8e>
 800eac0:	2b54      	cmp	r3, #84	@ 0x54
 800eac2:	d07b      	beq.n	800ebbc <_scanf_float+0x224>
 800eac4:	2b59      	cmp	r3, #89	@ 0x59
 800eac6:	d199      	bne.n	800e9fc <_scanf_float+0x64>
 800eac8:	2d07      	cmp	r5, #7
 800eaca:	d197      	bne.n	800e9fc <_scanf_float+0x64>
 800eacc:	2508      	movs	r5, #8
 800eace:	e02c      	b.n	800eb2a <_scanf_float+0x192>
 800ead0:	2b74      	cmp	r3, #116	@ 0x74
 800ead2:	d073      	beq.n	800ebbc <_scanf_float+0x224>
 800ead4:	2b79      	cmp	r3, #121	@ 0x79
 800ead6:	e7f6      	b.n	800eac6 <_scanf_float+0x12e>
 800ead8:	6821      	ldr	r1, [r4, #0]
 800eada:	05c8      	lsls	r0, r1, #23
 800eadc:	d51b      	bpl.n	800eb16 <_scanf_float+0x17e>
 800eade:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800eae2:	6021      	str	r1, [r4, #0]
 800eae4:	f109 0901 	add.w	r9, r9, #1
 800eae8:	f1bb 0f00 	cmp.w	fp, #0
 800eaec:	d003      	beq.n	800eaf6 <_scanf_float+0x15e>
 800eaee:	3201      	adds	r2, #1
 800eaf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eaf4:	60a2      	str	r2, [r4, #8]
 800eaf6:	68a3      	ldr	r3, [r4, #8]
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	60a3      	str	r3, [r4, #8]
 800eafc:	6923      	ldr	r3, [r4, #16]
 800eafe:	3301      	adds	r3, #1
 800eb00:	6123      	str	r3, [r4, #16]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	3b01      	subs	r3, #1
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	607b      	str	r3, [r7, #4]
 800eb0a:	f340 8087 	ble.w	800ec1c <_scanf_float+0x284>
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	3301      	adds	r3, #1
 800eb12:	603b      	str	r3, [r7, #0]
 800eb14:	e765      	b.n	800e9e2 <_scanf_float+0x4a>
 800eb16:	eb1a 0105 	adds.w	r1, sl, r5
 800eb1a:	f47f af6f 	bne.w	800e9fc <_scanf_float+0x64>
 800eb1e:	6822      	ldr	r2, [r4, #0]
 800eb20:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800eb24:	6022      	str	r2, [r4, #0]
 800eb26:	460d      	mov	r5, r1
 800eb28:	468a      	mov	sl, r1
 800eb2a:	f806 3b01 	strb.w	r3, [r6], #1
 800eb2e:	e7e2      	b.n	800eaf6 <_scanf_float+0x15e>
 800eb30:	6822      	ldr	r2, [r4, #0]
 800eb32:	0610      	lsls	r0, r2, #24
 800eb34:	f57f af62 	bpl.w	800e9fc <_scanf_float+0x64>
 800eb38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800eb3c:	6022      	str	r2, [r4, #0]
 800eb3e:	e7f4      	b.n	800eb2a <_scanf_float+0x192>
 800eb40:	f1ba 0f00 	cmp.w	sl, #0
 800eb44:	d10e      	bne.n	800eb64 <_scanf_float+0x1cc>
 800eb46:	f1b9 0f00 	cmp.w	r9, #0
 800eb4a:	d10e      	bne.n	800eb6a <_scanf_float+0x1d2>
 800eb4c:	6822      	ldr	r2, [r4, #0]
 800eb4e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800eb52:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800eb56:	d108      	bne.n	800eb6a <_scanf_float+0x1d2>
 800eb58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eb5c:	6022      	str	r2, [r4, #0]
 800eb5e:	f04f 0a01 	mov.w	sl, #1
 800eb62:	e7e2      	b.n	800eb2a <_scanf_float+0x192>
 800eb64:	f1ba 0f02 	cmp.w	sl, #2
 800eb68:	d055      	beq.n	800ec16 <_scanf_float+0x27e>
 800eb6a:	2d01      	cmp	r5, #1
 800eb6c:	d002      	beq.n	800eb74 <_scanf_float+0x1dc>
 800eb6e:	2d04      	cmp	r5, #4
 800eb70:	f47f af44 	bne.w	800e9fc <_scanf_float+0x64>
 800eb74:	3501      	adds	r5, #1
 800eb76:	b2ed      	uxtb	r5, r5
 800eb78:	e7d7      	b.n	800eb2a <_scanf_float+0x192>
 800eb7a:	f1ba 0f01 	cmp.w	sl, #1
 800eb7e:	f47f af3d 	bne.w	800e9fc <_scanf_float+0x64>
 800eb82:	f04f 0a02 	mov.w	sl, #2
 800eb86:	e7d0      	b.n	800eb2a <_scanf_float+0x192>
 800eb88:	b97d      	cbnz	r5, 800ebaa <_scanf_float+0x212>
 800eb8a:	f1b9 0f00 	cmp.w	r9, #0
 800eb8e:	f47f af38 	bne.w	800ea02 <_scanf_float+0x6a>
 800eb92:	6822      	ldr	r2, [r4, #0]
 800eb94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800eb98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800eb9c:	f040 8108 	bne.w	800edb0 <_scanf_float+0x418>
 800eba0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eba4:	6022      	str	r2, [r4, #0]
 800eba6:	2501      	movs	r5, #1
 800eba8:	e7bf      	b.n	800eb2a <_scanf_float+0x192>
 800ebaa:	2d03      	cmp	r5, #3
 800ebac:	d0e2      	beq.n	800eb74 <_scanf_float+0x1dc>
 800ebae:	2d05      	cmp	r5, #5
 800ebb0:	e7de      	b.n	800eb70 <_scanf_float+0x1d8>
 800ebb2:	2d02      	cmp	r5, #2
 800ebb4:	f47f af22 	bne.w	800e9fc <_scanf_float+0x64>
 800ebb8:	2503      	movs	r5, #3
 800ebba:	e7b6      	b.n	800eb2a <_scanf_float+0x192>
 800ebbc:	2d06      	cmp	r5, #6
 800ebbe:	f47f af1d 	bne.w	800e9fc <_scanf_float+0x64>
 800ebc2:	2507      	movs	r5, #7
 800ebc4:	e7b1      	b.n	800eb2a <_scanf_float+0x192>
 800ebc6:	6822      	ldr	r2, [r4, #0]
 800ebc8:	0591      	lsls	r1, r2, #22
 800ebca:	f57f af17 	bpl.w	800e9fc <_scanf_float+0x64>
 800ebce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ebd2:	6022      	str	r2, [r4, #0]
 800ebd4:	f8cd 9008 	str.w	r9, [sp, #8]
 800ebd8:	e7a7      	b.n	800eb2a <_scanf_float+0x192>
 800ebda:	6822      	ldr	r2, [r4, #0]
 800ebdc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ebe0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ebe4:	d006      	beq.n	800ebf4 <_scanf_float+0x25c>
 800ebe6:	0550      	lsls	r0, r2, #21
 800ebe8:	f57f af08 	bpl.w	800e9fc <_scanf_float+0x64>
 800ebec:	f1b9 0f00 	cmp.w	r9, #0
 800ebf0:	f000 80de 	beq.w	800edb0 <_scanf_float+0x418>
 800ebf4:	0591      	lsls	r1, r2, #22
 800ebf6:	bf58      	it	pl
 800ebf8:	9902      	ldrpl	r1, [sp, #8]
 800ebfa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ebfe:	bf58      	it	pl
 800ec00:	eba9 0101 	subpl.w	r1, r9, r1
 800ec04:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ec08:	bf58      	it	pl
 800ec0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ec0e:	6022      	str	r2, [r4, #0]
 800ec10:	f04f 0900 	mov.w	r9, #0
 800ec14:	e789      	b.n	800eb2a <_scanf_float+0x192>
 800ec16:	f04f 0a03 	mov.w	sl, #3
 800ec1a:	e786      	b.n	800eb2a <_scanf_float+0x192>
 800ec1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ec20:	4639      	mov	r1, r7
 800ec22:	4640      	mov	r0, r8
 800ec24:	4798      	blx	r3
 800ec26:	2800      	cmp	r0, #0
 800ec28:	f43f aedb 	beq.w	800e9e2 <_scanf_float+0x4a>
 800ec2c:	e6e6      	b.n	800e9fc <_scanf_float+0x64>
 800ec2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec36:	463a      	mov	r2, r7
 800ec38:	4640      	mov	r0, r8
 800ec3a:	4798      	blx	r3
 800ec3c:	6923      	ldr	r3, [r4, #16]
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	6123      	str	r3, [r4, #16]
 800ec42:	e6e8      	b.n	800ea16 <_scanf_float+0x7e>
 800ec44:	1e6b      	subs	r3, r5, #1
 800ec46:	2b06      	cmp	r3, #6
 800ec48:	d824      	bhi.n	800ec94 <_scanf_float+0x2fc>
 800ec4a:	2d02      	cmp	r5, #2
 800ec4c:	d836      	bhi.n	800ecbc <_scanf_float+0x324>
 800ec4e:	9b01      	ldr	r3, [sp, #4]
 800ec50:	429e      	cmp	r6, r3
 800ec52:	f67f aee4 	bls.w	800ea1e <_scanf_float+0x86>
 800ec56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec5e:	463a      	mov	r2, r7
 800ec60:	4640      	mov	r0, r8
 800ec62:	4798      	blx	r3
 800ec64:	6923      	ldr	r3, [r4, #16]
 800ec66:	3b01      	subs	r3, #1
 800ec68:	6123      	str	r3, [r4, #16]
 800ec6a:	e7f0      	b.n	800ec4e <_scanf_float+0x2b6>
 800ec6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec70:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ec74:	463a      	mov	r2, r7
 800ec76:	4640      	mov	r0, r8
 800ec78:	4798      	blx	r3
 800ec7a:	6923      	ldr	r3, [r4, #16]
 800ec7c:	3b01      	subs	r3, #1
 800ec7e:	6123      	str	r3, [r4, #16]
 800ec80:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec84:	fa5f fa8a 	uxtb.w	sl, sl
 800ec88:	f1ba 0f02 	cmp.w	sl, #2
 800ec8c:	d1ee      	bne.n	800ec6c <_scanf_float+0x2d4>
 800ec8e:	3d03      	subs	r5, #3
 800ec90:	b2ed      	uxtb	r5, r5
 800ec92:	1b76      	subs	r6, r6, r5
 800ec94:	6823      	ldr	r3, [r4, #0]
 800ec96:	05da      	lsls	r2, r3, #23
 800ec98:	d530      	bpl.n	800ecfc <_scanf_float+0x364>
 800ec9a:	055b      	lsls	r3, r3, #21
 800ec9c:	d511      	bpl.n	800ecc2 <_scanf_float+0x32a>
 800ec9e:	9b01      	ldr	r3, [sp, #4]
 800eca0:	429e      	cmp	r6, r3
 800eca2:	f67f aebc 	bls.w	800ea1e <_scanf_float+0x86>
 800eca6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ecaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ecae:	463a      	mov	r2, r7
 800ecb0:	4640      	mov	r0, r8
 800ecb2:	4798      	blx	r3
 800ecb4:	6923      	ldr	r3, [r4, #16]
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	6123      	str	r3, [r4, #16]
 800ecba:	e7f0      	b.n	800ec9e <_scanf_float+0x306>
 800ecbc:	46aa      	mov	sl, r5
 800ecbe:	46b3      	mov	fp, r6
 800ecc0:	e7de      	b.n	800ec80 <_scanf_float+0x2e8>
 800ecc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ecc6:	6923      	ldr	r3, [r4, #16]
 800ecc8:	2965      	cmp	r1, #101	@ 0x65
 800ecca:	f103 33ff 	add.w	r3, r3, #4294967295
 800ecce:	f106 35ff 	add.w	r5, r6, #4294967295
 800ecd2:	6123      	str	r3, [r4, #16]
 800ecd4:	d00c      	beq.n	800ecf0 <_scanf_float+0x358>
 800ecd6:	2945      	cmp	r1, #69	@ 0x45
 800ecd8:	d00a      	beq.n	800ecf0 <_scanf_float+0x358>
 800ecda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ecde:	463a      	mov	r2, r7
 800ece0:	4640      	mov	r0, r8
 800ece2:	4798      	blx	r3
 800ece4:	6923      	ldr	r3, [r4, #16]
 800ece6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ecea:	3b01      	subs	r3, #1
 800ecec:	1eb5      	subs	r5, r6, #2
 800ecee:	6123      	str	r3, [r4, #16]
 800ecf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ecf4:	463a      	mov	r2, r7
 800ecf6:	4640      	mov	r0, r8
 800ecf8:	4798      	blx	r3
 800ecfa:	462e      	mov	r6, r5
 800ecfc:	6822      	ldr	r2, [r4, #0]
 800ecfe:	f012 0210 	ands.w	r2, r2, #16
 800ed02:	d001      	beq.n	800ed08 <_scanf_float+0x370>
 800ed04:	2000      	movs	r0, #0
 800ed06:	e68b      	b.n	800ea20 <_scanf_float+0x88>
 800ed08:	7032      	strb	r2, [r6, #0]
 800ed0a:	6823      	ldr	r3, [r4, #0]
 800ed0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ed10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed14:	d11c      	bne.n	800ed50 <_scanf_float+0x3b8>
 800ed16:	9b02      	ldr	r3, [sp, #8]
 800ed18:	454b      	cmp	r3, r9
 800ed1a:	eba3 0209 	sub.w	r2, r3, r9
 800ed1e:	d123      	bne.n	800ed68 <_scanf_float+0x3d0>
 800ed20:	9901      	ldr	r1, [sp, #4]
 800ed22:	2200      	movs	r2, #0
 800ed24:	4640      	mov	r0, r8
 800ed26:	f002 fdcf 	bl	80118c8 <_strtod_r>
 800ed2a:	9b03      	ldr	r3, [sp, #12]
 800ed2c:	6821      	ldr	r1, [r4, #0]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f011 0f02 	tst.w	r1, #2
 800ed34:	ec57 6b10 	vmov	r6, r7, d0
 800ed38:	f103 0204 	add.w	r2, r3, #4
 800ed3c:	d01f      	beq.n	800ed7e <_scanf_float+0x3e6>
 800ed3e:	9903      	ldr	r1, [sp, #12]
 800ed40:	600a      	str	r2, [r1, #0]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	e9c3 6700 	strd	r6, r7, [r3]
 800ed48:	68e3      	ldr	r3, [r4, #12]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	60e3      	str	r3, [r4, #12]
 800ed4e:	e7d9      	b.n	800ed04 <_scanf_float+0x36c>
 800ed50:	9b04      	ldr	r3, [sp, #16]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d0e4      	beq.n	800ed20 <_scanf_float+0x388>
 800ed56:	9905      	ldr	r1, [sp, #20]
 800ed58:	230a      	movs	r3, #10
 800ed5a:	3101      	adds	r1, #1
 800ed5c:	4640      	mov	r0, r8
 800ed5e:	f002 fe33 	bl	80119c8 <_strtol_r>
 800ed62:	9b04      	ldr	r3, [sp, #16]
 800ed64:	9e05      	ldr	r6, [sp, #20]
 800ed66:	1ac2      	subs	r2, r0, r3
 800ed68:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ed6c:	429e      	cmp	r6, r3
 800ed6e:	bf28      	it	cs
 800ed70:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ed74:	4910      	ldr	r1, [pc, #64]	@ (800edb8 <_scanf_float+0x420>)
 800ed76:	4630      	mov	r0, r6
 800ed78:	f000 f954 	bl	800f024 <siprintf>
 800ed7c:	e7d0      	b.n	800ed20 <_scanf_float+0x388>
 800ed7e:	f011 0f04 	tst.w	r1, #4
 800ed82:	9903      	ldr	r1, [sp, #12]
 800ed84:	600a      	str	r2, [r1, #0]
 800ed86:	d1dc      	bne.n	800ed42 <_scanf_float+0x3aa>
 800ed88:	681d      	ldr	r5, [r3, #0]
 800ed8a:	4632      	mov	r2, r6
 800ed8c:	463b      	mov	r3, r7
 800ed8e:	4630      	mov	r0, r6
 800ed90:	4639      	mov	r1, r7
 800ed92:	f7f1 fecb 	bl	8000b2c <__aeabi_dcmpun>
 800ed96:	b128      	cbz	r0, 800eda4 <_scanf_float+0x40c>
 800ed98:	4808      	ldr	r0, [pc, #32]	@ (800edbc <_scanf_float+0x424>)
 800ed9a:	f000 fb71 	bl	800f480 <nanf>
 800ed9e:	ed85 0a00 	vstr	s0, [r5]
 800eda2:	e7d1      	b.n	800ed48 <_scanf_float+0x3b0>
 800eda4:	4630      	mov	r0, r6
 800eda6:	4639      	mov	r1, r7
 800eda8:	f7f1 ff1e 	bl	8000be8 <__aeabi_d2f>
 800edac:	6028      	str	r0, [r5, #0]
 800edae:	e7cb      	b.n	800ed48 <_scanf_float+0x3b0>
 800edb0:	f04f 0900 	mov.w	r9, #0
 800edb4:	e629      	b.n	800ea0a <_scanf_float+0x72>
 800edb6:	bf00      	nop
 800edb8:	080135c0 	.word	0x080135c0
 800edbc:	08013671 	.word	0x08013671

0800edc0 <std>:
 800edc0:	2300      	movs	r3, #0
 800edc2:	b510      	push	{r4, lr}
 800edc4:	4604      	mov	r4, r0
 800edc6:	e9c0 3300 	strd	r3, r3, [r0]
 800edca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edce:	6083      	str	r3, [r0, #8]
 800edd0:	8181      	strh	r1, [r0, #12]
 800edd2:	6643      	str	r3, [r0, #100]	@ 0x64
 800edd4:	81c2      	strh	r2, [r0, #14]
 800edd6:	6183      	str	r3, [r0, #24]
 800edd8:	4619      	mov	r1, r3
 800edda:	2208      	movs	r2, #8
 800eddc:	305c      	adds	r0, #92	@ 0x5c
 800edde:	f000 fa29 	bl	800f234 <memset>
 800ede2:	4b0d      	ldr	r3, [pc, #52]	@ (800ee18 <std+0x58>)
 800ede4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ede6:	4b0d      	ldr	r3, [pc, #52]	@ (800ee1c <std+0x5c>)
 800ede8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800edea:	4b0d      	ldr	r3, [pc, #52]	@ (800ee20 <std+0x60>)
 800edec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800edee:	4b0d      	ldr	r3, [pc, #52]	@ (800ee24 <std+0x64>)
 800edf0:	6323      	str	r3, [r4, #48]	@ 0x30
 800edf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ee28 <std+0x68>)
 800edf4:	6224      	str	r4, [r4, #32]
 800edf6:	429c      	cmp	r4, r3
 800edf8:	d006      	beq.n	800ee08 <std+0x48>
 800edfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800edfe:	4294      	cmp	r4, r2
 800ee00:	d002      	beq.n	800ee08 <std+0x48>
 800ee02:	33d0      	adds	r3, #208	@ 0xd0
 800ee04:	429c      	cmp	r4, r3
 800ee06:	d105      	bne.n	800ee14 <std+0x54>
 800ee08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ee0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee10:	f000 bb24 	b.w	800f45c <__retarget_lock_init_recursive>
 800ee14:	bd10      	pop	{r4, pc}
 800ee16:	bf00      	nop
 800ee18:	0800f065 	.word	0x0800f065
 800ee1c:	0800f087 	.word	0x0800f087
 800ee20:	0800f0bf 	.word	0x0800f0bf
 800ee24:	0800f0e3 	.word	0x0800f0e3
 800ee28:	20003208 	.word	0x20003208

0800ee2c <stdio_exit_handler>:
 800ee2c:	4a02      	ldr	r2, [pc, #8]	@ (800ee38 <stdio_exit_handler+0xc>)
 800ee2e:	4903      	ldr	r1, [pc, #12]	@ (800ee3c <stdio_exit_handler+0x10>)
 800ee30:	4803      	ldr	r0, [pc, #12]	@ (800ee40 <stdio_exit_handler+0x14>)
 800ee32:	f000 b869 	b.w	800ef08 <_fwalk_sglue>
 800ee36:	bf00      	nop
 800ee38:	200000bc 	.word	0x200000bc
 800ee3c:	08012009 	.word	0x08012009
 800ee40:	200000cc 	.word	0x200000cc

0800ee44 <cleanup_stdio>:
 800ee44:	6841      	ldr	r1, [r0, #4]
 800ee46:	4b0c      	ldr	r3, [pc, #48]	@ (800ee78 <cleanup_stdio+0x34>)
 800ee48:	4299      	cmp	r1, r3
 800ee4a:	b510      	push	{r4, lr}
 800ee4c:	4604      	mov	r4, r0
 800ee4e:	d001      	beq.n	800ee54 <cleanup_stdio+0x10>
 800ee50:	f003 f8da 	bl	8012008 <_fflush_r>
 800ee54:	68a1      	ldr	r1, [r4, #8]
 800ee56:	4b09      	ldr	r3, [pc, #36]	@ (800ee7c <cleanup_stdio+0x38>)
 800ee58:	4299      	cmp	r1, r3
 800ee5a:	d002      	beq.n	800ee62 <cleanup_stdio+0x1e>
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f003 f8d3 	bl	8012008 <_fflush_r>
 800ee62:	68e1      	ldr	r1, [r4, #12]
 800ee64:	4b06      	ldr	r3, [pc, #24]	@ (800ee80 <cleanup_stdio+0x3c>)
 800ee66:	4299      	cmp	r1, r3
 800ee68:	d004      	beq.n	800ee74 <cleanup_stdio+0x30>
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee70:	f003 b8ca 	b.w	8012008 <_fflush_r>
 800ee74:	bd10      	pop	{r4, pc}
 800ee76:	bf00      	nop
 800ee78:	20003208 	.word	0x20003208
 800ee7c:	20003270 	.word	0x20003270
 800ee80:	200032d8 	.word	0x200032d8

0800ee84 <global_stdio_init.part.0>:
 800ee84:	b510      	push	{r4, lr}
 800ee86:	4b0b      	ldr	r3, [pc, #44]	@ (800eeb4 <global_stdio_init.part.0+0x30>)
 800ee88:	4c0b      	ldr	r4, [pc, #44]	@ (800eeb8 <global_stdio_init.part.0+0x34>)
 800ee8a:	4a0c      	ldr	r2, [pc, #48]	@ (800eebc <global_stdio_init.part.0+0x38>)
 800ee8c:	601a      	str	r2, [r3, #0]
 800ee8e:	4620      	mov	r0, r4
 800ee90:	2200      	movs	r2, #0
 800ee92:	2104      	movs	r1, #4
 800ee94:	f7ff ff94 	bl	800edc0 <std>
 800ee98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	2109      	movs	r1, #9
 800eea0:	f7ff ff8e 	bl	800edc0 <std>
 800eea4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eea8:	2202      	movs	r2, #2
 800eeaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeae:	2112      	movs	r1, #18
 800eeb0:	f7ff bf86 	b.w	800edc0 <std>
 800eeb4:	20003340 	.word	0x20003340
 800eeb8:	20003208 	.word	0x20003208
 800eebc:	0800ee2d 	.word	0x0800ee2d

0800eec0 <__sfp_lock_acquire>:
 800eec0:	4801      	ldr	r0, [pc, #4]	@ (800eec8 <__sfp_lock_acquire+0x8>)
 800eec2:	f000 bacc 	b.w	800f45e <__retarget_lock_acquire_recursive>
 800eec6:	bf00      	nop
 800eec8:	20003349 	.word	0x20003349

0800eecc <__sfp_lock_release>:
 800eecc:	4801      	ldr	r0, [pc, #4]	@ (800eed4 <__sfp_lock_release+0x8>)
 800eece:	f000 bac7 	b.w	800f460 <__retarget_lock_release_recursive>
 800eed2:	bf00      	nop
 800eed4:	20003349 	.word	0x20003349

0800eed8 <__sinit>:
 800eed8:	b510      	push	{r4, lr}
 800eeda:	4604      	mov	r4, r0
 800eedc:	f7ff fff0 	bl	800eec0 <__sfp_lock_acquire>
 800eee0:	6a23      	ldr	r3, [r4, #32]
 800eee2:	b11b      	cbz	r3, 800eeec <__sinit+0x14>
 800eee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eee8:	f7ff bff0 	b.w	800eecc <__sfp_lock_release>
 800eeec:	4b04      	ldr	r3, [pc, #16]	@ (800ef00 <__sinit+0x28>)
 800eeee:	6223      	str	r3, [r4, #32]
 800eef0:	4b04      	ldr	r3, [pc, #16]	@ (800ef04 <__sinit+0x2c>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d1f5      	bne.n	800eee4 <__sinit+0xc>
 800eef8:	f7ff ffc4 	bl	800ee84 <global_stdio_init.part.0>
 800eefc:	e7f2      	b.n	800eee4 <__sinit+0xc>
 800eefe:	bf00      	nop
 800ef00:	0800ee45 	.word	0x0800ee45
 800ef04:	20003340 	.word	0x20003340

0800ef08 <_fwalk_sglue>:
 800ef08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef0c:	4607      	mov	r7, r0
 800ef0e:	4688      	mov	r8, r1
 800ef10:	4614      	mov	r4, r2
 800ef12:	2600      	movs	r6, #0
 800ef14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef18:	f1b9 0901 	subs.w	r9, r9, #1
 800ef1c:	d505      	bpl.n	800ef2a <_fwalk_sglue+0x22>
 800ef1e:	6824      	ldr	r4, [r4, #0]
 800ef20:	2c00      	cmp	r4, #0
 800ef22:	d1f7      	bne.n	800ef14 <_fwalk_sglue+0xc>
 800ef24:	4630      	mov	r0, r6
 800ef26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef2a:	89ab      	ldrh	r3, [r5, #12]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d907      	bls.n	800ef40 <_fwalk_sglue+0x38>
 800ef30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef34:	3301      	adds	r3, #1
 800ef36:	d003      	beq.n	800ef40 <_fwalk_sglue+0x38>
 800ef38:	4629      	mov	r1, r5
 800ef3a:	4638      	mov	r0, r7
 800ef3c:	47c0      	blx	r8
 800ef3e:	4306      	orrs	r6, r0
 800ef40:	3568      	adds	r5, #104	@ 0x68
 800ef42:	e7e9      	b.n	800ef18 <_fwalk_sglue+0x10>

0800ef44 <iprintf>:
 800ef44:	b40f      	push	{r0, r1, r2, r3}
 800ef46:	b507      	push	{r0, r1, r2, lr}
 800ef48:	4906      	ldr	r1, [pc, #24]	@ (800ef64 <iprintf+0x20>)
 800ef4a:	ab04      	add	r3, sp, #16
 800ef4c:	6808      	ldr	r0, [r1, #0]
 800ef4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef52:	6881      	ldr	r1, [r0, #8]
 800ef54:	9301      	str	r3, [sp, #4]
 800ef56:	f002 febb 	bl	8011cd0 <_vfiprintf_r>
 800ef5a:	b003      	add	sp, #12
 800ef5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef60:	b004      	add	sp, #16
 800ef62:	4770      	bx	lr
 800ef64:	200000c8 	.word	0x200000c8

0800ef68 <_puts_r>:
 800ef68:	6a03      	ldr	r3, [r0, #32]
 800ef6a:	b570      	push	{r4, r5, r6, lr}
 800ef6c:	6884      	ldr	r4, [r0, #8]
 800ef6e:	4605      	mov	r5, r0
 800ef70:	460e      	mov	r6, r1
 800ef72:	b90b      	cbnz	r3, 800ef78 <_puts_r+0x10>
 800ef74:	f7ff ffb0 	bl	800eed8 <__sinit>
 800ef78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef7a:	07db      	lsls	r3, r3, #31
 800ef7c:	d405      	bmi.n	800ef8a <_puts_r+0x22>
 800ef7e:	89a3      	ldrh	r3, [r4, #12]
 800ef80:	0598      	lsls	r0, r3, #22
 800ef82:	d402      	bmi.n	800ef8a <_puts_r+0x22>
 800ef84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef86:	f000 fa6a 	bl	800f45e <__retarget_lock_acquire_recursive>
 800ef8a:	89a3      	ldrh	r3, [r4, #12]
 800ef8c:	0719      	lsls	r1, r3, #28
 800ef8e:	d502      	bpl.n	800ef96 <_puts_r+0x2e>
 800ef90:	6923      	ldr	r3, [r4, #16]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d135      	bne.n	800f002 <_puts_r+0x9a>
 800ef96:	4621      	mov	r1, r4
 800ef98:	4628      	mov	r0, r5
 800ef9a:	f000 f8e5 	bl	800f168 <__swsetup_r>
 800ef9e:	b380      	cbz	r0, 800f002 <_puts_r+0x9a>
 800efa0:	f04f 35ff 	mov.w	r5, #4294967295
 800efa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800efa6:	07da      	lsls	r2, r3, #31
 800efa8:	d405      	bmi.n	800efb6 <_puts_r+0x4e>
 800efaa:	89a3      	ldrh	r3, [r4, #12]
 800efac:	059b      	lsls	r3, r3, #22
 800efae:	d402      	bmi.n	800efb6 <_puts_r+0x4e>
 800efb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efb2:	f000 fa55 	bl	800f460 <__retarget_lock_release_recursive>
 800efb6:	4628      	mov	r0, r5
 800efb8:	bd70      	pop	{r4, r5, r6, pc}
 800efba:	2b00      	cmp	r3, #0
 800efbc:	da04      	bge.n	800efc8 <_puts_r+0x60>
 800efbe:	69a2      	ldr	r2, [r4, #24]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	dc17      	bgt.n	800eff4 <_puts_r+0x8c>
 800efc4:	290a      	cmp	r1, #10
 800efc6:	d015      	beq.n	800eff4 <_puts_r+0x8c>
 800efc8:	6823      	ldr	r3, [r4, #0]
 800efca:	1c5a      	adds	r2, r3, #1
 800efcc:	6022      	str	r2, [r4, #0]
 800efce:	7019      	strb	r1, [r3, #0]
 800efd0:	68a3      	ldr	r3, [r4, #8]
 800efd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800efd6:	3b01      	subs	r3, #1
 800efd8:	60a3      	str	r3, [r4, #8]
 800efda:	2900      	cmp	r1, #0
 800efdc:	d1ed      	bne.n	800efba <_puts_r+0x52>
 800efde:	2b00      	cmp	r3, #0
 800efe0:	da11      	bge.n	800f006 <_puts_r+0x9e>
 800efe2:	4622      	mov	r2, r4
 800efe4:	210a      	movs	r1, #10
 800efe6:	4628      	mov	r0, r5
 800efe8:	f000 f87f 	bl	800f0ea <__swbuf_r>
 800efec:	3001      	adds	r0, #1
 800efee:	d0d7      	beq.n	800efa0 <_puts_r+0x38>
 800eff0:	250a      	movs	r5, #10
 800eff2:	e7d7      	b.n	800efa4 <_puts_r+0x3c>
 800eff4:	4622      	mov	r2, r4
 800eff6:	4628      	mov	r0, r5
 800eff8:	f000 f877 	bl	800f0ea <__swbuf_r>
 800effc:	3001      	adds	r0, #1
 800effe:	d1e7      	bne.n	800efd0 <_puts_r+0x68>
 800f000:	e7ce      	b.n	800efa0 <_puts_r+0x38>
 800f002:	3e01      	subs	r6, #1
 800f004:	e7e4      	b.n	800efd0 <_puts_r+0x68>
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	1c5a      	adds	r2, r3, #1
 800f00a:	6022      	str	r2, [r4, #0]
 800f00c:	220a      	movs	r2, #10
 800f00e:	701a      	strb	r2, [r3, #0]
 800f010:	e7ee      	b.n	800eff0 <_puts_r+0x88>
	...

0800f014 <puts>:
 800f014:	4b02      	ldr	r3, [pc, #8]	@ (800f020 <puts+0xc>)
 800f016:	4601      	mov	r1, r0
 800f018:	6818      	ldr	r0, [r3, #0]
 800f01a:	f7ff bfa5 	b.w	800ef68 <_puts_r>
 800f01e:	bf00      	nop
 800f020:	200000c8 	.word	0x200000c8

0800f024 <siprintf>:
 800f024:	b40e      	push	{r1, r2, r3}
 800f026:	b500      	push	{lr}
 800f028:	b09c      	sub	sp, #112	@ 0x70
 800f02a:	ab1d      	add	r3, sp, #116	@ 0x74
 800f02c:	9002      	str	r0, [sp, #8]
 800f02e:	9006      	str	r0, [sp, #24]
 800f030:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f034:	4809      	ldr	r0, [pc, #36]	@ (800f05c <siprintf+0x38>)
 800f036:	9107      	str	r1, [sp, #28]
 800f038:	9104      	str	r1, [sp, #16]
 800f03a:	4909      	ldr	r1, [pc, #36]	@ (800f060 <siprintf+0x3c>)
 800f03c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f040:	9105      	str	r1, [sp, #20]
 800f042:	6800      	ldr	r0, [r0, #0]
 800f044:	9301      	str	r3, [sp, #4]
 800f046:	a902      	add	r1, sp, #8
 800f048:	f002 fd1c 	bl	8011a84 <_svfiprintf_r>
 800f04c:	9b02      	ldr	r3, [sp, #8]
 800f04e:	2200      	movs	r2, #0
 800f050:	701a      	strb	r2, [r3, #0]
 800f052:	b01c      	add	sp, #112	@ 0x70
 800f054:	f85d eb04 	ldr.w	lr, [sp], #4
 800f058:	b003      	add	sp, #12
 800f05a:	4770      	bx	lr
 800f05c:	200000c8 	.word	0x200000c8
 800f060:	ffff0208 	.word	0xffff0208

0800f064 <__sread>:
 800f064:	b510      	push	{r4, lr}
 800f066:	460c      	mov	r4, r1
 800f068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f06c:	f000 f9a8 	bl	800f3c0 <_read_r>
 800f070:	2800      	cmp	r0, #0
 800f072:	bfab      	itete	ge
 800f074:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f076:	89a3      	ldrhlt	r3, [r4, #12]
 800f078:	181b      	addge	r3, r3, r0
 800f07a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f07e:	bfac      	ite	ge
 800f080:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f082:	81a3      	strhlt	r3, [r4, #12]
 800f084:	bd10      	pop	{r4, pc}

0800f086 <__swrite>:
 800f086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f08a:	461f      	mov	r7, r3
 800f08c:	898b      	ldrh	r3, [r1, #12]
 800f08e:	05db      	lsls	r3, r3, #23
 800f090:	4605      	mov	r5, r0
 800f092:	460c      	mov	r4, r1
 800f094:	4616      	mov	r6, r2
 800f096:	d505      	bpl.n	800f0a4 <__swrite+0x1e>
 800f098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f09c:	2302      	movs	r3, #2
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f000 f97c 	bl	800f39c <_lseek_r>
 800f0a4:	89a3      	ldrh	r3, [r4, #12]
 800f0a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f0ae:	81a3      	strh	r3, [r4, #12]
 800f0b0:	4632      	mov	r2, r6
 800f0b2:	463b      	mov	r3, r7
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ba:	f000 b993 	b.w	800f3e4 <_write_r>

0800f0be <__sseek>:
 800f0be:	b510      	push	{r4, lr}
 800f0c0:	460c      	mov	r4, r1
 800f0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0c6:	f000 f969 	bl	800f39c <_lseek_r>
 800f0ca:	1c43      	adds	r3, r0, #1
 800f0cc:	89a3      	ldrh	r3, [r4, #12]
 800f0ce:	bf15      	itete	ne
 800f0d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f0d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f0d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f0da:	81a3      	strheq	r3, [r4, #12]
 800f0dc:	bf18      	it	ne
 800f0de:	81a3      	strhne	r3, [r4, #12]
 800f0e0:	bd10      	pop	{r4, pc}

0800f0e2 <__sclose>:
 800f0e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0e6:	f000 b949 	b.w	800f37c <_close_r>

0800f0ea <__swbuf_r>:
 800f0ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ec:	460e      	mov	r6, r1
 800f0ee:	4614      	mov	r4, r2
 800f0f0:	4605      	mov	r5, r0
 800f0f2:	b118      	cbz	r0, 800f0fc <__swbuf_r+0x12>
 800f0f4:	6a03      	ldr	r3, [r0, #32]
 800f0f6:	b90b      	cbnz	r3, 800f0fc <__swbuf_r+0x12>
 800f0f8:	f7ff feee 	bl	800eed8 <__sinit>
 800f0fc:	69a3      	ldr	r3, [r4, #24]
 800f0fe:	60a3      	str	r3, [r4, #8]
 800f100:	89a3      	ldrh	r3, [r4, #12]
 800f102:	071a      	lsls	r2, r3, #28
 800f104:	d501      	bpl.n	800f10a <__swbuf_r+0x20>
 800f106:	6923      	ldr	r3, [r4, #16]
 800f108:	b943      	cbnz	r3, 800f11c <__swbuf_r+0x32>
 800f10a:	4621      	mov	r1, r4
 800f10c:	4628      	mov	r0, r5
 800f10e:	f000 f82b 	bl	800f168 <__swsetup_r>
 800f112:	b118      	cbz	r0, 800f11c <__swbuf_r+0x32>
 800f114:	f04f 37ff 	mov.w	r7, #4294967295
 800f118:	4638      	mov	r0, r7
 800f11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f11c:	6823      	ldr	r3, [r4, #0]
 800f11e:	6922      	ldr	r2, [r4, #16]
 800f120:	1a98      	subs	r0, r3, r2
 800f122:	6963      	ldr	r3, [r4, #20]
 800f124:	b2f6      	uxtb	r6, r6
 800f126:	4283      	cmp	r3, r0
 800f128:	4637      	mov	r7, r6
 800f12a:	dc05      	bgt.n	800f138 <__swbuf_r+0x4e>
 800f12c:	4621      	mov	r1, r4
 800f12e:	4628      	mov	r0, r5
 800f130:	f002 ff6a 	bl	8012008 <_fflush_r>
 800f134:	2800      	cmp	r0, #0
 800f136:	d1ed      	bne.n	800f114 <__swbuf_r+0x2a>
 800f138:	68a3      	ldr	r3, [r4, #8]
 800f13a:	3b01      	subs	r3, #1
 800f13c:	60a3      	str	r3, [r4, #8]
 800f13e:	6823      	ldr	r3, [r4, #0]
 800f140:	1c5a      	adds	r2, r3, #1
 800f142:	6022      	str	r2, [r4, #0]
 800f144:	701e      	strb	r6, [r3, #0]
 800f146:	6962      	ldr	r2, [r4, #20]
 800f148:	1c43      	adds	r3, r0, #1
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d004      	beq.n	800f158 <__swbuf_r+0x6e>
 800f14e:	89a3      	ldrh	r3, [r4, #12]
 800f150:	07db      	lsls	r3, r3, #31
 800f152:	d5e1      	bpl.n	800f118 <__swbuf_r+0x2e>
 800f154:	2e0a      	cmp	r6, #10
 800f156:	d1df      	bne.n	800f118 <__swbuf_r+0x2e>
 800f158:	4621      	mov	r1, r4
 800f15a:	4628      	mov	r0, r5
 800f15c:	f002 ff54 	bl	8012008 <_fflush_r>
 800f160:	2800      	cmp	r0, #0
 800f162:	d0d9      	beq.n	800f118 <__swbuf_r+0x2e>
 800f164:	e7d6      	b.n	800f114 <__swbuf_r+0x2a>
	...

0800f168 <__swsetup_r>:
 800f168:	b538      	push	{r3, r4, r5, lr}
 800f16a:	4b29      	ldr	r3, [pc, #164]	@ (800f210 <__swsetup_r+0xa8>)
 800f16c:	4605      	mov	r5, r0
 800f16e:	6818      	ldr	r0, [r3, #0]
 800f170:	460c      	mov	r4, r1
 800f172:	b118      	cbz	r0, 800f17c <__swsetup_r+0x14>
 800f174:	6a03      	ldr	r3, [r0, #32]
 800f176:	b90b      	cbnz	r3, 800f17c <__swsetup_r+0x14>
 800f178:	f7ff feae 	bl	800eed8 <__sinit>
 800f17c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f180:	0719      	lsls	r1, r3, #28
 800f182:	d422      	bmi.n	800f1ca <__swsetup_r+0x62>
 800f184:	06da      	lsls	r2, r3, #27
 800f186:	d407      	bmi.n	800f198 <__swsetup_r+0x30>
 800f188:	2209      	movs	r2, #9
 800f18a:	602a      	str	r2, [r5, #0]
 800f18c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f190:	81a3      	strh	r3, [r4, #12]
 800f192:	f04f 30ff 	mov.w	r0, #4294967295
 800f196:	e033      	b.n	800f200 <__swsetup_r+0x98>
 800f198:	0758      	lsls	r0, r3, #29
 800f19a:	d512      	bpl.n	800f1c2 <__swsetup_r+0x5a>
 800f19c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f19e:	b141      	cbz	r1, 800f1b2 <__swsetup_r+0x4a>
 800f1a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1a4:	4299      	cmp	r1, r3
 800f1a6:	d002      	beq.n	800f1ae <__swsetup_r+0x46>
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	f000 ffd9 	bl	8010160 <_free_r>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1b2:	89a3      	ldrh	r3, [r4, #12]
 800f1b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f1b8:	81a3      	strh	r3, [r4, #12]
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	6063      	str	r3, [r4, #4]
 800f1be:	6923      	ldr	r3, [r4, #16]
 800f1c0:	6023      	str	r3, [r4, #0]
 800f1c2:	89a3      	ldrh	r3, [r4, #12]
 800f1c4:	f043 0308 	orr.w	r3, r3, #8
 800f1c8:	81a3      	strh	r3, [r4, #12]
 800f1ca:	6923      	ldr	r3, [r4, #16]
 800f1cc:	b94b      	cbnz	r3, 800f1e2 <__swsetup_r+0x7a>
 800f1ce:	89a3      	ldrh	r3, [r4, #12]
 800f1d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1d8:	d003      	beq.n	800f1e2 <__swsetup_r+0x7a>
 800f1da:	4621      	mov	r1, r4
 800f1dc:	4628      	mov	r0, r5
 800f1de:	f002 ff73 	bl	80120c8 <__smakebuf_r>
 800f1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1e6:	f013 0201 	ands.w	r2, r3, #1
 800f1ea:	d00a      	beq.n	800f202 <__swsetup_r+0x9a>
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	60a2      	str	r2, [r4, #8]
 800f1f0:	6962      	ldr	r2, [r4, #20]
 800f1f2:	4252      	negs	r2, r2
 800f1f4:	61a2      	str	r2, [r4, #24]
 800f1f6:	6922      	ldr	r2, [r4, #16]
 800f1f8:	b942      	cbnz	r2, 800f20c <__swsetup_r+0xa4>
 800f1fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f1fe:	d1c5      	bne.n	800f18c <__swsetup_r+0x24>
 800f200:	bd38      	pop	{r3, r4, r5, pc}
 800f202:	0799      	lsls	r1, r3, #30
 800f204:	bf58      	it	pl
 800f206:	6962      	ldrpl	r2, [r4, #20]
 800f208:	60a2      	str	r2, [r4, #8]
 800f20a:	e7f4      	b.n	800f1f6 <__swsetup_r+0x8e>
 800f20c:	2000      	movs	r0, #0
 800f20e:	e7f7      	b.n	800f200 <__swsetup_r+0x98>
 800f210:	200000c8 	.word	0x200000c8

0800f214 <memcmp>:
 800f214:	b510      	push	{r4, lr}
 800f216:	3901      	subs	r1, #1
 800f218:	4402      	add	r2, r0
 800f21a:	4290      	cmp	r0, r2
 800f21c:	d101      	bne.n	800f222 <memcmp+0xe>
 800f21e:	2000      	movs	r0, #0
 800f220:	e005      	b.n	800f22e <memcmp+0x1a>
 800f222:	7803      	ldrb	r3, [r0, #0]
 800f224:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f228:	42a3      	cmp	r3, r4
 800f22a:	d001      	beq.n	800f230 <memcmp+0x1c>
 800f22c:	1b18      	subs	r0, r3, r4
 800f22e:	bd10      	pop	{r4, pc}
 800f230:	3001      	adds	r0, #1
 800f232:	e7f2      	b.n	800f21a <memcmp+0x6>

0800f234 <memset>:
 800f234:	4402      	add	r2, r0
 800f236:	4603      	mov	r3, r0
 800f238:	4293      	cmp	r3, r2
 800f23a:	d100      	bne.n	800f23e <memset+0xa>
 800f23c:	4770      	bx	lr
 800f23e:	f803 1b01 	strb.w	r1, [r3], #1
 800f242:	e7f9      	b.n	800f238 <memset+0x4>

0800f244 <strncmp>:
 800f244:	b510      	push	{r4, lr}
 800f246:	b16a      	cbz	r2, 800f264 <strncmp+0x20>
 800f248:	3901      	subs	r1, #1
 800f24a:	1884      	adds	r4, r0, r2
 800f24c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f250:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f254:	429a      	cmp	r2, r3
 800f256:	d103      	bne.n	800f260 <strncmp+0x1c>
 800f258:	42a0      	cmp	r0, r4
 800f25a:	d001      	beq.n	800f260 <strncmp+0x1c>
 800f25c:	2a00      	cmp	r2, #0
 800f25e:	d1f5      	bne.n	800f24c <strncmp+0x8>
 800f260:	1ad0      	subs	r0, r2, r3
 800f262:	bd10      	pop	{r4, pc}
 800f264:	4610      	mov	r0, r2
 800f266:	e7fc      	b.n	800f262 <strncmp+0x1e>

0800f268 <strncpy>:
 800f268:	b510      	push	{r4, lr}
 800f26a:	3901      	subs	r1, #1
 800f26c:	4603      	mov	r3, r0
 800f26e:	b132      	cbz	r2, 800f27e <strncpy+0x16>
 800f270:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f274:	f803 4b01 	strb.w	r4, [r3], #1
 800f278:	3a01      	subs	r2, #1
 800f27a:	2c00      	cmp	r4, #0
 800f27c:	d1f7      	bne.n	800f26e <strncpy+0x6>
 800f27e:	441a      	add	r2, r3
 800f280:	2100      	movs	r1, #0
 800f282:	4293      	cmp	r3, r2
 800f284:	d100      	bne.n	800f288 <strncpy+0x20>
 800f286:	bd10      	pop	{r4, pc}
 800f288:	f803 1b01 	strb.w	r1, [r3], #1
 800f28c:	e7f9      	b.n	800f282 <strncpy+0x1a>
	...

0800f290 <strtok>:
 800f290:	4b16      	ldr	r3, [pc, #88]	@ (800f2ec <strtok+0x5c>)
 800f292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f296:	681f      	ldr	r7, [r3, #0]
 800f298:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f29a:	4605      	mov	r5, r0
 800f29c:	460e      	mov	r6, r1
 800f29e:	b9ec      	cbnz	r4, 800f2dc <strtok+0x4c>
 800f2a0:	2050      	movs	r0, #80	@ 0x50
 800f2a2:	f000 ffa7 	bl	80101f4 <malloc>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	6478      	str	r0, [r7, #68]	@ 0x44
 800f2aa:	b920      	cbnz	r0, 800f2b6 <strtok+0x26>
 800f2ac:	4b10      	ldr	r3, [pc, #64]	@ (800f2f0 <strtok+0x60>)
 800f2ae:	4811      	ldr	r0, [pc, #68]	@ (800f2f4 <strtok+0x64>)
 800f2b0:	215b      	movs	r1, #91	@ 0x5b
 800f2b2:	f000 f8eb 	bl	800f48c <__assert_func>
 800f2b6:	e9c0 4400 	strd	r4, r4, [r0]
 800f2ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f2be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f2c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f2c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f2ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f2ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f2d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f2d6:	6184      	str	r4, [r0, #24]
 800f2d8:	7704      	strb	r4, [r0, #28]
 800f2da:	6244      	str	r4, [r0, #36]	@ 0x24
 800f2dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2de:	4631      	mov	r1, r6
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e8:	f000 b806 	b.w	800f2f8 <__strtok_r>
 800f2ec:	200000c8 	.word	0x200000c8
 800f2f0:	080135c5 	.word	0x080135c5
 800f2f4:	080135dc 	.word	0x080135dc

0800f2f8 <__strtok_r>:
 800f2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	b908      	cbnz	r0, 800f302 <__strtok_r+0xa>
 800f2fe:	6814      	ldr	r4, [r2, #0]
 800f300:	b144      	cbz	r4, 800f314 <__strtok_r+0x1c>
 800f302:	4620      	mov	r0, r4
 800f304:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f308:	460f      	mov	r7, r1
 800f30a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f30e:	b91e      	cbnz	r6, 800f318 <__strtok_r+0x20>
 800f310:	b965      	cbnz	r5, 800f32c <__strtok_r+0x34>
 800f312:	6015      	str	r5, [r2, #0]
 800f314:	2000      	movs	r0, #0
 800f316:	e005      	b.n	800f324 <__strtok_r+0x2c>
 800f318:	42b5      	cmp	r5, r6
 800f31a:	d1f6      	bne.n	800f30a <__strtok_r+0x12>
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d1f0      	bne.n	800f302 <__strtok_r+0xa>
 800f320:	6014      	str	r4, [r2, #0]
 800f322:	7003      	strb	r3, [r0, #0]
 800f324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f326:	461c      	mov	r4, r3
 800f328:	e00c      	b.n	800f344 <__strtok_r+0x4c>
 800f32a:	b915      	cbnz	r5, 800f332 <__strtok_r+0x3a>
 800f32c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f330:	460e      	mov	r6, r1
 800f332:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f336:	42ab      	cmp	r3, r5
 800f338:	d1f7      	bne.n	800f32a <__strtok_r+0x32>
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d0f3      	beq.n	800f326 <__strtok_r+0x2e>
 800f33e:	2300      	movs	r3, #0
 800f340:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f344:	6014      	str	r4, [r2, #0]
 800f346:	e7ed      	b.n	800f324 <__strtok_r+0x2c>

0800f348 <strstr>:
 800f348:	780a      	ldrb	r2, [r1, #0]
 800f34a:	b570      	push	{r4, r5, r6, lr}
 800f34c:	b96a      	cbnz	r2, 800f36a <strstr+0x22>
 800f34e:	bd70      	pop	{r4, r5, r6, pc}
 800f350:	429a      	cmp	r2, r3
 800f352:	d109      	bne.n	800f368 <strstr+0x20>
 800f354:	460c      	mov	r4, r1
 800f356:	4605      	mov	r5, r0
 800f358:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d0f6      	beq.n	800f34e <strstr+0x6>
 800f360:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f364:	429e      	cmp	r6, r3
 800f366:	d0f7      	beq.n	800f358 <strstr+0x10>
 800f368:	3001      	adds	r0, #1
 800f36a:	7803      	ldrb	r3, [r0, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1ef      	bne.n	800f350 <strstr+0x8>
 800f370:	4618      	mov	r0, r3
 800f372:	e7ec      	b.n	800f34e <strstr+0x6>

0800f374 <_localeconv_r>:
 800f374:	4800      	ldr	r0, [pc, #0]	@ (800f378 <_localeconv_r+0x4>)
 800f376:	4770      	bx	lr
 800f378:	20000208 	.word	0x20000208

0800f37c <_close_r>:
 800f37c:	b538      	push	{r3, r4, r5, lr}
 800f37e:	4d06      	ldr	r5, [pc, #24]	@ (800f398 <_close_r+0x1c>)
 800f380:	2300      	movs	r3, #0
 800f382:	4604      	mov	r4, r0
 800f384:	4608      	mov	r0, r1
 800f386:	602b      	str	r3, [r5, #0]
 800f388:	f7f3 fa05 	bl	8002796 <_close>
 800f38c:	1c43      	adds	r3, r0, #1
 800f38e:	d102      	bne.n	800f396 <_close_r+0x1a>
 800f390:	682b      	ldr	r3, [r5, #0]
 800f392:	b103      	cbz	r3, 800f396 <_close_r+0x1a>
 800f394:	6023      	str	r3, [r4, #0]
 800f396:	bd38      	pop	{r3, r4, r5, pc}
 800f398:	20003344 	.word	0x20003344

0800f39c <_lseek_r>:
 800f39c:	b538      	push	{r3, r4, r5, lr}
 800f39e:	4d07      	ldr	r5, [pc, #28]	@ (800f3bc <_lseek_r+0x20>)
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	4608      	mov	r0, r1
 800f3a4:	4611      	mov	r1, r2
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	602a      	str	r2, [r5, #0]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	f7f3 fa1a 	bl	80027e4 <_lseek>
 800f3b0:	1c43      	adds	r3, r0, #1
 800f3b2:	d102      	bne.n	800f3ba <_lseek_r+0x1e>
 800f3b4:	682b      	ldr	r3, [r5, #0]
 800f3b6:	b103      	cbz	r3, 800f3ba <_lseek_r+0x1e>
 800f3b8:	6023      	str	r3, [r4, #0]
 800f3ba:	bd38      	pop	{r3, r4, r5, pc}
 800f3bc:	20003344 	.word	0x20003344

0800f3c0 <_read_r>:
 800f3c0:	b538      	push	{r3, r4, r5, lr}
 800f3c2:	4d07      	ldr	r5, [pc, #28]	@ (800f3e0 <_read_r+0x20>)
 800f3c4:	4604      	mov	r4, r0
 800f3c6:	4608      	mov	r0, r1
 800f3c8:	4611      	mov	r1, r2
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	602a      	str	r2, [r5, #0]
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	f7f3 f9a8 	bl	8002724 <_read>
 800f3d4:	1c43      	adds	r3, r0, #1
 800f3d6:	d102      	bne.n	800f3de <_read_r+0x1e>
 800f3d8:	682b      	ldr	r3, [r5, #0]
 800f3da:	b103      	cbz	r3, 800f3de <_read_r+0x1e>
 800f3dc:	6023      	str	r3, [r4, #0]
 800f3de:	bd38      	pop	{r3, r4, r5, pc}
 800f3e0:	20003344 	.word	0x20003344

0800f3e4 <_write_r>:
 800f3e4:	b538      	push	{r3, r4, r5, lr}
 800f3e6:	4d07      	ldr	r5, [pc, #28]	@ (800f404 <_write_r+0x20>)
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	4608      	mov	r0, r1
 800f3ec:	4611      	mov	r1, r2
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	602a      	str	r2, [r5, #0]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	f7f3 f9b3 	bl	800275e <_write>
 800f3f8:	1c43      	adds	r3, r0, #1
 800f3fa:	d102      	bne.n	800f402 <_write_r+0x1e>
 800f3fc:	682b      	ldr	r3, [r5, #0]
 800f3fe:	b103      	cbz	r3, 800f402 <_write_r+0x1e>
 800f400:	6023      	str	r3, [r4, #0]
 800f402:	bd38      	pop	{r3, r4, r5, pc}
 800f404:	20003344 	.word	0x20003344

0800f408 <__errno>:
 800f408:	4b01      	ldr	r3, [pc, #4]	@ (800f410 <__errno+0x8>)
 800f40a:	6818      	ldr	r0, [r3, #0]
 800f40c:	4770      	bx	lr
 800f40e:	bf00      	nop
 800f410:	200000c8 	.word	0x200000c8

0800f414 <__libc_init_array>:
 800f414:	b570      	push	{r4, r5, r6, lr}
 800f416:	4d0d      	ldr	r5, [pc, #52]	@ (800f44c <__libc_init_array+0x38>)
 800f418:	4c0d      	ldr	r4, [pc, #52]	@ (800f450 <__libc_init_array+0x3c>)
 800f41a:	1b64      	subs	r4, r4, r5
 800f41c:	10a4      	asrs	r4, r4, #2
 800f41e:	2600      	movs	r6, #0
 800f420:	42a6      	cmp	r6, r4
 800f422:	d109      	bne.n	800f438 <__libc_init_array+0x24>
 800f424:	4d0b      	ldr	r5, [pc, #44]	@ (800f454 <__libc_init_array+0x40>)
 800f426:	4c0c      	ldr	r4, [pc, #48]	@ (800f458 <__libc_init_array+0x44>)
 800f428:	f003 fc48 	bl	8012cbc <_init>
 800f42c:	1b64      	subs	r4, r4, r5
 800f42e:	10a4      	asrs	r4, r4, #2
 800f430:	2600      	movs	r6, #0
 800f432:	42a6      	cmp	r6, r4
 800f434:	d105      	bne.n	800f442 <__libc_init_array+0x2e>
 800f436:	bd70      	pop	{r4, r5, r6, pc}
 800f438:	f855 3b04 	ldr.w	r3, [r5], #4
 800f43c:	4798      	blx	r3
 800f43e:	3601      	adds	r6, #1
 800f440:	e7ee      	b.n	800f420 <__libc_init_array+0xc>
 800f442:	f855 3b04 	ldr.w	r3, [r5], #4
 800f446:	4798      	blx	r3
 800f448:	3601      	adds	r6, #1
 800f44a:	e7f2      	b.n	800f432 <__libc_init_array+0x1e>
 800f44c:	08013a54 	.word	0x08013a54
 800f450:	08013a54 	.word	0x08013a54
 800f454:	08013a54 	.word	0x08013a54
 800f458:	08013a58 	.word	0x08013a58

0800f45c <__retarget_lock_init_recursive>:
 800f45c:	4770      	bx	lr

0800f45e <__retarget_lock_acquire_recursive>:
 800f45e:	4770      	bx	lr

0800f460 <__retarget_lock_release_recursive>:
 800f460:	4770      	bx	lr

0800f462 <memcpy>:
 800f462:	440a      	add	r2, r1
 800f464:	4291      	cmp	r1, r2
 800f466:	f100 33ff 	add.w	r3, r0, #4294967295
 800f46a:	d100      	bne.n	800f46e <memcpy+0xc>
 800f46c:	4770      	bx	lr
 800f46e:	b510      	push	{r4, lr}
 800f470:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f474:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f478:	4291      	cmp	r1, r2
 800f47a:	d1f9      	bne.n	800f470 <memcpy+0xe>
 800f47c:	bd10      	pop	{r4, pc}
	...

0800f480 <nanf>:
 800f480:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f488 <nanf+0x8>
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	7fc00000 	.word	0x7fc00000

0800f48c <__assert_func>:
 800f48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f48e:	4614      	mov	r4, r2
 800f490:	461a      	mov	r2, r3
 800f492:	4b09      	ldr	r3, [pc, #36]	@ (800f4b8 <__assert_func+0x2c>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	4605      	mov	r5, r0
 800f498:	68d8      	ldr	r0, [r3, #12]
 800f49a:	b954      	cbnz	r4, 800f4b2 <__assert_func+0x26>
 800f49c:	4b07      	ldr	r3, [pc, #28]	@ (800f4bc <__assert_func+0x30>)
 800f49e:	461c      	mov	r4, r3
 800f4a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f4a4:	9100      	str	r1, [sp, #0]
 800f4a6:	462b      	mov	r3, r5
 800f4a8:	4905      	ldr	r1, [pc, #20]	@ (800f4c0 <__assert_func+0x34>)
 800f4aa:	f002 fdd5 	bl	8012058 <fiprintf>
 800f4ae:	f002 fe9b 	bl	80121e8 <abort>
 800f4b2:	4b04      	ldr	r3, [pc, #16]	@ (800f4c4 <__assert_func+0x38>)
 800f4b4:	e7f4      	b.n	800f4a0 <__assert_func+0x14>
 800f4b6:	bf00      	nop
 800f4b8:	200000c8 	.word	0x200000c8
 800f4bc:	08013671 	.word	0x08013671
 800f4c0:	08013643 	.word	0x08013643
 800f4c4:	08013636 	.word	0x08013636

0800f4c8 <quorem>:
 800f4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4cc:	6903      	ldr	r3, [r0, #16]
 800f4ce:	690c      	ldr	r4, [r1, #16]
 800f4d0:	42a3      	cmp	r3, r4
 800f4d2:	4607      	mov	r7, r0
 800f4d4:	db7e      	blt.n	800f5d4 <quorem+0x10c>
 800f4d6:	3c01      	subs	r4, #1
 800f4d8:	f101 0814 	add.w	r8, r1, #20
 800f4dc:	00a3      	lsls	r3, r4, #2
 800f4de:	f100 0514 	add.w	r5, r0, #20
 800f4e2:	9300      	str	r3, [sp, #0]
 800f4e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4e8:	9301      	str	r3, [sp, #4]
 800f4ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f4ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f4fa:	fbb2 f6f3 	udiv	r6, r2, r3
 800f4fe:	d32e      	bcc.n	800f55e <quorem+0x96>
 800f500:	f04f 0a00 	mov.w	sl, #0
 800f504:	46c4      	mov	ip, r8
 800f506:	46ae      	mov	lr, r5
 800f508:	46d3      	mov	fp, sl
 800f50a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f50e:	b298      	uxth	r0, r3
 800f510:	fb06 a000 	mla	r0, r6, r0, sl
 800f514:	0c02      	lsrs	r2, r0, #16
 800f516:	0c1b      	lsrs	r3, r3, #16
 800f518:	fb06 2303 	mla	r3, r6, r3, r2
 800f51c:	f8de 2000 	ldr.w	r2, [lr]
 800f520:	b280      	uxth	r0, r0
 800f522:	b292      	uxth	r2, r2
 800f524:	1a12      	subs	r2, r2, r0
 800f526:	445a      	add	r2, fp
 800f528:	f8de 0000 	ldr.w	r0, [lr]
 800f52c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f530:	b29b      	uxth	r3, r3
 800f532:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f536:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f53a:	b292      	uxth	r2, r2
 800f53c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f540:	45e1      	cmp	r9, ip
 800f542:	f84e 2b04 	str.w	r2, [lr], #4
 800f546:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f54a:	d2de      	bcs.n	800f50a <quorem+0x42>
 800f54c:	9b00      	ldr	r3, [sp, #0]
 800f54e:	58eb      	ldr	r3, [r5, r3]
 800f550:	b92b      	cbnz	r3, 800f55e <quorem+0x96>
 800f552:	9b01      	ldr	r3, [sp, #4]
 800f554:	3b04      	subs	r3, #4
 800f556:	429d      	cmp	r5, r3
 800f558:	461a      	mov	r2, r3
 800f55a:	d32f      	bcc.n	800f5bc <quorem+0xf4>
 800f55c:	613c      	str	r4, [r7, #16]
 800f55e:	4638      	mov	r0, r7
 800f560:	f001 f9c2 	bl	80108e8 <__mcmp>
 800f564:	2800      	cmp	r0, #0
 800f566:	db25      	blt.n	800f5b4 <quorem+0xec>
 800f568:	4629      	mov	r1, r5
 800f56a:	2000      	movs	r0, #0
 800f56c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f570:	f8d1 c000 	ldr.w	ip, [r1]
 800f574:	fa1f fe82 	uxth.w	lr, r2
 800f578:	fa1f f38c 	uxth.w	r3, ip
 800f57c:	eba3 030e 	sub.w	r3, r3, lr
 800f580:	4403      	add	r3, r0
 800f582:	0c12      	lsrs	r2, r2, #16
 800f584:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f588:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f592:	45c1      	cmp	r9, r8
 800f594:	f841 3b04 	str.w	r3, [r1], #4
 800f598:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f59c:	d2e6      	bcs.n	800f56c <quorem+0xa4>
 800f59e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f5a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5a6:	b922      	cbnz	r2, 800f5b2 <quorem+0xea>
 800f5a8:	3b04      	subs	r3, #4
 800f5aa:	429d      	cmp	r5, r3
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	d30b      	bcc.n	800f5c8 <quorem+0x100>
 800f5b0:	613c      	str	r4, [r7, #16]
 800f5b2:	3601      	adds	r6, #1
 800f5b4:	4630      	mov	r0, r6
 800f5b6:	b003      	add	sp, #12
 800f5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5bc:	6812      	ldr	r2, [r2, #0]
 800f5be:	3b04      	subs	r3, #4
 800f5c0:	2a00      	cmp	r2, #0
 800f5c2:	d1cb      	bne.n	800f55c <quorem+0x94>
 800f5c4:	3c01      	subs	r4, #1
 800f5c6:	e7c6      	b.n	800f556 <quorem+0x8e>
 800f5c8:	6812      	ldr	r2, [r2, #0]
 800f5ca:	3b04      	subs	r3, #4
 800f5cc:	2a00      	cmp	r2, #0
 800f5ce:	d1ef      	bne.n	800f5b0 <quorem+0xe8>
 800f5d0:	3c01      	subs	r4, #1
 800f5d2:	e7ea      	b.n	800f5aa <quorem+0xe2>
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	e7ee      	b.n	800f5b6 <quorem+0xee>

0800f5d8 <_dtoa_r>:
 800f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5dc:	69c7      	ldr	r7, [r0, #28]
 800f5de:	b099      	sub	sp, #100	@ 0x64
 800f5e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f5e4:	ec55 4b10 	vmov	r4, r5, d0
 800f5e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f5ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800f5ec:	4683      	mov	fp, r0
 800f5ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800f5f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f5f2:	b97f      	cbnz	r7, 800f614 <_dtoa_r+0x3c>
 800f5f4:	2010      	movs	r0, #16
 800f5f6:	f000 fdfd 	bl	80101f4 <malloc>
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	f8cb 001c 	str.w	r0, [fp, #28]
 800f600:	b920      	cbnz	r0, 800f60c <_dtoa_r+0x34>
 800f602:	4ba7      	ldr	r3, [pc, #668]	@ (800f8a0 <_dtoa_r+0x2c8>)
 800f604:	21ef      	movs	r1, #239	@ 0xef
 800f606:	48a7      	ldr	r0, [pc, #668]	@ (800f8a4 <_dtoa_r+0x2cc>)
 800f608:	f7ff ff40 	bl	800f48c <__assert_func>
 800f60c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f610:	6007      	str	r7, [r0, #0]
 800f612:	60c7      	str	r7, [r0, #12]
 800f614:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f618:	6819      	ldr	r1, [r3, #0]
 800f61a:	b159      	cbz	r1, 800f634 <_dtoa_r+0x5c>
 800f61c:	685a      	ldr	r2, [r3, #4]
 800f61e:	604a      	str	r2, [r1, #4]
 800f620:	2301      	movs	r3, #1
 800f622:	4093      	lsls	r3, r2
 800f624:	608b      	str	r3, [r1, #8]
 800f626:	4658      	mov	r0, fp
 800f628:	f000 feda 	bl	80103e0 <_Bfree>
 800f62c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f630:	2200      	movs	r2, #0
 800f632:	601a      	str	r2, [r3, #0]
 800f634:	1e2b      	subs	r3, r5, #0
 800f636:	bfb9      	ittee	lt
 800f638:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f63c:	9303      	strlt	r3, [sp, #12]
 800f63e:	2300      	movge	r3, #0
 800f640:	6033      	strge	r3, [r6, #0]
 800f642:	9f03      	ldr	r7, [sp, #12]
 800f644:	4b98      	ldr	r3, [pc, #608]	@ (800f8a8 <_dtoa_r+0x2d0>)
 800f646:	bfbc      	itt	lt
 800f648:	2201      	movlt	r2, #1
 800f64a:	6032      	strlt	r2, [r6, #0]
 800f64c:	43bb      	bics	r3, r7
 800f64e:	d112      	bne.n	800f676 <_dtoa_r+0x9e>
 800f650:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f652:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f656:	6013      	str	r3, [r2, #0]
 800f658:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f65c:	4323      	orrs	r3, r4
 800f65e:	f000 854d 	beq.w	80100fc <_dtoa_r+0xb24>
 800f662:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f664:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f8bc <_dtoa_r+0x2e4>
 800f668:	2b00      	cmp	r3, #0
 800f66a:	f000 854f 	beq.w	801010c <_dtoa_r+0xb34>
 800f66e:	f10a 0303 	add.w	r3, sl, #3
 800f672:	f000 bd49 	b.w	8010108 <_dtoa_r+0xb30>
 800f676:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f67a:	2200      	movs	r2, #0
 800f67c:	ec51 0b17 	vmov	r0, r1, d7
 800f680:	2300      	movs	r3, #0
 800f682:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f686:	f7f1 fa1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f68a:	4680      	mov	r8, r0
 800f68c:	b158      	cbz	r0, 800f6a6 <_dtoa_r+0xce>
 800f68e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f690:	2301      	movs	r3, #1
 800f692:	6013      	str	r3, [r2, #0]
 800f694:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f696:	b113      	cbz	r3, 800f69e <_dtoa_r+0xc6>
 800f698:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f69a:	4b84      	ldr	r3, [pc, #528]	@ (800f8ac <_dtoa_r+0x2d4>)
 800f69c:	6013      	str	r3, [r2, #0]
 800f69e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f8c0 <_dtoa_r+0x2e8>
 800f6a2:	f000 bd33 	b.w	801010c <_dtoa_r+0xb34>
 800f6a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f6aa:	aa16      	add	r2, sp, #88	@ 0x58
 800f6ac:	a917      	add	r1, sp, #92	@ 0x5c
 800f6ae:	4658      	mov	r0, fp
 800f6b0:	f001 fa3a 	bl	8010b28 <__d2b>
 800f6b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f6b8:	4681      	mov	r9, r0
 800f6ba:	2e00      	cmp	r6, #0
 800f6bc:	d077      	beq.n	800f7ae <_dtoa_r+0x1d6>
 800f6be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f6c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f6c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f6cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f6d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f6d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f6d8:	4619      	mov	r1, r3
 800f6da:	2200      	movs	r2, #0
 800f6dc:	4b74      	ldr	r3, [pc, #464]	@ (800f8b0 <_dtoa_r+0x2d8>)
 800f6de:	f7f0 fdd3 	bl	8000288 <__aeabi_dsub>
 800f6e2:	a369      	add	r3, pc, #420	@ (adr r3, 800f888 <_dtoa_r+0x2b0>)
 800f6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e8:	f7f0 ff86 	bl	80005f8 <__aeabi_dmul>
 800f6ec:	a368      	add	r3, pc, #416	@ (adr r3, 800f890 <_dtoa_r+0x2b8>)
 800f6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f2:	f7f0 fdcb 	bl	800028c <__adddf3>
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	460d      	mov	r5, r1
 800f6fc:	f7f0 ff12 	bl	8000524 <__aeabi_i2d>
 800f700:	a365      	add	r3, pc, #404	@ (adr r3, 800f898 <_dtoa_r+0x2c0>)
 800f702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f706:	f7f0 ff77 	bl	80005f8 <__aeabi_dmul>
 800f70a:	4602      	mov	r2, r0
 800f70c:	460b      	mov	r3, r1
 800f70e:	4620      	mov	r0, r4
 800f710:	4629      	mov	r1, r5
 800f712:	f7f0 fdbb 	bl	800028c <__adddf3>
 800f716:	4604      	mov	r4, r0
 800f718:	460d      	mov	r5, r1
 800f71a:	f7f1 fa1d 	bl	8000b58 <__aeabi_d2iz>
 800f71e:	2200      	movs	r2, #0
 800f720:	4607      	mov	r7, r0
 800f722:	2300      	movs	r3, #0
 800f724:	4620      	mov	r0, r4
 800f726:	4629      	mov	r1, r5
 800f728:	f7f1 f9d8 	bl	8000adc <__aeabi_dcmplt>
 800f72c:	b140      	cbz	r0, 800f740 <_dtoa_r+0x168>
 800f72e:	4638      	mov	r0, r7
 800f730:	f7f0 fef8 	bl	8000524 <__aeabi_i2d>
 800f734:	4622      	mov	r2, r4
 800f736:	462b      	mov	r3, r5
 800f738:	f7f1 f9c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800f73c:	b900      	cbnz	r0, 800f740 <_dtoa_r+0x168>
 800f73e:	3f01      	subs	r7, #1
 800f740:	2f16      	cmp	r7, #22
 800f742:	d851      	bhi.n	800f7e8 <_dtoa_r+0x210>
 800f744:	4b5b      	ldr	r3, [pc, #364]	@ (800f8b4 <_dtoa_r+0x2dc>)
 800f746:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f752:	f7f1 f9c3 	bl	8000adc <__aeabi_dcmplt>
 800f756:	2800      	cmp	r0, #0
 800f758:	d048      	beq.n	800f7ec <_dtoa_r+0x214>
 800f75a:	3f01      	subs	r7, #1
 800f75c:	2300      	movs	r3, #0
 800f75e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f760:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f762:	1b9b      	subs	r3, r3, r6
 800f764:	1e5a      	subs	r2, r3, #1
 800f766:	bf44      	itt	mi
 800f768:	f1c3 0801 	rsbmi	r8, r3, #1
 800f76c:	2300      	movmi	r3, #0
 800f76e:	9208      	str	r2, [sp, #32]
 800f770:	bf54      	ite	pl
 800f772:	f04f 0800 	movpl.w	r8, #0
 800f776:	9308      	strmi	r3, [sp, #32]
 800f778:	2f00      	cmp	r7, #0
 800f77a:	db39      	blt.n	800f7f0 <_dtoa_r+0x218>
 800f77c:	9b08      	ldr	r3, [sp, #32]
 800f77e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f780:	443b      	add	r3, r7
 800f782:	9308      	str	r3, [sp, #32]
 800f784:	2300      	movs	r3, #0
 800f786:	930a      	str	r3, [sp, #40]	@ 0x28
 800f788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f78a:	2b09      	cmp	r3, #9
 800f78c:	d864      	bhi.n	800f858 <_dtoa_r+0x280>
 800f78e:	2b05      	cmp	r3, #5
 800f790:	bfc4      	itt	gt
 800f792:	3b04      	subgt	r3, #4
 800f794:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f798:	f1a3 0302 	sub.w	r3, r3, #2
 800f79c:	bfcc      	ite	gt
 800f79e:	2400      	movgt	r4, #0
 800f7a0:	2401      	movle	r4, #1
 800f7a2:	2b03      	cmp	r3, #3
 800f7a4:	d863      	bhi.n	800f86e <_dtoa_r+0x296>
 800f7a6:	e8df f003 	tbb	[pc, r3]
 800f7aa:	372a      	.short	0x372a
 800f7ac:	5535      	.short	0x5535
 800f7ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f7b2:	441e      	add	r6, r3
 800f7b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f7b8:	2b20      	cmp	r3, #32
 800f7ba:	bfc1      	itttt	gt
 800f7bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f7c0:	409f      	lslgt	r7, r3
 800f7c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f7c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f7ca:	bfd6      	itet	le
 800f7cc:	f1c3 0320 	rsble	r3, r3, #32
 800f7d0:	ea47 0003 	orrgt.w	r0, r7, r3
 800f7d4:	fa04 f003 	lslle.w	r0, r4, r3
 800f7d8:	f7f0 fe94 	bl	8000504 <__aeabi_ui2d>
 800f7dc:	2201      	movs	r2, #1
 800f7de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f7e2:	3e01      	subs	r6, #1
 800f7e4:	9214      	str	r2, [sp, #80]	@ 0x50
 800f7e6:	e777      	b.n	800f6d8 <_dtoa_r+0x100>
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	e7b8      	b.n	800f75e <_dtoa_r+0x186>
 800f7ec:	9012      	str	r0, [sp, #72]	@ 0x48
 800f7ee:	e7b7      	b.n	800f760 <_dtoa_r+0x188>
 800f7f0:	427b      	negs	r3, r7
 800f7f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	eba8 0807 	sub.w	r8, r8, r7
 800f7fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f7fc:	e7c4      	b.n	800f788 <_dtoa_r+0x1b0>
 800f7fe:	2300      	movs	r3, #0
 800f800:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f804:	2b00      	cmp	r3, #0
 800f806:	dc35      	bgt.n	800f874 <_dtoa_r+0x29c>
 800f808:	2301      	movs	r3, #1
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	9307      	str	r3, [sp, #28]
 800f80e:	461a      	mov	r2, r3
 800f810:	920e      	str	r2, [sp, #56]	@ 0x38
 800f812:	e00b      	b.n	800f82c <_dtoa_r+0x254>
 800f814:	2301      	movs	r3, #1
 800f816:	e7f3      	b.n	800f800 <_dtoa_r+0x228>
 800f818:	2300      	movs	r3, #0
 800f81a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f81c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f81e:	18fb      	adds	r3, r7, r3
 800f820:	9300      	str	r3, [sp, #0]
 800f822:	3301      	adds	r3, #1
 800f824:	2b01      	cmp	r3, #1
 800f826:	9307      	str	r3, [sp, #28]
 800f828:	bfb8      	it	lt
 800f82a:	2301      	movlt	r3, #1
 800f82c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f830:	2100      	movs	r1, #0
 800f832:	2204      	movs	r2, #4
 800f834:	f102 0514 	add.w	r5, r2, #20
 800f838:	429d      	cmp	r5, r3
 800f83a:	d91f      	bls.n	800f87c <_dtoa_r+0x2a4>
 800f83c:	6041      	str	r1, [r0, #4]
 800f83e:	4658      	mov	r0, fp
 800f840:	f000 fd8e 	bl	8010360 <_Balloc>
 800f844:	4682      	mov	sl, r0
 800f846:	2800      	cmp	r0, #0
 800f848:	d13c      	bne.n	800f8c4 <_dtoa_r+0x2ec>
 800f84a:	4b1b      	ldr	r3, [pc, #108]	@ (800f8b8 <_dtoa_r+0x2e0>)
 800f84c:	4602      	mov	r2, r0
 800f84e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f852:	e6d8      	b.n	800f606 <_dtoa_r+0x2e>
 800f854:	2301      	movs	r3, #1
 800f856:	e7e0      	b.n	800f81a <_dtoa_r+0x242>
 800f858:	2401      	movs	r4, #1
 800f85a:	2300      	movs	r3, #0
 800f85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f85e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f860:	f04f 33ff 	mov.w	r3, #4294967295
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	9307      	str	r3, [sp, #28]
 800f868:	2200      	movs	r2, #0
 800f86a:	2312      	movs	r3, #18
 800f86c:	e7d0      	b.n	800f810 <_dtoa_r+0x238>
 800f86e:	2301      	movs	r3, #1
 800f870:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f872:	e7f5      	b.n	800f860 <_dtoa_r+0x288>
 800f874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f876:	9300      	str	r3, [sp, #0]
 800f878:	9307      	str	r3, [sp, #28]
 800f87a:	e7d7      	b.n	800f82c <_dtoa_r+0x254>
 800f87c:	3101      	adds	r1, #1
 800f87e:	0052      	lsls	r2, r2, #1
 800f880:	e7d8      	b.n	800f834 <_dtoa_r+0x25c>
 800f882:	bf00      	nop
 800f884:	f3af 8000 	nop.w
 800f888:	636f4361 	.word	0x636f4361
 800f88c:	3fd287a7 	.word	0x3fd287a7
 800f890:	8b60c8b3 	.word	0x8b60c8b3
 800f894:	3fc68a28 	.word	0x3fc68a28
 800f898:	509f79fb 	.word	0x509f79fb
 800f89c:	3fd34413 	.word	0x3fd34413
 800f8a0:	080135c5 	.word	0x080135c5
 800f8a4:	0801367f 	.word	0x0801367f
 800f8a8:	7ff00000 	.word	0x7ff00000
 800f8ac:	0801359d 	.word	0x0801359d
 800f8b0:	3ff80000 	.word	0x3ff80000
 800f8b4:	08013778 	.word	0x08013778
 800f8b8:	080136d7 	.word	0x080136d7
 800f8bc:	0801367b 	.word	0x0801367b
 800f8c0:	0801359c 	.word	0x0801359c
 800f8c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f8c8:	6018      	str	r0, [r3, #0]
 800f8ca:	9b07      	ldr	r3, [sp, #28]
 800f8cc:	2b0e      	cmp	r3, #14
 800f8ce:	f200 80a4 	bhi.w	800fa1a <_dtoa_r+0x442>
 800f8d2:	2c00      	cmp	r4, #0
 800f8d4:	f000 80a1 	beq.w	800fa1a <_dtoa_r+0x442>
 800f8d8:	2f00      	cmp	r7, #0
 800f8da:	dd33      	ble.n	800f944 <_dtoa_r+0x36c>
 800f8dc:	4bad      	ldr	r3, [pc, #692]	@ (800fb94 <_dtoa_r+0x5bc>)
 800f8de:	f007 020f 	and.w	r2, r7, #15
 800f8e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8e6:	ed93 7b00 	vldr	d7, [r3]
 800f8ea:	05f8      	lsls	r0, r7, #23
 800f8ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f8f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f8f4:	d516      	bpl.n	800f924 <_dtoa_r+0x34c>
 800f8f6:	4ba8      	ldr	r3, [pc, #672]	@ (800fb98 <_dtoa_r+0x5c0>)
 800f8f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f900:	f7f0 ffa4 	bl	800084c <__aeabi_ddiv>
 800f904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f908:	f004 040f 	and.w	r4, r4, #15
 800f90c:	2603      	movs	r6, #3
 800f90e:	4da2      	ldr	r5, [pc, #648]	@ (800fb98 <_dtoa_r+0x5c0>)
 800f910:	b954      	cbnz	r4, 800f928 <_dtoa_r+0x350>
 800f912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f91a:	f7f0 ff97 	bl	800084c <__aeabi_ddiv>
 800f91e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f922:	e028      	b.n	800f976 <_dtoa_r+0x39e>
 800f924:	2602      	movs	r6, #2
 800f926:	e7f2      	b.n	800f90e <_dtoa_r+0x336>
 800f928:	07e1      	lsls	r1, r4, #31
 800f92a:	d508      	bpl.n	800f93e <_dtoa_r+0x366>
 800f92c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f930:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f934:	f7f0 fe60 	bl	80005f8 <__aeabi_dmul>
 800f938:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f93c:	3601      	adds	r6, #1
 800f93e:	1064      	asrs	r4, r4, #1
 800f940:	3508      	adds	r5, #8
 800f942:	e7e5      	b.n	800f910 <_dtoa_r+0x338>
 800f944:	f000 80d2 	beq.w	800faec <_dtoa_r+0x514>
 800f948:	427c      	negs	r4, r7
 800f94a:	4b92      	ldr	r3, [pc, #584]	@ (800fb94 <_dtoa_r+0x5bc>)
 800f94c:	4d92      	ldr	r5, [pc, #584]	@ (800fb98 <_dtoa_r+0x5c0>)
 800f94e:	f004 020f 	and.w	r2, r4, #15
 800f952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f95e:	f7f0 fe4b 	bl	80005f8 <__aeabi_dmul>
 800f962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f966:	1124      	asrs	r4, r4, #4
 800f968:	2300      	movs	r3, #0
 800f96a:	2602      	movs	r6, #2
 800f96c:	2c00      	cmp	r4, #0
 800f96e:	f040 80b2 	bne.w	800fad6 <_dtoa_r+0x4fe>
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1d3      	bne.n	800f91e <_dtoa_r+0x346>
 800f976:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f978:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	f000 80b7 	beq.w	800faf0 <_dtoa_r+0x518>
 800f982:	4b86      	ldr	r3, [pc, #536]	@ (800fb9c <_dtoa_r+0x5c4>)
 800f984:	2200      	movs	r2, #0
 800f986:	4620      	mov	r0, r4
 800f988:	4629      	mov	r1, r5
 800f98a:	f7f1 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800f98e:	2800      	cmp	r0, #0
 800f990:	f000 80ae 	beq.w	800faf0 <_dtoa_r+0x518>
 800f994:	9b07      	ldr	r3, [sp, #28]
 800f996:	2b00      	cmp	r3, #0
 800f998:	f000 80aa 	beq.w	800faf0 <_dtoa_r+0x518>
 800f99c:	9b00      	ldr	r3, [sp, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	dd37      	ble.n	800fa12 <_dtoa_r+0x43a>
 800f9a2:	1e7b      	subs	r3, r7, #1
 800f9a4:	9304      	str	r3, [sp, #16]
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	4b7d      	ldr	r3, [pc, #500]	@ (800fba0 <_dtoa_r+0x5c8>)
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	4629      	mov	r1, r5
 800f9ae:	f7f0 fe23 	bl	80005f8 <__aeabi_dmul>
 800f9b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9b6:	9c00      	ldr	r4, [sp, #0]
 800f9b8:	3601      	adds	r6, #1
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	f7f0 fdb2 	bl	8000524 <__aeabi_i2d>
 800f9c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9c4:	f7f0 fe18 	bl	80005f8 <__aeabi_dmul>
 800f9c8:	4b76      	ldr	r3, [pc, #472]	@ (800fba4 <_dtoa_r+0x5cc>)
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	f7f0 fc5e 	bl	800028c <__adddf3>
 800f9d0:	4605      	mov	r5, r0
 800f9d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f9d6:	2c00      	cmp	r4, #0
 800f9d8:	f040 808d 	bne.w	800faf6 <_dtoa_r+0x51e>
 800f9dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9e0:	4b71      	ldr	r3, [pc, #452]	@ (800fba8 <_dtoa_r+0x5d0>)
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	f7f0 fc50 	bl	8000288 <__aeabi_dsub>
 800f9e8:	4602      	mov	r2, r0
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9f0:	462a      	mov	r2, r5
 800f9f2:	4633      	mov	r3, r6
 800f9f4:	f7f1 f890 	bl	8000b18 <__aeabi_dcmpgt>
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	f040 828b 	bne.w	800ff14 <_dtoa_r+0x93c>
 800f9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa02:	462a      	mov	r2, r5
 800fa04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fa08:	f7f1 f868 	bl	8000adc <__aeabi_dcmplt>
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	f040 8128 	bne.w	800fc62 <_dtoa_r+0x68a>
 800fa12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fa16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fa1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f2c0 815a 	blt.w	800fcd6 <_dtoa_r+0x6fe>
 800fa22:	2f0e      	cmp	r7, #14
 800fa24:	f300 8157 	bgt.w	800fcd6 <_dtoa_r+0x6fe>
 800fa28:	4b5a      	ldr	r3, [pc, #360]	@ (800fb94 <_dtoa_r+0x5bc>)
 800fa2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fa2e:	ed93 7b00 	vldr	d7, [r3]
 800fa32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	ed8d 7b00 	vstr	d7, [sp]
 800fa3a:	da03      	bge.n	800fa44 <_dtoa_r+0x46c>
 800fa3c:	9b07      	ldr	r3, [sp, #28]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f340 8101 	ble.w	800fc46 <_dtoa_r+0x66e>
 800fa44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fa48:	4656      	mov	r6, sl
 800fa4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa4e:	4620      	mov	r0, r4
 800fa50:	4629      	mov	r1, r5
 800fa52:	f7f0 fefb 	bl	800084c <__aeabi_ddiv>
 800fa56:	f7f1 f87f 	bl	8000b58 <__aeabi_d2iz>
 800fa5a:	4680      	mov	r8, r0
 800fa5c:	f7f0 fd62 	bl	8000524 <__aeabi_i2d>
 800fa60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa64:	f7f0 fdc8 	bl	80005f8 <__aeabi_dmul>
 800fa68:	4602      	mov	r2, r0
 800fa6a:	460b      	mov	r3, r1
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	4629      	mov	r1, r5
 800fa70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fa74:	f7f0 fc08 	bl	8000288 <__aeabi_dsub>
 800fa78:	f806 4b01 	strb.w	r4, [r6], #1
 800fa7c:	9d07      	ldr	r5, [sp, #28]
 800fa7e:	eba6 040a 	sub.w	r4, r6, sl
 800fa82:	42a5      	cmp	r5, r4
 800fa84:	4602      	mov	r2, r0
 800fa86:	460b      	mov	r3, r1
 800fa88:	f040 8117 	bne.w	800fcba <_dtoa_r+0x6e2>
 800fa8c:	f7f0 fbfe 	bl	800028c <__adddf3>
 800fa90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa94:	4604      	mov	r4, r0
 800fa96:	460d      	mov	r5, r1
 800fa98:	f7f1 f83e 	bl	8000b18 <__aeabi_dcmpgt>
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	f040 80f9 	bne.w	800fc94 <_dtoa_r+0x6bc>
 800faa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800faa6:	4620      	mov	r0, r4
 800faa8:	4629      	mov	r1, r5
 800faaa:	f7f1 f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 800faae:	b118      	cbz	r0, 800fab8 <_dtoa_r+0x4e0>
 800fab0:	f018 0f01 	tst.w	r8, #1
 800fab4:	f040 80ee 	bne.w	800fc94 <_dtoa_r+0x6bc>
 800fab8:	4649      	mov	r1, r9
 800faba:	4658      	mov	r0, fp
 800fabc:	f000 fc90 	bl	80103e0 <_Bfree>
 800fac0:	2300      	movs	r3, #0
 800fac2:	7033      	strb	r3, [r6, #0]
 800fac4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fac6:	3701      	adds	r7, #1
 800fac8:	601f      	str	r7, [r3, #0]
 800faca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800facc:	2b00      	cmp	r3, #0
 800face:	f000 831d 	beq.w	801010c <_dtoa_r+0xb34>
 800fad2:	601e      	str	r6, [r3, #0]
 800fad4:	e31a      	b.n	801010c <_dtoa_r+0xb34>
 800fad6:	07e2      	lsls	r2, r4, #31
 800fad8:	d505      	bpl.n	800fae6 <_dtoa_r+0x50e>
 800fada:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fade:	f7f0 fd8b 	bl	80005f8 <__aeabi_dmul>
 800fae2:	3601      	adds	r6, #1
 800fae4:	2301      	movs	r3, #1
 800fae6:	1064      	asrs	r4, r4, #1
 800fae8:	3508      	adds	r5, #8
 800faea:	e73f      	b.n	800f96c <_dtoa_r+0x394>
 800faec:	2602      	movs	r6, #2
 800faee:	e742      	b.n	800f976 <_dtoa_r+0x39e>
 800faf0:	9c07      	ldr	r4, [sp, #28]
 800faf2:	9704      	str	r7, [sp, #16]
 800faf4:	e761      	b.n	800f9ba <_dtoa_r+0x3e2>
 800faf6:	4b27      	ldr	r3, [pc, #156]	@ (800fb94 <_dtoa_r+0x5bc>)
 800faf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fafa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fafe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fb02:	4454      	add	r4, sl
 800fb04:	2900      	cmp	r1, #0
 800fb06:	d053      	beq.n	800fbb0 <_dtoa_r+0x5d8>
 800fb08:	4928      	ldr	r1, [pc, #160]	@ (800fbac <_dtoa_r+0x5d4>)
 800fb0a:	2000      	movs	r0, #0
 800fb0c:	f7f0 fe9e 	bl	800084c <__aeabi_ddiv>
 800fb10:	4633      	mov	r3, r6
 800fb12:	462a      	mov	r2, r5
 800fb14:	f7f0 fbb8 	bl	8000288 <__aeabi_dsub>
 800fb18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fb1c:	4656      	mov	r6, sl
 800fb1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb22:	f7f1 f819 	bl	8000b58 <__aeabi_d2iz>
 800fb26:	4605      	mov	r5, r0
 800fb28:	f7f0 fcfc 	bl	8000524 <__aeabi_i2d>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	460b      	mov	r3, r1
 800fb30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb34:	f7f0 fba8 	bl	8000288 <__aeabi_dsub>
 800fb38:	3530      	adds	r5, #48	@ 0x30
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	460b      	mov	r3, r1
 800fb3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fb42:	f806 5b01 	strb.w	r5, [r6], #1
 800fb46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fb4a:	f7f0 ffc7 	bl	8000adc <__aeabi_dcmplt>
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	d171      	bne.n	800fc36 <_dtoa_r+0x65e>
 800fb52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb56:	4911      	ldr	r1, [pc, #68]	@ (800fb9c <_dtoa_r+0x5c4>)
 800fb58:	2000      	movs	r0, #0
 800fb5a:	f7f0 fb95 	bl	8000288 <__aeabi_dsub>
 800fb5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fb62:	f7f0 ffbb 	bl	8000adc <__aeabi_dcmplt>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	f040 8095 	bne.w	800fc96 <_dtoa_r+0x6be>
 800fb6c:	42a6      	cmp	r6, r4
 800fb6e:	f43f af50 	beq.w	800fa12 <_dtoa_r+0x43a>
 800fb72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fb76:	4b0a      	ldr	r3, [pc, #40]	@ (800fba0 <_dtoa_r+0x5c8>)
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f7f0 fd3d 	bl	80005f8 <__aeabi_dmul>
 800fb7e:	4b08      	ldr	r3, [pc, #32]	@ (800fba0 <_dtoa_r+0x5c8>)
 800fb80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fb84:	2200      	movs	r2, #0
 800fb86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb8a:	f7f0 fd35 	bl	80005f8 <__aeabi_dmul>
 800fb8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb92:	e7c4      	b.n	800fb1e <_dtoa_r+0x546>
 800fb94:	08013778 	.word	0x08013778
 800fb98:	08013750 	.word	0x08013750
 800fb9c:	3ff00000 	.word	0x3ff00000
 800fba0:	40240000 	.word	0x40240000
 800fba4:	401c0000 	.word	0x401c0000
 800fba8:	40140000 	.word	0x40140000
 800fbac:	3fe00000 	.word	0x3fe00000
 800fbb0:	4631      	mov	r1, r6
 800fbb2:	4628      	mov	r0, r5
 800fbb4:	f7f0 fd20 	bl	80005f8 <__aeabi_dmul>
 800fbb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fbbc:	9415      	str	r4, [sp, #84]	@ 0x54
 800fbbe:	4656      	mov	r6, sl
 800fbc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbc4:	f7f0 ffc8 	bl	8000b58 <__aeabi_d2iz>
 800fbc8:	4605      	mov	r5, r0
 800fbca:	f7f0 fcab 	bl	8000524 <__aeabi_i2d>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbd6:	f7f0 fb57 	bl	8000288 <__aeabi_dsub>
 800fbda:	3530      	adds	r5, #48	@ 0x30
 800fbdc:	f806 5b01 	strb.w	r5, [r6], #1
 800fbe0:	4602      	mov	r2, r0
 800fbe2:	460b      	mov	r3, r1
 800fbe4:	42a6      	cmp	r6, r4
 800fbe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fbea:	f04f 0200 	mov.w	r2, #0
 800fbee:	d124      	bne.n	800fc3a <_dtoa_r+0x662>
 800fbf0:	4bac      	ldr	r3, [pc, #688]	@ (800fea4 <_dtoa_r+0x8cc>)
 800fbf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fbf6:	f7f0 fb49 	bl	800028c <__adddf3>
 800fbfa:	4602      	mov	r2, r0
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc02:	f7f0 ff89 	bl	8000b18 <__aeabi_dcmpgt>
 800fc06:	2800      	cmp	r0, #0
 800fc08:	d145      	bne.n	800fc96 <_dtoa_r+0x6be>
 800fc0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fc0e:	49a5      	ldr	r1, [pc, #660]	@ (800fea4 <_dtoa_r+0x8cc>)
 800fc10:	2000      	movs	r0, #0
 800fc12:	f7f0 fb39 	bl	8000288 <__aeabi_dsub>
 800fc16:	4602      	mov	r2, r0
 800fc18:	460b      	mov	r3, r1
 800fc1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc1e:	f7f0 ff5d 	bl	8000adc <__aeabi_dcmplt>
 800fc22:	2800      	cmp	r0, #0
 800fc24:	f43f aef5 	beq.w	800fa12 <_dtoa_r+0x43a>
 800fc28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fc2a:	1e73      	subs	r3, r6, #1
 800fc2c:	9315      	str	r3, [sp, #84]	@ 0x54
 800fc2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fc32:	2b30      	cmp	r3, #48	@ 0x30
 800fc34:	d0f8      	beq.n	800fc28 <_dtoa_r+0x650>
 800fc36:	9f04      	ldr	r7, [sp, #16]
 800fc38:	e73e      	b.n	800fab8 <_dtoa_r+0x4e0>
 800fc3a:	4b9b      	ldr	r3, [pc, #620]	@ (800fea8 <_dtoa_r+0x8d0>)
 800fc3c:	f7f0 fcdc 	bl	80005f8 <__aeabi_dmul>
 800fc40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc44:	e7bc      	b.n	800fbc0 <_dtoa_r+0x5e8>
 800fc46:	d10c      	bne.n	800fc62 <_dtoa_r+0x68a>
 800fc48:	4b98      	ldr	r3, [pc, #608]	@ (800feac <_dtoa_r+0x8d4>)
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc50:	f7f0 fcd2 	bl	80005f8 <__aeabi_dmul>
 800fc54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc58:	f7f0 ff54 	bl	8000b04 <__aeabi_dcmpge>
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	f000 8157 	beq.w	800ff10 <_dtoa_r+0x938>
 800fc62:	2400      	movs	r4, #0
 800fc64:	4625      	mov	r5, r4
 800fc66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc68:	43db      	mvns	r3, r3
 800fc6a:	9304      	str	r3, [sp, #16]
 800fc6c:	4656      	mov	r6, sl
 800fc6e:	2700      	movs	r7, #0
 800fc70:	4621      	mov	r1, r4
 800fc72:	4658      	mov	r0, fp
 800fc74:	f000 fbb4 	bl	80103e0 <_Bfree>
 800fc78:	2d00      	cmp	r5, #0
 800fc7a:	d0dc      	beq.n	800fc36 <_dtoa_r+0x65e>
 800fc7c:	b12f      	cbz	r7, 800fc8a <_dtoa_r+0x6b2>
 800fc7e:	42af      	cmp	r7, r5
 800fc80:	d003      	beq.n	800fc8a <_dtoa_r+0x6b2>
 800fc82:	4639      	mov	r1, r7
 800fc84:	4658      	mov	r0, fp
 800fc86:	f000 fbab 	bl	80103e0 <_Bfree>
 800fc8a:	4629      	mov	r1, r5
 800fc8c:	4658      	mov	r0, fp
 800fc8e:	f000 fba7 	bl	80103e0 <_Bfree>
 800fc92:	e7d0      	b.n	800fc36 <_dtoa_r+0x65e>
 800fc94:	9704      	str	r7, [sp, #16]
 800fc96:	4633      	mov	r3, r6
 800fc98:	461e      	mov	r6, r3
 800fc9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc9e:	2a39      	cmp	r2, #57	@ 0x39
 800fca0:	d107      	bne.n	800fcb2 <_dtoa_r+0x6da>
 800fca2:	459a      	cmp	sl, r3
 800fca4:	d1f8      	bne.n	800fc98 <_dtoa_r+0x6c0>
 800fca6:	9a04      	ldr	r2, [sp, #16]
 800fca8:	3201      	adds	r2, #1
 800fcaa:	9204      	str	r2, [sp, #16]
 800fcac:	2230      	movs	r2, #48	@ 0x30
 800fcae:	f88a 2000 	strb.w	r2, [sl]
 800fcb2:	781a      	ldrb	r2, [r3, #0]
 800fcb4:	3201      	adds	r2, #1
 800fcb6:	701a      	strb	r2, [r3, #0]
 800fcb8:	e7bd      	b.n	800fc36 <_dtoa_r+0x65e>
 800fcba:	4b7b      	ldr	r3, [pc, #492]	@ (800fea8 <_dtoa_r+0x8d0>)
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	f7f0 fc9b 	bl	80005f8 <__aeabi_dmul>
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	460d      	mov	r5, r1
 800fcca:	f7f0 fefd 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcce:	2800      	cmp	r0, #0
 800fcd0:	f43f aebb 	beq.w	800fa4a <_dtoa_r+0x472>
 800fcd4:	e6f0      	b.n	800fab8 <_dtoa_r+0x4e0>
 800fcd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fcd8:	2a00      	cmp	r2, #0
 800fcda:	f000 80db 	beq.w	800fe94 <_dtoa_r+0x8bc>
 800fcde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fce0:	2a01      	cmp	r2, #1
 800fce2:	f300 80bf 	bgt.w	800fe64 <_dtoa_r+0x88c>
 800fce6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fce8:	2a00      	cmp	r2, #0
 800fcea:	f000 80b7 	beq.w	800fe5c <_dtoa_r+0x884>
 800fcee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fcf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fcf4:	4646      	mov	r6, r8
 800fcf6:	9a08      	ldr	r2, [sp, #32]
 800fcf8:	2101      	movs	r1, #1
 800fcfa:	441a      	add	r2, r3
 800fcfc:	4658      	mov	r0, fp
 800fcfe:	4498      	add	r8, r3
 800fd00:	9208      	str	r2, [sp, #32]
 800fd02:	f000 fc6b 	bl	80105dc <__i2b>
 800fd06:	4605      	mov	r5, r0
 800fd08:	b15e      	cbz	r6, 800fd22 <_dtoa_r+0x74a>
 800fd0a:	9b08      	ldr	r3, [sp, #32]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	dd08      	ble.n	800fd22 <_dtoa_r+0x74a>
 800fd10:	42b3      	cmp	r3, r6
 800fd12:	9a08      	ldr	r2, [sp, #32]
 800fd14:	bfa8      	it	ge
 800fd16:	4633      	movge	r3, r6
 800fd18:	eba8 0803 	sub.w	r8, r8, r3
 800fd1c:	1af6      	subs	r6, r6, r3
 800fd1e:	1ad3      	subs	r3, r2, r3
 800fd20:	9308      	str	r3, [sp, #32]
 800fd22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd24:	b1f3      	cbz	r3, 800fd64 <_dtoa_r+0x78c>
 800fd26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f000 80b7 	beq.w	800fe9c <_dtoa_r+0x8c4>
 800fd2e:	b18c      	cbz	r4, 800fd54 <_dtoa_r+0x77c>
 800fd30:	4629      	mov	r1, r5
 800fd32:	4622      	mov	r2, r4
 800fd34:	4658      	mov	r0, fp
 800fd36:	f000 fd11 	bl	801075c <__pow5mult>
 800fd3a:	464a      	mov	r2, r9
 800fd3c:	4601      	mov	r1, r0
 800fd3e:	4605      	mov	r5, r0
 800fd40:	4658      	mov	r0, fp
 800fd42:	f000 fc61 	bl	8010608 <__multiply>
 800fd46:	4649      	mov	r1, r9
 800fd48:	9004      	str	r0, [sp, #16]
 800fd4a:	4658      	mov	r0, fp
 800fd4c:	f000 fb48 	bl	80103e0 <_Bfree>
 800fd50:	9b04      	ldr	r3, [sp, #16]
 800fd52:	4699      	mov	r9, r3
 800fd54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd56:	1b1a      	subs	r2, r3, r4
 800fd58:	d004      	beq.n	800fd64 <_dtoa_r+0x78c>
 800fd5a:	4649      	mov	r1, r9
 800fd5c:	4658      	mov	r0, fp
 800fd5e:	f000 fcfd 	bl	801075c <__pow5mult>
 800fd62:	4681      	mov	r9, r0
 800fd64:	2101      	movs	r1, #1
 800fd66:	4658      	mov	r0, fp
 800fd68:	f000 fc38 	bl	80105dc <__i2b>
 800fd6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd6e:	4604      	mov	r4, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	f000 81cf 	beq.w	8010114 <_dtoa_r+0xb3c>
 800fd76:	461a      	mov	r2, r3
 800fd78:	4601      	mov	r1, r0
 800fd7a:	4658      	mov	r0, fp
 800fd7c:	f000 fcee 	bl	801075c <__pow5mult>
 800fd80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	4604      	mov	r4, r0
 800fd86:	f300 8095 	bgt.w	800feb4 <_dtoa_r+0x8dc>
 800fd8a:	9b02      	ldr	r3, [sp, #8]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	f040 8087 	bne.w	800fea0 <_dtoa_r+0x8c8>
 800fd92:	9b03      	ldr	r3, [sp, #12]
 800fd94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	f040 8089 	bne.w	800feb0 <_dtoa_r+0x8d8>
 800fd9e:	9b03      	ldr	r3, [sp, #12]
 800fda0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fda4:	0d1b      	lsrs	r3, r3, #20
 800fda6:	051b      	lsls	r3, r3, #20
 800fda8:	b12b      	cbz	r3, 800fdb6 <_dtoa_r+0x7de>
 800fdaa:	9b08      	ldr	r3, [sp, #32]
 800fdac:	3301      	adds	r3, #1
 800fdae:	9308      	str	r3, [sp, #32]
 800fdb0:	f108 0801 	add.w	r8, r8, #1
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fdb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	f000 81b0 	beq.w	8010120 <_dtoa_r+0xb48>
 800fdc0:	6923      	ldr	r3, [r4, #16]
 800fdc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fdc6:	6918      	ldr	r0, [r3, #16]
 800fdc8:	f000 fbbc 	bl	8010544 <__hi0bits>
 800fdcc:	f1c0 0020 	rsb	r0, r0, #32
 800fdd0:	9b08      	ldr	r3, [sp, #32]
 800fdd2:	4418      	add	r0, r3
 800fdd4:	f010 001f 	ands.w	r0, r0, #31
 800fdd8:	d077      	beq.n	800feca <_dtoa_r+0x8f2>
 800fdda:	f1c0 0320 	rsb	r3, r0, #32
 800fdde:	2b04      	cmp	r3, #4
 800fde0:	dd6b      	ble.n	800feba <_dtoa_r+0x8e2>
 800fde2:	9b08      	ldr	r3, [sp, #32]
 800fde4:	f1c0 001c 	rsb	r0, r0, #28
 800fde8:	4403      	add	r3, r0
 800fdea:	4480      	add	r8, r0
 800fdec:	4406      	add	r6, r0
 800fdee:	9308      	str	r3, [sp, #32]
 800fdf0:	f1b8 0f00 	cmp.w	r8, #0
 800fdf4:	dd05      	ble.n	800fe02 <_dtoa_r+0x82a>
 800fdf6:	4649      	mov	r1, r9
 800fdf8:	4642      	mov	r2, r8
 800fdfa:	4658      	mov	r0, fp
 800fdfc:	f000 fd08 	bl	8010810 <__lshift>
 800fe00:	4681      	mov	r9, r0
 800fe02:	9b08      	ldr	r3, [sp, #32]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	dd05      	ble.n	800fe14 <_dtoa_r+0x83c>
 800fe08:	4621      	mov	r1, r4
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	4658      	mov	r0, fp
 800fe0e:	f000 fcff 	bl	8010810 <__lshift>
 800fe12:	4604      	mov	r4, r0
 800fe14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d059      	beq.n	800fece <_dtoa_r+0x8f6>
 800fe1a:	4621      	mov	r1, r4
 800fe1c:	4648      	mov	r0, r9
 800fe1e:	f000 fd63 	bl	80108e8 <__mcmp>
 800fe22:	2800      	cmp	r0, #0
 800fe24:	da53      	bge.n	800fece <_dtoa_r+0x8f6>
 800fe26:	1e7b      	subs	r3, r7, #1
 800fe28:	9304      	str	r3, [sp, #16]
 800fe2a:	4649      	mov	r1, r9
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	220a      	movs	r2, #10
 800fe30:	4658      	mov	r0, fp
 800fe32:	f000 faf7 	bl	8010424 <__multadd>
 800fe36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe38:	4681      	mov	r9, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	f000 8172 	beq.w	8010124 <_dtoa_r+0xb4c>
 800fe40:	2300      	movs	r3, #0
 800fe42:	4629      	mov	r1, r5
 800fe44:	220a      	movs	r2, #10
 800fe46:	4658      	mov	r0, fp
 800fe48:	f000 faec 	bl	8010424 <__multadd>
 800fe4c:	9b00      	ldr	r3, [sp, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	4605      	mov	r5, r0
 800fe52:	dc67      	bgt.n	800ff24 <_dtoa_r+0x94c>
 800fe54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe56:	2b02      	cmp	r3, #2
 800fe58:	dc41      	bgt.n	800fede <_dtoa_r+0x906>
 800fe5a:	e063      	b.n	800ff24 <_dtoa_r+0x94c>
 800fe5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fe5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fe62:	e746      	b.n	800fcf2 <_dtoa_r+0x71a>
 800fe64:	9b07      	ldr	r3, [sp, #28]
 800fe66:	1e5c      	subs	r4, r3, #1
 800fe68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe6a:	42a3      	cmp	r3, r4
 800fe6c:	bfbf      	itttt	lt
 800fe6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fe70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fe72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fe74:	1ae3      	sublt	r3, r4, r3
 800fe76:	bfb4      	ite	lt
 800fe78:	18d2      	addlt	r2, r2, r3
 800fe7a:	1b1c      	subge	r4, r3, r4
 800fe7c:	9b07      	ldr	r3, [sp, #28]
 800fe7e:	bfbc      	itt	lt
 800fe80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fe82:	2400      	movlt	r4, #0
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	bfb5      	itete	lt
 800fe88:	eba8 0603 	sublt.w	r6, r8, r3
 800fe8c:	9b07      	ldrge	r3, [sp, #28]
 800fe8e:	2300      	movlt	r3, #0
 800fe90:	4646      	movge	r6, r8
 800fe92:	e730      	b.n	800fcf6 <_dtoa_r+0x71e>
 800fe94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fe96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fe98:	4646      	mov	r6, r8
 800fe9a:	e735      	b.n	800fd08 <_dtoa_r+0x730>
 800fe9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe9e:	e75c      	b.n	800fd5a <_dtoa_r+0x782>
 800fea0:	2300      	movs	r3, #0
 800fea2:	e788      	b.n	800fdb6 <_dtoa_r+0x7de>
 800fea4:	3fe00000 	.word	0x3fe00000
 800fea8:	40240000 	.word	0x40240000
 800feac:	40140000 	.word	0x40140000
 800feb0:	9b02      	ldr	r3, [sp, #8]
 800feb2:	e780      	b.n	800fdb6 <_dtoa_r+0x7de>
 800feb4:	2300      	movs	r3, #0
 800feb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800feb8:	e782      	b.n	800fdc0 <_dtoa_r+0x7e8>
 800feba:	d099      	beq.n	800fdf0 <_dtoa_r+0x818>
 800febc:	9a08      	ldr	r2, [sp, #32]
 800febe:	331c      	adds	r3, #28
 800fec0:	441a      	add	r2, r3
 800fec2:	4498      	add	r8, r3
 800fec4:	441e      	add	r6, r3
 800fec6:	9208      	str	r2, [sp, #32]
 800fec8:	e792      	b.n	800fdf0 <_dtoa_r+0x818>
 800feca:	4603      	mov	r3, r0
 800fecc:	e7f6      	b.n	800febc <_dtoa_r+0x8e4>
 800fece:	9b07      	ldr	r3, [sp, #28]
 800fed0:	9704      	str	r7, [sp, #16]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	dc20      	bgt.n	800ff18 <_dtoa_r+0x940>
 800fed6:	9300      	str	r3, [sp, #0]
 800fed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feda:	2b02      	cmp	r3, #2
 800fedc:	dd1e      	ble.n	800ff1c <_dtoa_r+0x944>
 800fede:	9b00      	ldr	r3, [sp, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	f47f aec0 	bne.w	800fc66 <_dtoa_r+0x68e>
 800fee6:	4621      	mov	r1, r4
 800fee8:	2205      	movs	r2, #5
 800feea:	4658      	mov	r0, fp
 800feec:	f000 fa9a 	bl	8010424 <__multadd>
 800fef0:	4601      	mov	r1, r0
 800fef2:	4604      	mov	r4, r0
 800fef4:	4648      	mov	r0, r9
 800fef6:	f000 fcf7 	bl	80108e8 <__mcmp>
 800fefa:	2800      	cmp	r0, #0
 800fefc:	f77f aeb3 	ble.w	800fc66 <_dtoa_r+0x68e>
 800ff00:	4656      	mov	r6, sl
 800ff02:	2331      	movs	r3, #49	@ 0x31
 800ff04:	f806 3b01 	strb.w	r3, [r6], #1
 800ff08:	9b04      	ldr	r3, [sp, #16]
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	9304      	str	r3, [sp, #16]
 800ff0e:	e6ae      	b.n	800fc6e <_dtoa_r+0x696>
 800ff10:	9c07      	ldr	r4, [sp, #28]
 800ff12:	9704      	str	r7, [sp, #16]
 800ff14:	4625      	mov	r5, r4
 800ff16:	e7f3      	b.n	800ff00 <_dtoa_r+0x928>
 800ff18:	9b07      	ldr	r3, [sp, #28]
 800ff1a:	9300      	str	r3, [sp, #0]
 800ff1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	f000 8104 	beq.w	801012c <_dtoa_r+0xb54>
 800ff24:	2e00      	cmp	r6, #0
 800ff26:	dd05      	ble.n	800ff34 <_dtoa_r+0x95c>
 800ff28:	4629      	mov	r1, r5
 800ff2a:	4632      	mov	r2, r6
 800ff2c:	4658      	mov	r0, fp
 800ff2e:	f000 fc6f 	bl	8010810 <__lshift>
 800ff32:	4605      	mov	r5, r0
 800ff34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d05a      	beq.n	800fff0 <_dtoa_r+0xa18>
 800ff3a:	6869      	ldr	r1, [r5, #4]
 800ff3c:	4658      	mov	r0, fp
 800ff3e:	f000 fa0f 	bl	8010360 <_Balloc>
 800ff42:	4606      	mov	r6, r0
 800ff44:	b928      	cbnz	r0, 800ff52 <_dtoa_r+0x97a>
 800ff46:	4b84      	ldr	r3, [pc, #528]	@ (8010158 <_dtoa_r+0xb80>)
 800ff48:	4602      	mov	r2, r0
 800ff4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ff4e:	f7ff bb5a 	b.w	800f606 <_dtoa_r+0x2e>
 800ff52:	692a      	ldr	r2, [r5, #16]
 800ff54:	3202      	adds	r2, #2
 800ff56:	0092      	lsls	r2, r2, #2
 800ff58:	f105 010c 	add.w	r1, r5, #12
 800ff5c:	300c      	adds	r0, #12
 800ff5e:	f7ff fa80 	bl	800f462 <memcpy>
 800ff62:	2201      	movs	r2, #1
 800ff64:	4631      	mov	r1, r6
 800ff66:	4658      	mov	r0, fp
 800ff68:	f000 fc52 	bl	8010810 <__lshift>
 800ff6c:	f10a 0301 	add.w	r3, sl, #1
 800ff70:	9307      	str	r3, [sp, #28]
 800ff72:	9b00      	ldr	r3, [sp, #0]
 800ff74:	4453      	add	r3, sl
 800ff76:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff78:	9b02      	ldr	r3, [sp, #8]
 800ff7a:	f003 0301 	and.w	r3, r3, #1
 800ff7e:	462f      	mov	r7, r5
 800ff80:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff82:	4605      	mov	r5, r0
 800ff84:	9b07      	ldr	r3, [sp, #28]
 800ff86:	4621      	mov	r1, r4
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	4648      	mov	r0, r9
 800ff8c:	9300      	str	r3, [sp, #0]
 800ff8e:	f7ff fa9b 	bl	800f4c8 <quorem>
 800ff92:	4639      	mov	r1, r7
 800ff94:	9002      	str	r0, [sp, #8]
 800ff96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ff9a:	4648      	mov	r0, r9
 800ff9c:	f000 fca4 	bl	80108e8 <__mcmp>
 800ffa0:	462a      	mov	r2, r5
 800ffa2:	9008      	str	r0, [sp, #32]
 800ffa4:	4621      	mov	r1, r4
 800ffa6:	4658      	mov	r0, fp
 800ffa8:	f000 fcba 	bl	8010920 <__mdiff>
 800ffac:	68c2      	ldr	r2, [r0, #12]
 800ffae:	4606      	mov	r6, r0
 800ffb0:	bb02      	cbnz	r2, 800fff4 <_dtoa_r+0xa1c>
 800ffb2:	4601      	mov	r1, r0
 800ffb4:	4648      	mov	r0, r9
 800ffb6:	f000 fc97 	bl	80108e8 <__mcmp>
 800ffba:	4602      	mov	r2, r0
 800ffbc:	4631      	mov	r1, r6
 800ffbe:	4658      	mov	r0, fp
 800ffc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ffc2:	f000 fa0d 	bl	80103e0 <_Bfree>
 800ffc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ffca:	9e07      	ldr	r6, [sp, #28]
 800ffcc:	ea43 0102 	orr.w	r1, r3, r2
 800ffd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffd2:	4319      	orrs	r1, r3
 800ffd4:	d110      	bne.n	800fff8 <_dtoa_r+0xa20>
 800ffd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ffda:	d029      	beq.n	8010030 <_dtoa_r+0xa58>
 800ffdc:	9b08      	ldr	r3, [sp, #32]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	dd02      	ble.n	800ffe8 <_dtoa_r+0xa10>
 800ffe2:	9b02      	ldr	r3, [sp, #8]
 800ffe4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ffe8:	9b00      	ldr	r3, [sp, #0]
 800ffea:	f883 8000 	strb.w	r8, [r3]
 800ffee:	e63f      	b.n	800fc70 <_dtoa_r+0x698>
 800fff0:	4628      	mov	r0, r5
 800fff2:	e7bb      	b.n	800ff6c <_dtoa_r+0x994>
 800fff4:	2201      	movs	r2, #1
 800fff6:	e7e1      	b.n	800ffbc <_dtoa_r+0x9e4>
 800fff8:	9b08      	ldr	r3, [sp, #32]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	db04      	blt.n	8010008 <_dtoa_r+0xa30>
 800fffe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010000:	430b      	orrs	r3, r1
 8010002:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010004:	430b      	orrs	r3, r1
 8010006:	d120      	bne.n	801004a <_dtoa_r+0xa72>
 8010008:	2a00      	cmp	r2, #0
 801000a:	dded      	ble.n	800ffe8 <_dtoa_r+0xa10>
 801000c:	4649      	mov	r1, r9
 801000e:	2201      	movs	r2, #1
 8010010:	4658      	mov	r0, fp
 8010012:	f000 fbfd 	bl	8010810 <__lshift>
 8010016:	4621      	mov	r1, r4
 8010018:	4681      	mov	r9, r0
 801001a:	f000 fc65 	bl	80108e8 <__mcmp>
 801001e:	2800      	cmp	r0, #0
 8010020:	dc03      	bgt.n	801002a <_dtoa_r+0xa52>
 8010022:	d1e1      	bne.n	800ffe8 <_dtoa_r+0xa10>
 8010024:	f018 0f01 	tst.w	r8, #1
 8010028:	d0de      	beq.n	800ffe8 <_dtoa_r+0xa10>
 801002a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801002e:	d1d8      	bne.n	800ffe2 <_dtoa_r+0xa0a>
 8010030:	9a00      	ldr	r2, [sp, #0]
 8010032:	2339      	movs	r3, #57	@ 0x39
 8010034:	7013      	strb	r3, [r2, #0]
 8010036:	4633      	mov	r3, r6
 8010038:	461e      	mov	r6, r3
 801003a:	3b01      	subs	r3, #1
 801003c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010040:	2a39      	cmp	r2, #57	@ 0x39
 8010042:	d052      	beq.n	80100ea <_dtoa_r+0xb12>
 8010044:	3201      	adds	r2, #1
 8010046:	701a      	strb	r2, [r3, #0]
 8010048:	e612      	b.n	800fc70 <_dtoa_r+0x698>
 801004a:	2a00      	cmp	r2, #0
 801004c:	dd07      	ble.n	801005e <_dtoa_r+0xa86>
 801004e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010052:	d0ed      	beq.n	8010030 <_dtoa_r+0xa58>
 8010054:	9a00      	ldr	r2, [sp, #0]
 8010056:	f108 0301 	add.w	r3, r8, #1
 801005a:	7013      	strb	r3, [r2, #0]
 801005c:	e608      	b.n	800fc70 <_dtoa_r+0x698>
 801005e:	9b07      	ldr	r3, [sp, #28]
 8010060:	9a07      	ldr	r2, [sp, #28]
 8010062:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010068:	4293      	cmp	r3, r2
 801006a:	d028      	beq.n	80100be <_dtoa_r+0xae6>
 801006c:	4649      	mov	r1, r9
 801006e:	2300      	movs	r3, #0
 8010070:	220a      	movs	r2, #10
 8010072:	4658      	mov	r0, fp
 8010074:	f000 f9d6 	bl	8010424 <__multadd>
 8010078:	42af      	cmp	r7, r5
 801007a:	4681      	mov	r9, r0
 801007c:	f04f 0300 	mov.w	r3, #0
 8010080:	f04f 020a 	mov.w	r2, #10
 8010084:	4639      	mov	r1, r7
 8010086:	4658      	mov	r0, fp
 8010088:	d107      	bne.n	801009a <_dtoa_r+0xac2>
 801008a:	f000 f9cb 	bl	8010424 <__multadd>
 801008e:	4607      	mov	r7, r0
 8010090:	4605      	mov	r5, r0
 8010092:	9b07      	ldr	r3, [sp, #28]
 8010094:	3301      	adds	r3, #1
 8010096:	9307      	str	r3, [sp, #28]
 8010098:	e774      	b.n	800ff84 <_dtoa_r+0x9ac>
 801009a:	f000 f9c3 	bl	8010424 <__multadd>
 801009e:	4629      	mov	r1, r5
 80100a0:	4607      	mov	r7, r0
 80100a2:	2300      	movs	r3, #0
 80100a4:	220a      	movs	r2, #10
 80100a6:	4658      	mov	r0, fp
 80100a8:	f000 f9bc 	bl	8010424 <__multadd>
 80100ac:	4605      	mov	r5, r0
 80100ae:	e7f0      	b.n	8010092 <_dtoa_r+0xaba>
 80100b0:	9b00      	ldr	r3, [sp, #0]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	bfcc      	ite	gt
 80100b6:	461e      	movgt	r6, r3
 80100b8:	2601      	movle	r6, #1
 80100ba:	4456      	add	r6, sl
 80100bc:	2700      	movs	r7, #0
 80100be:	4649      	mov	r1, r9
 80100c0:	2201      	movs	r2, #1
 80100c2:	4658      	mov	r0, fp
 80100c4:	f000 fba4 	bl	8010810 <__lshift>
 80100c8:	4621      	mov	r1, r4
 80100ca:	4681      	mov	r9, r0
 80100cc:	f000 fc0c 	bl	80108e8 <__mcmp>
 80100d0:	2800      	cmp	r0, #0
 80100d2:	dcb0      	bgt.n	8010036 <_dtoa_r+0xa5e>
 80100d4:	d102      	bne.n	80100dc <_dtoa_r+0xb04>
 80100d6:	f018 0f01 	tst.w	r8, #1
 80100da:	d1ac      	bne.n	8010036 <_dtoa_r+0xa5e>
 80100dc:	4633      	mov	r3, r6
 80100de:	461e      	mov	r6, r3
 80100e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100e4:	2a30      	cmp	r2, #48	@ 0x30
 80100e6:	d0fa      	beq.n	80100de <_dtoa_r+0xb06>
 80100e8:	e5c2      	b.n	800fc70 <_dtoa_r+0x698>
 80100ea:	459a      	cmp	sl, r3
 80100ec:	d1a4      	bne.n	8010038 <_dtoa_r+0xa60>
 80100ee:	9b04      	ldr	r3, [sp, #16]
 80100f0:	3301      	adds	r3, #1
 80100f2:	9304      	str	r3, [sp, #16]
 80100f4:	2331      	movs	r3, #49	@ 0x31
 80100f6:	f88a 3000 	strb.w	r3, [sl]
 80100fa:	e5b9      	b.n	800fc70 <_dtoa_r+0x698>
 80100fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80100fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801015c <_dtoa_r+0xb84>
 8010102:	b11b      	cbz	r3, 801010c <_dtoa_r+0xb34>
 8010104:	f10a 0308 	add.w	r3, sl, #8
 8010108:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801010a:	6013      	str	r3, [r2, #0]
 801010c:	4650      	mov	r0, sl
 801010e:	b019      	add	sp, #100	@ 0x64
 8010110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010116:	2b01      	cmp	r3, #1
 8010118:	f77f ae37 	ble.w	800fd8a <_dtoa_r+0x7b2>
 801011c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801011e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010120:	2001      	movs	r0, #1
 8010122:	e655      	b.n	800fdd0 <_dtoa_r+0x7f8>
 8010124:	9b00      	ldr	r3, [sp, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	f77f aed6 	ble.w	800fed8 <_dtoa_r+0x900>
 801012c:	4656      	mov	r6, sl
 801012e:	4621      	mov	r1, r4
 8010130:	4648      	mov	r0, r9
 8010132:	f7ff f9c9 	bl	800f4c8 <quorem>
 8010136:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801013a:	f806 8b01 	strb.w	r8, [r6], #1
 801013e:	9b00      	ldr	r3, [sp, #0]
 8010140:	eba6 020a 	sub.w	r2, r6, sl
 8010144:	4293      	cmp	r3, r2
 8010146:	ddb3      	ble.n	80100b0 <_dtoa_r+0xad8>
 8010148:	4649      	mov	r1, r9
 801014a:	2300      	movs	r3, #0
 801014c:	220a      	movs	r2, #10
 801014e:	4658      	mov	r0, fp
 8010150:	f000 f968 	bl	8010424 <__multadd>
 8010154:	4681      	mov	r9, r0
 8010156:	e7ea      	b.n	801012e <_dtoa_r+0xb56>
 8010158:	080136d7 	.word	0x080136d7
 801015c:	08013672 	.word	0x08013672

08010160 <_free_r>:
 8010160:	b538      	push	{r3, r4, r5, lr}
 8010162:	4605      	mov	r5, r0
 8010164:	2900      	cmp	r1, #0
 8010166:	d041      	beq.n	80101ec <_free_r+0x8c>
 8010168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801016c:	1f0c      	subs	r4, r1, #4
 801016e:	2b00      	cmp	r3, #0
 8010170:	bfb8      	it	lt
 8010172:	18e4      	addlt	r4, r4, r3
 8010174:	f000 f8e8 	bl	8010348 <__malloc_lock>
 8010178:	4a1d      	ldr	r2, [pc, #116]	@ (80101f0 <_free_r+0x90>)
 801017a:	6813      	ldr	r3, [r2, #0]
 801017c:	b933      	cbnz	r3, 801018c <_free_r+0x2c>
 801017e:	6063      	str	r3, [r4, #4]
 8010180:	6014      	str	r4, [r2, #0]
 8010182:	4628      	mov	r0, r5
 8010184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010188:	f000 b8e4 	b.w	8010354 <__malloc_unlock>
 801018c:	42a3      	cmp	r3, r4
 801018e:	d908      	bls.n	80101a2 <_free_r+0x42>
 8010190:	6820      	ldr	r0, [r4, #0]
 8010192:	1821      	adds	r1, r4, r0
 8010194:	428b      	cmp	r3, r1
 8010196:	bf01      	itttt	eq
 8010198:	6819      	ldreq	r1, [r3, #0]
 801019a:	685b      	ldreq	r3, [r3, #4]
 801019c:	1809      	addeq	r1, r1, r0
 801019e:	6021      	streq	r1, [r4, #0]
 80101a0:	e7ed      	b.n	801017e <_free_r+0x1e>
 80101a2:	461a      	mov	r2, r3
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	b10b      	cbz	r3, 80101ac <_free_r+0x4c>
 80101a8:	42a3      	cmp	r3, r4
 80101aa:	d9fa      	bls.n	80101a2 <_free_r+0x42>
 80101ac:	6811      	ldr	r1, [r2, #0]
 80101ae:	1850      	adds	r0, r2, r1
 80101b0:	42a0      	cmp	r0, r4
 80101b2:	d10b      	bne.n	80101cc <_free_r+0x6c>
 80101b4:	6820      	ldr	r0, [r4, #0]
 80101b6:	4401      	add	r1, r0
 80101b8:	1850      	adds	r0, r2, r1
 80101ba:	4283      	cmp	r3, r0
 80101bc:	6011      	str	r1, [r2, #0]
 80101be:	d1e0      	bne.n	8010182 <_free_r+0x22>
 80101c0:	6818      	ldr	r0, [r3, #0]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	6053      	str	r3, [r2, #4]
 80101c6:	4408      	add	r0, r1
 80101c8:	6010      	str	r0, [r2, #0]
 80101ca:	e7da      	b.n	8010182 <_free_r+0x22>
 80101cc:	d902      	bls.n	80101d4 <_free_r+0x74>
 80101ce:	230c      	movs	r3, #12
 80101d0:	602b      	str	r3, [r5, #0]
 80101d2:	e7d6      	b.n	8010182 <_free_r+0x22>
 80101d4:	6820      	ldr	r0, [r4, #0]
 80101d6:	1821      	adds	r1, r4, r0
 80101d8:	428b      	cmp	r3, r1
 80101da:	bf04      	itt	eq
 80101dc:	6819      	ldreq	r1, [r3, #0]
 80101de:	685b      	ldreq	r3, [r3, #4]
 80101e0:	6063      	str	r3, [r4, #4]
 80101e2:	bf04      	itt	eq
 80101e4:	1809      	addeq	r1, r1, r0
 80101e6:	6021      	streq	r1, [r4, #0]
 80101e8:	6054      	str	r4, [r2, #4]
 80101ea:	e7ca      	b.n	8010182 <_free_r+0x22>
 80101ec:	bd38      	pop	{r3, r4, r5, pc}
 80101ee:	bf00      	nop
 80101f0:	20003350 	.word	0x20003350

080101f4 <malloc>:
 80101f4:	4b02      	ldr	r3, [pc, #8]	@ (8010200 <malloc+0xc>)
 80101f6:	4601      	mov	r1, r0
 80101f8:	6818      	ldr	r0, [r3, #0]
 80101fa:	f000 b825 	b.w	8010248 <_malloc_r>
 80101fe:	bf00      	nop
 8010200:	200000c8 	.word	0x200000c8

08010204 <sbrk_aligned>:
 8010204:	b570      	push	{r4, r5, r6, lr}
 8010206:	4e0f      	ldr	r6, [pc, #60]	@ (8010244 <sbrk_aligned+0x40>)
 8010208:	460c      	mov	r4, r1
 801020a:	6831      	ldr	r1, [r6, #0]
 801020c:	4605      	mov	r5, r0
 801020e:	b911      	cbnz	r1, 8010216 <sbrk_aligned+0x12>
 8010210:	f001 ffd2 	bl	80121b8 <_sbrk_r>
 8010214:	6030      	str	r0, [r6, #0]
 8010216:	4621      	mov	r1, r4
 8010218:	4628      	mov	r0, r5
 801021a:	f001 ffcd 	bl	80121b8 <_sbrk_r>
 801021e:	1c43      	adds	r3, r0, #1
 8010220:	d103      	bne.n	801022a <sbrk_aligned+0x26>
 8010222:	f04f 34ff 	mov.w	r4, #4294967295
 8010226:	4620      	mov	r0, r4
 8010228:	bd70      	pop	{r4, r5, r6, pc}
 801022a:	1cc4      	adds	r4, r0, #3
 801022c:	f024 0403 	bic.w	r4, r4, #3
 8010230:	42a0      	cmp	r0, r4
 8010232:	d0f8      	beq.n	8010226 <sbrk_aligned+0x22>
 8010234:	1a21      	subs	r1, r4, r0
 8010236:	4628      	mov	r0, r5
 8010238:	f001 ffbe 	bl	80121b8 <_sbrk_r>
 801023c:	3001      	adds	r0, #1
 801023e:	d1f2      	bne.n	8010226 <sbrk_aligned+0x22>
 8010240:	e7ef      	b.n	8010222 <sbrk_aligned+0x1e>
 8010242:	bf00      	nop
 8010244:	2000334c 	.word	0x2000334c

08010248 <_malloc_r>:
 8010248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801024c:	1ccd      	adds	r5, r1, #3
 801024e:	f025 0503 	bic.w	r5, r5, #3
 8010252:	3508      	adds	r5, #8
 8010254:	2d0c      	cmp	r5, #12
 8010256:	bf38      	it	cc
 8010258:	250c      	movcc	r5, #12
 801025a:	2d00      	cmp	r5, #0
 801025c:	4606      	mov	r6, r0
 801025e:	db01      	blt.n	8010264 <_malloc_r+0x1c>
 8010260:	42a9      	cmp	r1, r5
 8010262:	d904      	bls.n	801026e <_malloc_r+0x26>
 8010264:	230c      	movs	r3, #12
 8010266:	6033      	str	r3, [r6, #0]
 8010268:	2000      	movs	r0, #0
 801026a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801026e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010344 <_malloc_r+0xfc>
 8010272:	f000 f869 	bl	8010348 <__malloc_lock>
 8010276:	f8d8 3000 	ldr.w	r3, [r8]
 801027a:	461c      	mov	r4, r3
 801027c:	bb44      	cbnz	r4, 80102d0 <_malloc_r+0x88>
 801027e:	4629      	mov	r1, r5
 8010280:	4630      	mov	r0, r6
 8010282:	f7ff ffbf 	bl	8010204 <sbrk_aligned>
 8010286:	1c43      	adds	r3, r0, #1
 8010288:	4604      	mov	r4, r0
 801028a:	d158      	bne.n	801033e <_malloc_r+0xf6>
 801028c:	f8d8 4000 	ldr.w	r4, [r8]
 8010290:	4627      	mov	r7, r4
 8010292:	2f00      	cmp	r7, #0
 8010294:	d143      	bne.n	801031e <_malloc_r+0xd6>
 8010296:	2c00      	cmp	r4, #0
 8010298:	d04b      	beq.n	8010332 <_malloc_r+0xea>
 801029a:	6823      	ldr	r3, [r4, #0]
 801029c:	4639      	mov	r1, r7
 801029e:	4630      	mov	r0, r6
 80102a0:	eb04 0903 	add.w	r9, r4, r3
 80102a4:	f001 ff88 	bl	80121b8 <_sbrk_r>
 80102a8:	4581      	cmp	r9, r0
 80102aa:	d142      	bne.n	8010332 <_malloc_r+0xea>
 80102ac:	6821      	ldr	r1, [r4, #0]
 80102ae:	1a6d      	subs	r5, r5, r1
 80102b0:	4629      	mov	r1, r5
 80102b2:	4630      	mov	r0, r6
 80102b4:	f7ff ffa6 	bl	8010204 <sbrk_aligned>
 80102b8:	3001      	adds	r0, #1
 80102ba:	d03a      	beq.n	8010332 <_malloc_r+0xea>
 80102bc:	6823      	ldr	r3, [r4, #0]
 80102be:	442b      	add	r3, r5
 80102c0:	6023      	str	r3, [r4, #0]
 80102c2:	f8d8 3000 	ldr.w	r3, [r8]
 80102c6:	685a      	ldr	r2, [r3, #4]
 80102c8:	bb62      	cbnz	r2, 8010324 <_malloc_r+0xdc>
 80102ca:	f8c8 7000 	str.w	r7, [r8]
 80102ce:	e00f      	b.n	80102f0 <_malloc_r+0xa8>
 80102d0:	6822      	ldr	r2, [r4, #0]
 80102d2:	1b52      	subs	r2, r2, r5
 80102d4:	d420      	bmi.n	8010318 <_malloc_r+0xd0>
 80102d6:	2a0b      	cmp	r2, #11
 80102d8:	d917      	bls.n	801030a <_malloc_r+0xc2>
 80102da:	1961      	adds	r1, r4, r5
 80102dc:	42a3      	cmp	r3, r4
 80102de:	6025      	str	r5, [r4, #0]
 80102e0:	bf18      	it	ne
 80102e2:	6059      	strne	r1, [r3, #4]
 80102e4:	6863      	ldr	r3, [r4, #4]
 80102e6:	bf08      	it	eq
 80102e8:	f8c8 1000 	streq.w	r1, [r8]
 80102ec:	5162      	str	r2, [r4, r5]
 80102ee:	604b      	str	r3, [r1, #4]
 80102f0:	4630      	mov	r0, r6
 80102f2:	f000 f82f 	bl	8010354 <__malloc_unlock>
 80102f6:	f104 000b 	add.w	r0, r4, #11
 80102fa:	1d23      	adds	r3, r4, #4
 80102fc:	f020 0007 	bic.w	r0, r0, #7
 8010300:	1ac2      	subs	r2, r0, r3
 8010302:	bf1c      	itt	ne
 8010304:	1a1b      	subne	r3, r3, r0
 8010306:	50a3      	strne	r3, [r4, r2]
 8010308:	e7af      	b.n	801026a <_malloc_r+0x22>
 801030a:	6862      	ldr	r2, [r4, #4]
 801030c:	42a3      	cmp	r3, r4
 801030e:	bf0c      	ite	eq
 8010310:	f8c8 2000 	streq.w	r2, [r8]
 8010314:	605a      	strne	r2, [r3, #4]
 8010316:	e7eb      	b.n	80102f0 <_malloc_r+0xa8>
 8010318:	4623      	mov	r3, r4
 801031a:	6864      	ldr	r4, [r4, #4]
 801031c:	e7ae      	b.n	801027c <_malloc_r+0x34>
 801031e:	463c      	mov	r4, r7
 8010320:	687f      	ldr	r7, [r7, #4]
 8010322:	e7b6      	b.n	8010292 <_malloc_r+0x4a>
 8010324:	461a      	mov	r2, r3
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	42a3      	cmp	r3, r4
 801032a:	d1fb      	bne.n	8010324 <_malloc_r+0xdc>
 801032c:	2300      	movs	r3, #0
 801032e:	6053      	str	r3, [r2, #4]
 8010330:	e7de      	b.n	80102f0 <_malloc_r+0xa8>
 8010332:	230c      	movs	r3, #12
 8010334:	6033      	str	r3, [r6, #0]
 8010336:	4630      	mov	r0, r6
 8010338:	f000 f80c 	bl	8010354 <__malloc_unlock>
 801033c:	e794      	b.n	8010268 <_malloc_r+0x20>
 801033e:	6005      	str	r5, [r0, #0]
 8010340:	e7d6      	b.n	80102f0 <_malloc_r+0xa8>
 8010342:	bf00      	nop
 8010344:	20003350 	.word	0x20003350

08010348 <__malloc_lock>:
 8010348:	4801      	ldr	r0, [pc, #4]	@ (8010350 <__malloc_lock+0x8>)
 801034a:	f7ff b888 	b.w	800f45e <__retarget_lock_acquire_recursive>
 801034e:	bf00      	nop
 8010350:	20003348 	.word	0x20003348

08010354 <__malloc_unlock>:
 8010354:	4801      	ldr	r0, [pc, #4]	@ (801035c <__malloc_unlock+0x8>)
 8010356:	f7ff b883 	b.w	800f460 <__retarget_lock_release_recursive>
 801035a:	bf00      	nop
 801035c:	20003348 	.word	0x20003348

08010360 <_Balloc>:
 8010360:	b570      	push	{r4, r5, r6, lr}
 8010362:	69c6      	ldr	r6, [r0, #28]
 8010364:	4604      	mov	r4, r0
 8010366:	460d      	mov	r5, r1
 8010368:	b976      	cbnz	r6, 8010388 <_Balloc+0x28>
 801036a:	2010      	movs	r0, #16
 801036c:	f7ff ff42 	bl	80101f4 <malloc>
 8010370:	4602      	mov	r2, r0
 8010372:	61e0      	str	r0, [r4, #28]
 8010374:	b920      	cbnz	r0, 8010380 <_Balloc+0x20>
 8010376:	4b18      	ldr	r3, [pc, #96]	@ (80103d8 <_Balloc+0x78>)
 8010378:	4818      	ldr	r0, [pc, #96]	@ (80103dc <_Balloc+0x7c>)
 801037a:	216b      	movs	r1, #107	@ 0x6b
 801037c:	f7ff f886 	bl	800f48c <__assert_func>
 8010380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010384:	6006      	str	r6, [r0, #0]
 8010386:	60c6      	str	r6, [r0, #12]
 8010388:	69e6      	ldr	r6, [r4, #28]
 801038a:	68f3      	ldr	r3, [r6, #12]
 801038c:	b183      	cbz	r3, 80103b0 <_Balloc+0x50>
 801038e:	69e3      	ldr	r3, [r4, #28]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010396:	b9b8      	cbnz	r0, 80103c8 <_Balloc+0x68>
 8010398:	2101      	movs	r1, #1
 801039a:	fa01 f605 	lsl.w	r6, r1, r5
 801039e:	1d72      	adds	r2, r6, #5
 80103a0:	0092      	lsls	r2, r2, #2
 80103a2:	4620      	mov	r0, r4
 80103a4:	f001 ff27 	bl	80121f6 <_calloc_r>
 80103a8:	b160      	cbz	r0, 80103c4 <_Balloc+0x64>
 80103aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80103ae:	e00e      	b.n	80103ce <_Balloc+0x6e>
 80103b0:	2221      	movs	r2, #33	@ 0x21
 80103b2:	2104      	movs	r1, #4
 80103b4:	4620      	mov	r0, r4
 80103b6:	f001 ff1e 	bl	80121f6 <_calloc_r>
 80103ba:	69e3      	ldr	r3, [r4, #28]
 80103bc:	60f0      	str	r0, [r6, #12]
 80103be:	68db      	ldr	r3, [r3, #12]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d1e4      	bne.n	801038e <_Balloc+0x2e>
 80103c4:	2000      	movs	r0, #0
 80103c6:	bd70      	pop	{r4, r5, r6, pc}
 80103c8:	6802      	ldr	r2, [r0, #0]
 80103ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80103ce:	2300      	movs	r3, #0
 80103d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80103d4:	e7f7      	b.n	80103c6 <_Balloc+0x66>
 80103d6:	bf00      	nop
 80103d8:	080135c5 	.word	0x080135c5
 80103dc:	080136e8 	.word	0x080136e8

080103e0 <_Bfree>:
 80103e0:	b570      	push	{r4, r5, r6, lr}
 80103e2:	69c6      	ldr	r6, [r0, #28]
 80103e4:	4605      	mov	r5, r0
 80103e6:	460c      	mov	r4, r1
 80103e8:	b976      	cbnz	r6, 8010408 <_Bfree+0x28>
 80103ea:	2010      	movs	r0, #16
 80103ec:	f7ff ff02 	bl	80101f4 <malloc>
 80103f0:	4602      	mov	r2, r0
 80103f2:	61e8      	str	r0, [r5, #28]
 80103f4:	b920      	cbnz	r0, 8010400 <_Bfree+0x20>
 80103f6:	4b09      	ldr	r3, [pc, #36]	@ (801041c <_Bfree+0x3c>)
 80103f8:	4809      	ldr	r0, [pc, #36]	@ (8010420 <_Bfree+0x40>)
 80103fa:	218f      	movs	r1, #143	@ 0x8f
 80103fc:	f7ff f846 	bl	800f48c <__assert_func>
 8010400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010404:	6006      	str	r6, [r0, #0]
 8010406:	60c6      	str	r6, [r0, #12]
 8010408:	b13c      	cbz	r4, 801041a <_Bfree+0x3a>
 801040a:	69eb      	ldr	r3, [r5, #28]
 801040c:	6862      	ldr	r2, [r4, #4]
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010414:	6021      	str	r1, [r4, #0]
 8010416:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801041a:	bd70      	pop	{r4, r5, r6, pc}
 801041c:	080135c5 	.word	0x080135c5
 8010420:	080136e8 	.word	0x080136e8

08010424 <__multadd>:
 8010424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010428:	690d      	ldr	r5, [r1, #16]
 801042a:	4607      	mov	r7, r0
 801042c:	460c      	mov	r4, r1
 801042e:	461e      	mov	r6, r3
 8010430:	f101 0c14 	add.w	ip, r1, #20
 8010434:	2000      	movs	r0, #0
 8010436:	f8dc 3000 	ldr.w	r3, [ip]
 801043a:	b299      	uxth	r1, r3
 801043c:	fb02 6101 	mla	r1, r2, r1, r6
 8010440:	0c1e      	lsrs	r6, r3, #16
 8010442:	0c0b      	lsrs	r3, r1, #16
 8010444:	fb02 3306 	mla	r3, r2, r6, r3
 8010448:	b289      	uxth	r1, r1
 801044a:	3001      	adds	r0, #1
 801044c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010450:	4285      	cmp	r5, r0
 8010452:	f84c 1b04 	str.w	r1, [ip], #4
 8010456:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801045a:	dcec      	bgt.n	8010436 <__multadd+0x12>
 801045c:	b30e      	cbz	r6, 80104a2 <__multadd+0x7e>
 801045e:	68a3      	ldr	r3, [r4, #8]
 8010460:	42ab      	cmp	r3, r5
 8010462:	dc19      	bgt.n	8010498 <__multadd+0x74>
 8010464:	6861      	ldr	r1, [r4, #4]
 8010466:	4638      	mov	r0, r7
 8010468:	3101      	adds	r1, #1
 801046a:	f7ff ff79 	bl	8010360 <_Balloc>
 801046e:	4680      	mov	r8, r0
 8010470:	b928      	cbnz	r0, 801047e <__multadd+0x5a>
 8010472:	4602      	mov	r2, r0
 8010474:	4b0c      	ldr	r3, [pc, #48]	@ (80104a8 <__multadd+0x84>)
 8010476:	480d      	ldr	r0, [pc, #52]	@ (80104ac <__multadd+0x88>)
 8010478:	21ba      	movs	r1, #186	@ 0xba
 801047a:	f7ff f807 	bl	800f48c <__assert_func>
 801047e:	6922      	ldr	r2, [r4, #16]
 8010480:	3202      	adds	r2, #2
 8010482:	f104 010c 	add.w	r1, r4, #12
 8010486:	0092      	lsls	r2, r2, #2
 8010488:	300c      	adds	r0, #12
 801048a:	f7fe ffea 	bl	800f462 <memcpy>
 801048e:	4621      	mov	r1, r4
 8010490:	4638      	mov	r0, r7
 8010492:	f7ff ffa5 	bl	80103e0 <_Bfree>
 8010496:	4644      	mov	r4, r8
 8010498:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801049c:	3501      	adds	r5, #1
 801049e:	615e      	str	r6, [r3, #20]
 80104a0:	6125      	str	r5, [r4, #16]
 80104a2:	4620      	mov	r0, r4
 80104a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104a8:	080136d7 	.word	0x080136d7
 80104ac:	080136e8 	.word	0x080136e8

080104b0 <__s2b>:
 80104b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104b4:	460c      	mov	r4, r1
 80104b6:	4615      	mov	r5, r2
 80104b8:	461f      	mov	r7, r3
 80104ba:	2209      	movs	r2, #9
 80104bc:	3308      	adds	r3, #8
 80104be:	4606      	mov	r6, r0
 80104c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80104c4:	2100      	movs	r1, #0
 80104c6:	2201      	movs	r2, #1
 80104c8:	429a      	cmp	r2, r3
 80104ca:	db09      	blt.n	80104e0 <__s2b+0x30>
 80104cc:	4630      	mov	r0, r6
 80104ce:	f7ff ff47 	bl	8010360 <_Balloc>
 80104d2:	b940      	cbnz	r0, 80104e6 <__s2b+0x36>
 80104d4:	4602      	mov	r2, r0
 80104d6:	4b19      	ldr	r3, [pc, #100]	@ (801053c <__s2b+0x8c>)
 80104d8:	4819      	ldr	r0, [pc, #100]	@ (8010540 <__s2b+0x90>)
 80104da:	21d3      	movs	r1, #211	@ 0xd3
 80104dc:	f7fe ffd6 	bl	800f48c <__assert_func>
 80104e0:	0052      	lsls	r2, r2, #1
 80104e2:	3101      	adds	r1, #1
 80104e4:	e7f0      	b.n	80104c8 <__s2b+0x18>
 80104e6:	9b08      	ldr	r3, [sp, #32]
 80104e8:	6143      	str	r3, [r0, #20]
 80104ea:	2d09      	cmp	r5, #9
 80104ec:	f04f 0301 	mov.w	r3, #1
 80104f0:	6103      	str	r3, [r0, #16]
 80104f2:	dd16      	ble.n	8010522 <__s2b+0x72>
 80104f4:	f104 0909 	add.w	r9, r4, #9
 80104f8:	46c8      	mov	r8, r9
 80104fa:	442c      	add	r4, r5
 80104fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010500:	4601      	mov	r1, r0
 8010502:	3b30      	subs	r3, #48	@ 0x30
 8010504:	220a      	movs	r2, #10
 8010506:	4630      	mov	r0, r6
 8010508:	f7ff ff8c 	bl	8010424 <__multadd>
 801050c:	45a0      	cmp	r8, r4
 801050e:	d1f5      	bne.n	80104fc <__s2b+0x4c>
 8010510:	f1a5 0408 	sub.w	r4, r5, #8
 8010514:	444c      	add	r4, r9
 8010516:	1b2d      	subs	r5, r5, r4
 8010518:	1963      	adds	r3, r4, r5
 801051a:	42bb      	cmp	r3, r7
 801051c:	db04      	blt.n	8010528 <__s2b+0x78>
 801051e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010522:	340a      	adds	r4, #10
 8010524:	2509      	movs	r5, #9
 8010526:	e7f6      	b.n	8010516 <__s2b+0x66>
 8010528:	f814 3b01 	ldrb.w	r3, [r4], #1
 801052c:	4601      	mov	r1, r0
 801052e:	3b30      	subs	r3, #48	@ 0x30
 8010530:	220a      	movs	r2, #10
 8010532:	4630      	mov	r0, r6
 8010534:	f7ff ff76 	bl	8010424 <__multadd>
 8010538:	e7ee      	b.n	8010518 <__s2b+0x68>
 801053a:	bf00      	nop
 801053c:	080136d7 	.word	0x080136d7
 8010540:	080136e8 	.word	0x080136e8

08010544 <__hi0bits>:
 8010544:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010548:	4603      	mov	r3, r0
 801054a:	bf36      	itet	cc
 801054c:	0403      	lslcc	r3, r0, #16
 801054e:	2000      	movcs	r0, #0
 8010550:	2010      	movcc	r0, #16
 8010552:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010556:	bf3c      	itt	cc
 8010558:	021b      	lslcc	r3, r3, #8
 801055a:	3008      	addcc	r0, #8
 801055c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010560:	bf3c      	itt	cc
 8010562:	011b      	lslcc	r3, r3, #4
 8010564:	3004      	addcc	r0, #4
 8010566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801056a:	bf3c      	itt	cc
 801056c:	009b      	lslcc	r3, r3, #2
 801056e:	3002      	addcc	r0, #2
 8010570:	2b00      	cmp	r3, #0
 8010572:	db05      	blt.n	8010580 <__hi0bits+0x3c>
 8010574:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010578:	f100 0001 	add.w	r0, r0, #1
 801057c:	bf08      	it	eq
 801057e:	2020      	moveq	r0, #32
 8010580:	4770      	bx	lr

08010582 <__lo0bits>:
 8010582:	6803      	ldr	r3, [r0, #0]
 8010584:	4602      	mov	r2, r0
 8010586:	f013 0007 	ands.w	r0, r3, #7
 801058a:	d00b      	beq.n	80105a4 <__lo0bits+0x22>
 801058c:	07d9      	lsls	r1, r3, #31
 801058e:	d421      	bmi.n	80105d4 <__lo0bits+0x52>
 8010590:	0798      	lsls	r0, r3, #30
 8010592:	bf49      	itett	mi
 8010594:	085b      	lsrmi	r3, r3, #1
 8010596:	089b      	lsrpl	r3, r3, #2
 8010598:	2001      	movmi	r0, #1
 801059a:	6013      	strmi	r3, [r2, #0]
 801059c:	bf5c      	itt	pl
 801059e:	6013      	strpl	r3, [r2, #0]
 80105a0:	2002      	movpl	r0, #2
 80105a2:	4770      	bx	lr
 80105a4:	b299      	uxth	r1, r3
 80105a6:	b909      	cbnz	r1, 80105ac <__lo0bits+0x2a>
 80105a8:	0c1b      	lsrs	r3, r3, #16
 80105aa:	2010      	movs	r0, #16
 80105ac:	b2d9      	uxtb	r1, r3
 80105ae:	b909      	cbnz	r1, 80105b4 <__lo0bits+0x32>
 80105b0:	3008      	adds	r0, #8
 80105b2:	0a1b      	lsrs	r3, r3, #8
 80105b4:	0719      	lsls	r1, r3, #28
 80105b6:	bf04      	itt	eq
 80105b8:	091b      	lsreq	r3, r3, #4
 80105ba:	3004      	addeq	r0, #4
 80105bc:	0799      	lsls	r1, r3, #30
 80105be:	bf04      	itt	eq
 80105c0:	089b      	lsreq	r3, r3, #2
 80105c2:	3002      	addeq	r0, #2
 80105c4:	07d9      	lsls	r1, r3, #31
 80105c6:	d403      	bmi.n	80105d0 <__lo0bits+0x4e>
 80105c8:	085b      	lsrs	r3, r3, #1
 80105ca:	f100 0001 	add.w	r0, r0, #1
 80105ce:	d003      	beq.n	80105d8 <__lo0bits+0x56>
 80105d0:	6013      	str	r3, [r2, #0]
 80105d2:	4770      	bx	lr
 80105d4:	2000      	movs	r0, #0
 80105d6:	4770      	bx	lr
 80105d8:	2020      	movs	r0, #32
 80105da:	4770      	bx	lr

080105dc <__i2b>:
 80105dc:	b510      	push	{r4, lr}
 80105de:	460c      	mov	r4, r1
 80105e0:	2101      	movs	r1, #1
 80105e2:	f7ff febd 	bl	8010360 <_Balloc>
 80105e6:	4602      	mov	r2, r0
 80105e8:	b928      	cbnz	r0, 80105f6 <__i2b+0x1a>
 80105ea:	4b05      	ldr	r3, [pc, #20]	@ (8010600 <__i2b+0x24>)
 80105ec:	4805      	ldr	r0, [pc, #20]	@ (8010604 <__i2b+0x28>)
 80105ee:	f240 1145 	movw	r1, #325	@ 0x145
 80105f2:	f7fe ff4b 	bl	800f48c <__assert_func>
 80105f6:	2301      	movs	r3, #1
 80105f8:	6144      	str	r4, [r0, #20]
 80105fa:	6103      	str	r3, [r0, #16]
 80105fc:	bd10      	pop	{r4, pc}
 80105fe:	bf00      	nop
 8010600:	080136d7 	.word	0x080136d7
 8010604:	080136e8 	.word	0x080136e8

08010608 <__multiply>:
 8010608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	4614      	mov	r4, r2
 801060e:	690a      	ldr	r2, [r1, #16]
 8010610:	6923      	ldr	r3, [r4, #16]
 8010612:	429a      	cmp	r2, r3
 8010614:	bfa8      	it	ge
 8010616:	4623      	movge	r3, r4
 8010618:	460f      	mov	r7, r1
 801061a:	bfa4      	itt	ge
 801061c:	460c      	movge	r4, r1
 801061e:	461f      	movge	r7, r3
 8010620:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010624:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010628:	68a3      	ldr	r3, [r4, #8]
 801062a:	6861      	ldr	r1, [r4, #4]
 801062c:	eb0a 0609 	add.w	r6, sl, r9
 8010630:	42b3      	cmp	r3, r6
 8010632:	b085      	sub	sp, #20
 8010634:	bfb8      	it	lt
 8010636:	3101      	addlt	r1, #1
 8010638:	f7ff fe92 	bl	8010360 <_Balloc>
 801063c:	b930      	cbnz	r0, 801064c <__multiply+0x44>
 801063e:	4602      	mov	r2, r0
 8010640:	4b44      	ldr	r3, [pc, #272]	@ (8010754 <__multiply+0x14c>)
 8010642:	4845      	ldr	r0, [pc, #276]	@ (8010758 <__multiply+0x150>)
 8010644:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010648:	f7fe ff20 	bl	800f48c <__assert_func>
 801064c:	f100 0514 	add.w	r5, r0, #20
 8010650:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010654:	462b      	mov	r3, r5
 8010656:	2200      	movs	r2, #0
 8010658:	4543      	cmp	r3, r8
 801065a:	d321      	bcc.n	80106a0 <__multiply+0x98>
 801065c:	f107 0114 	add.w	r1, r7, #20
 8010660:	f104 0214 	add.w	r2, r4, #20
 8010664:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010668:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801066c:	9302      	str	r3, [sp, #8]
 801066e:	1b13      	subs	r3, r2, r4
 8010670:	3b15      	subs	r3, #21
 8010672:	f023 0303 	bic.w	r3, r3, #3
 8010676:	3304      	adds	r3, #4
 8010678:	f104 0715 	add.w	r7, r4, #21
 801067c:	42ba      	cmp	r2, r7
 801067e:	bf38      	it	cc
 8010680:	2304      	movcc	r3, #4
 8010682:	9301      	str	r3, [sp, #4]
 8010684:	9b02      	ldr	r3, [sp, #8]
 8010686:	9103      	str	r1, [sp, #12]
 8010688:	428b      	cmp	r3, r1
 801068a:	d80c      	bhi.n	80106a6 <__multiply+0x9e>
 801068c:	2e00      	cmp	r6, #0
 801068e:	dd03      	ble.n	8010698 <__multiply+0x90>
 8010690:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010694:	2b00      	cmp	r3, #0
 8010696:	d05b      	beq.n	8010750 <__multiply+0x148>
 8010698:	6106      	str	r6, [r0, #16]
 801069a:	b005      	add	sp, #20
 801069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a0:	f843 2b04 	str.w	r2, [r3], #4
 80106a4:	e7d8      	b.n	8010658 <__multiply+0x50>
 80106a6:	f8b1 a000 	ldrh.w	sl, [r1]
 80106aa:	f1ba 0f00 	cmp.w	sl, #0
 80106ae:	d024      	beq.n	80106fa <__multiply+0xf2>
 80106b0:	f104 0e14 	add.w	lr, r4, #20
 80106b4:	46a9      	mov	r9, r5
 80106b6:	f04f 0c00 	mov.w	ip, #0
 80106ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80106be:	f8d9 3000 	ldr.w	r3, [r9]
 80106c2:	fa1f fb87 	uxth.w	fp, r7
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	fb0a 330b 	mla	r3, sl, fp, r3
 80106cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80106d0:	f8d9 7000 	ldr.w	r7, [r9]
 80106d4:	4463      	add	r3, ip
 80106d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80106da:	fb0a c70b 	mla	r7, sl, fp, ip
 80106de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80106e8:	4572      	cmp	r2, lr
 80106ea:	f849 3b04 	str.w	r3, [r9], #4
 80106ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80106f2:	d8e2      	bhi.n	80106ba <__multiply+0xb2>
 80106f4:	9b01      	ldr	r3, [sp, #4]
 80106f6:	f845 c003 	str.w	ip, [r5, r3]
 80106fa:	9b03      	ldr	r3, [sp, #12]
 80106fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010700:	3104      	adds	r1, #4
 8010702:	f1b9 0f00 	cmp.w	r9, #0
 8010706:	d021      	beq.n	801074c <__multiply+0x144>
 8010708:	682b      	ldr	r3, [r5, #0]
 801070a:	f104 0c14 	add.w	ip, r4, #20
 801070e:	46ae      	mov	lr, r5
 8010710:	f04f 0a00 	mov.w	sl, #0
 8010714:	f8bc b000 	ldrh.w	fp, [ip]
 8010718:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801071c:	fb09 770b 	mla	r7, r9, fp, r7
 8010720:	4457      	add	r7, sl
 8010722:	b29b      	uxth	r3, r3
 8010724:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010728:	f84e 3b04 	str.w	r3, [lr], #4
 801072c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010730:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010734:	f8be 3000 	ldrh.w	r3, [lr]
 8010738:	fb09 330a 	mla	r3, r9, sl, r3
 801073c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010740:	4562      	cmp	r2, ip
 8010742:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010746:	d8e5      	bhi.n	8010714 <__multiply+0x10c>
 8010748:	9f01      	ldr	r7, [sp, #4]
 801074a:	51eb      	str	r3, [r5, r7]
 801074c:	3504      	adds	r5, #4
 801074e:	e799      	b.n	8010684 <__multiply+0x7c>
 8010750:	3e01      	subs	r6, #1
 8010752:	e79b      	b.n	801068c <__multiply+0x84>
 8010754:	080136d7 	.word	0x080136d7
 8010758:	080136e8 	.word	0x080136e8

0801075c <__pow5mult>:
 801075c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010760:	4615      	mov	r5, r2
 8010762:	f012 0203 	ands.w	r2, r2, #3
 8010766:	4607      	mov	r7, r0
 8010768:	460e      	mov	r6, r1
 801076a:	d007      	beq.n	801077c <__pow5mult+0x20>
 801076c:	4c25      	ldr	r4, [pc, #148]	@ (8010804 <__pow5mult+0xa8>)
 801076e:	3a01      	subs	r2, #1
 8010770:	2300      	movs	r3, #0
 8010772:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010776:	f7ff fe55 	bl	8010424 <__multadd>
 801077a:	4606      	mov	r6, r0
 801077c:	10ad      	asrs	r5, r5, #2
 801077e:	d03d      	beq.n	80107fc <__pow5mult+0xa0>
 8010780:	69fc      	ldr	r4, [r7, #28]
 8010782:	b97c      	cbnz	r4, 80107a4 <__pow5mult+0x48>
 8010784:	2010      	movs	r0, #16
 8010786:	f7ff fd35 	bl	80101f4 <malloc>
 801078a:	4602      	mov	r2, r0
 801078c:	61f8      	str	r0, [r7, #28]
 801078e:	b928      	cbnz	r0, 801079c <__pow5mult+0x40>
 8010790:	4b1d      	ldr	r3, [pc, #116]	@ (8010808 <__pow5mult+0xac>)
 8010792:	481e      	ldr	r0, [pc, #120]	@ (801080c <__pow5mult+0xb0>)
 8010794:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010798:	f7fe fe78 	bl	800f48c <__assert_func>
 801079c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80107a0:	6004      	str	r4, [r0, #0]
 80107a2:	60c4      	str	r4, [r0, #12]
 80107a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80107a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80107ac:	b94c      	cbnz	r4, 80107c2 <__pow5mult+0x66>
 80107ae:	f240 2171 	movw	r1, #625	@ 0x271
 80107b2:	4638      	mov	r0, r7
 80107b4:	f7ff ff12 	bl	80105dc <__i2b>
 80107b8:	2300      	movs	r3, #0
 80107ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80107be:	4604      	mov	r4, r0
 80107c0:	6003      	str	r3, [r0, #0]
 80107c2:	f04f 0900 	mov.w	r9, #0
 80107c6:	07eb      	lsls	r3, r5, #31
 80107c8:	d50a      	bpl.n	80107e0 <__pow5mult+0x84>
 80107ca:	4631      	mov	r1, r6
 80107cc:	4622      	mov	r2, r4
 80107ce:	4638      	mov	r0, r7
 80107d0:	f7ff ff1a 	bl	8010608 <__multiply>
 80107d4:	4631      	mov	r1, r6
 80107d6:	4680      	mov	r8, r0
 80107d8:	4638      	mov	r0, r7
 80107da:	f7ff fe01 	bl	80103e0 <_Bfree>
 80107de:	4646      	mov	r6, r8
 80107e0:	106d      	asrs	r5, r5, #1
 80107e2:	d00b      	beq.n	80107fc <__pow5mult+0xa0>
 80107e4:	6820      	ldr	r0, [r4, #0]
 80107e6:	b938      	cbnz	r0, 80107f8 <__pow5mult+0x9c>
 80107e8:	4622      	mov	r2, r4
 80107ea:	4621      	mov	r1, r4
 80107ec:	4638      	mov	r0, r7
 80107ee:	f7ff ff0b 	bl	8010608 <__multiply>
 80107f2:	6020      	str	r0, [r4, #0]
 80107f4:	f8c0 9000 	str.w	r9, [r0]
 80107f8:	4604      	mov	r4, r0
 80107fa:	e7e4      	b.n	80107c6 <__pow5mult+0x6a>
 80107fc:	4630      	mov	r0, r6
 80107fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010802:	bf00      	nop
 8010804:	08013744 	.word	0x08013744
 8010808:	080135c5 	.word	0x080135c5
 801080c:	080136e8 	.word	0x080136e8

08010810 <__lshift>:
 8010810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010814:	460c      	mov	r4, r1
 8010816:	6849      	ldr	r1, [r1, #4]
 8010818:	6923      	ldr	r3, [r4, #16]
 801081a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801081e:	68a3      	ldr	r3, [r4, #8]
 8010820:	4607      	mov	r7, r0
 8010822:	4691      	mov	r9, r2
 8010824:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010828:	f108 0601 	add.w	r6, r8, #1
 801082c:	42b3      	cmp	r3, r6
 801082e:	db0b      	blt.n	8010848 <__lshift+0x38>
 8010830:	4638      	mov	r0, r7
 8010832:	f7ff fd95 	bl	8010360 <_Balloc>
 8010836:	4605      	mov	r5, r0
 8010838:	b948      	cbnz	r0, 801084e <__lshift+0x3e>
 801083a:	4602      	mov	r2, r0
 801083c:	4b28      	ldr	r3, [pc, #160]	@ (80108e0 <__lshift+0xd0>)
 801083e:	4829      	ldr	r0, [pc, #164]	@ (80108e4 <__lshift+0xd4>)
 8010840:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010844:	f7fe fe22 	bl	800f48c <__assert_func>
 8010848:	3101      	adds	r1, #1
 801084a:	005b      	lsls	r3, r3, #1
 801084c:	e7ee      	b.n	801082c <__lshift+0x1c>
 801084e:	2300      	movs	r3, #0
 8010850:	f100 0114 	add.w	r1, r0, #20
 8010854:	f100 0210 	add.w	r2, r0, #16
 8010858:	4618      	mov	r0, r3
 801085a:	4553      	cmp	r3, sl
 801085c:	db33      	blt.n	80108c6 <__lshift+0xb6>
 801085e:	6920      	ldr	r0, [r4, #16]
 8010860:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010864:	f104 0314 	add.w	r3, r4, #20
 8010868:	f019 091f 	ands.w	r9, r9, #31
 801086c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010870:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010874:	d02b      	beq.n	80108ce <__lshift+0xbe>
 8010876:	f1c9 0e20 	rsb	lr, r9, #32
 801087a:	468a      	mov	sl, r1
 801087c:	2200      	movs	r2, #0
 801087e:	6818      	ldr	r0, [r3, #0]
 8010880:	fa00 f009 	lsl.w	r0, r0, r9
 8010884:	4310      	orrs	r0, r2
 8010886:	f84a 0b04 	str.w	r0, [sl], #4
 801088a:	f853 2b04 	ldr.w	r2, [r3], #4
 801088e:	459c      	cmp	ip, r3
 8010890:	fa22 f20e 	lsr.w	r2, r2, lr
 8010894:	d8f3      	bhi.n	801087e <__lshift+0x6e>
 8010896:	ebac 0304 	sub.w	r3, ip, r4
 801089a:	3b15      	subs	r3, #21
 801089c:	f023 0303 	bic.w	r3, r3, #3
 80108a0:	3304      	adds	r3, #4
 80108a2:	f104 0015 	add.w	r0, r4, #21
 80108a6:	4584      	cmp	ip, r0
 80108a8:	bf38      	it	cc
 80108aa:	2304      	movcc	r3, #4
 80108ac:	50ca      	str	r2, [r1, r3]
 80108ae:	b10a      	cbz	r2, 80108b4 <__lshift+0xa4>
 80108b0:	f108 0602 	add.w	r6, r8, #2
 80108b4:	3e01      	subs	r6, #1
 80108b6:	4638      	mov	r0, r7
 80108b8:	612e      	str	r6, [r5, #16]
 80108ba:	4621      	mov	r1, r4
 80108bc:	f7ff fd90 	bl	80103e0 <_Bfree>
 80108c0:	4628      	mov	r0, r5
 80108c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80108ca:	3301      	adds	r3, #1
 80108cc:	e7c5      	b.n	801085a <__lshift+0x4a>
 80108ce:	3904      	subs	r1, #4
 80108d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80108d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80108d8:	459c      	cmp	ip, r3
 80108da:	d8f9      	bhi.n	80108d0 <__lshift+0xc0>
 80108dc:	e7ea      	b.n	80108b4 <__lshift+0xa4>
 80108de:	bf00      	nop
 80108e0:	080136d7 	.word	0x080136d7
 80108e4:	080136e8 	.word	0x080136e8

080108e8 <__mcmp>:
 80108e8:	690a      	ldr	r2, [r1, #16]
 80108ea:	4603      	mov	r3, r0
 80108ec:	6900      	ldr	r0, [r0, #16]
 80108ee:	1a80      	subs	r0, r0, r2
 80108f0:	b530      	push	{r4, r5, lr}
 80108f2:	d10e      	bne.n	8010912 <__mcmp+0x2a>
 80108f4:	3314      	adds	r3, #20
 80108f6:	3114      	adds	r1, #20
 80108f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80108fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010900:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010904:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010908:	4295      	cmp	r5, r2
 801090a:	d003      	beq.n	8010914 <__mcmp+0x2c>
 801090c:	d205      	bcs.n	801091a <__mcmp+0x32>
 801090e:	f04f 30ff 	mov.w	r0, #4294967295
 8010912:	bd30      	pop	{r4, r5, pc}
 8010914:	42a3      	cmp	r3, r4
 8010916:	d3f3      	bcc.n	8010900 <__mcmp+0x18>
 8010918:	e7fb      	b.n	8010912 <__mcmp+0x2a>
 801091a:	2001      	movs	r0, #1
 801091c:	e7f9      	b.n	8010912 <__mcmp+0x2a>
	...

08010920 <__mdiff>:
 8010920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010924:	4689      	mov	r9, r1
 8010926:	4606      	mov	r6, r0
 8010928:	4611      	mov	r1, r2
 801092a:	4648      	mov	r0, r9
 801092c:	4614      	mov	r4, r2
 801092e:	f7ff ffdb 	bl	80108e8 <__mcmp>
 8010932:	1e05      	subs	r5, r0, #0
 8010934:	d112      	bne.n	801095c <__mdiff+0x3c>
 8010936:	4629      	mov	r1, r5
 8010938:	4630      	mov	r0, r6
 801093a:	f7ff fd11 	bl	8010360 <_Balloc>
 801093e:	4602      	mov	r2, r0
 8010940:	b928      	cbnz	r0, 801094e <__mdiff+0x2e>
 8010942:	4b3f      	ldr	r3, [pc, #252]	@ (8010a40 <__mdiff+0x120>)
 8010944:	f240 2137 	movw	r1, #567	@ 0x237
 8010948:	483e      	ldr	r0, [pc, #248]	@ (8010a44 <__mdiff+0x124>)
 801094a:	f7fe fd9f 	bl	800f48c <__assert_func>
 801094e:	2301      	movs	r3, #1
 8010950:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010954:	4610      	mov	r0, r2
 8010956:	b003      	add	sp, #12
 8010958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801095c:	bfbc      	itt	lt
 801095e:	464b      	movlt	r3, r9
 8010960:	46a1      	movlt	r9, r4
 8010962:	4630      	mov	r0, r6
 8010964:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010968:	bfba      	itte	lt
 801096a:	461c      	movlt	r4, r3
 801096c:	2501      	movlt	r5, #1
 801096e:	2500      	movge	r5, #0
 8010970:	f7ff fcf6 	bl	8010360 <_Balloc>
 8010974:	4602      	mov	r2, r0
 8010976:	b918      	cbnz	r0, 8010980 <__mdiff+0x60>
 8010978:	4b31      	ldr	r3, [pc, #196]	@ (8010a40 <__mdiff+0x120>)
 801097a:	f240 2145 	movw	r1, #581	@ 0x245
 801097e:	e7e3      	b.n	8010948 <__mdiff+0x28>
 8010980:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010984:	6926      	ldr	r6, [r4, #16]
 8010986:	60c5      	str	r5, [r0, #12]
 8010988:	f109 0310 	add.w	r3, r9, #16
 801098c:	f109 0514 	add.w	r5, r9, #20
 8010990:	f104 0e14 	add.w	lr, r4, #20
 8010994:	f100 0b14 	add.w	fp, r0, #20
 8010998:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801099c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80109a0:	9301      	str	r3, [sp, #4]
 80109a2:	46d9      	mov	r9, fp
 80109a4:	f04f 0c00 	mov.w	ip, #0
 80109a8:	9b01      	ldr	r3, [sp, #4]
 80109aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80109ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80109b2:	9301      	str	r3, [sp, #4]
 80109b4:	fa1f f38a 	uxth.w	r3, sl
 80109b8:	4619      	mov	r1, r3
 80109ba:	b283      	uxth	r3, r0
 80109bc:	1acb      	subs	r3, r1, r3
 80109be:	0c00      	lsrs	r0, r0, #16
 80109c0:	4463      	add	r3, ip
 80109c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80109c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80109d0:	4576      	cmp	r6, lr
 80109d2:	f849 3b04 	str.w	r3, [r9], #4
 80109d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80109da:	d8e5      	bhi.n	80109a8 <__mdiff+0x88>
 80109dc:	1b33      	subs	r3, r6, r4
 80109de:	3b15      	subs	r3, #21
 80109e0:	f023 0303 	bic.w	r3, r3, #3
 80109e4:	3415      	adds	r4, #21
 80109e6:	3304      	adds	r3, #4
 80109e8:	42a6      	cmp	r6, r4
 80109ea:	bf38      	it	cc
 80109ec:	2304      	movcc	r3, #4
 80109ee:	441d      	add	r5, r3
 80109f0:	445b      	add	r3, fp
 80109f2:	461e      	mov	r6, r3
 80109f4:	462c      	mov	r4, r5
 80109f6:	4544      	cmp	r4, r8
 80109f8:	d30e      	bcc.n	8010a18 <__mdiff+0xf8>
 80109fa:	f108 0103 	add.w	r1, r8, #3
 80109fe:	1b49      	subs	r1, r1, r5
 8010a00:	f021 0103 	bic.w	r1, r1, #3
 8010a04:	3d03      	subs	r5, #3
 8010a06:	45a8      	cmp	r8, r5
 8010a08:	bf38      	it	cc
 8010a0a:	2100      	movcc	r1, #0
 8010a0c:	440b      	add	r3, r1
 8010a0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a12:	b191      	cbz	r1, 8010a3a <__mdiff+0x11a>
 8010a14:	6117      	str	r7, [r2, #16]
 8010a16:	e79d      	b.n	8010954 <__mdiff+0x34>
 8010a18:	f854 1b04 	ldr.w	r1, [r4], #4
 8010a1c:	46e6      	mov	lr, ip
 8010a1e:	0c08      	lsrs	r0, r1, #16
 8010a20:	fa1c fc81 	uxtah	ip, ip, r1
 8010a24:	4471      	add	r1, lr
 8010a26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010a2a:	b289      	uxth	r1, r1
 8010a2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010a30:	f846 1b04 	str.w	r1, [r6], #4
 8010a34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010a38:	e7dd      	b.n	80109f6 <__mdiff+0xd6>
 8010a3a:	3f01      	subs	r7, #1
 8010a3c:	e7e7      	b.n	8010a0e <__mdiff+0xee>
 8010a3e:	bf00      	nop
 8010a40:	080136d7 	.word	0x080136d7
 8010a44:	080136e8 	.word	0x080136e8

08010a48 <__ulp>:
 8010a48:	b082      	sub	sp, #8
 8010a4a:	ed8d 0b00 	vstr	d0, [sp]
 8010a4e:	9a01      	ldr	r2, [sp, #4]
 8010a50:	4b0f      	ldr	r3, [pc, #60]	@ (8010a90 <__ulp+0x48>)
 8010a52:	4013      	ands	r3, r2
 8010a54:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	dc08      	bgt.n	8010a6e <__ulp+0x26>
 8010a5c:	425b      	negs	r3, r3
 8010a5e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010a62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010a66:	da04      	bge.n	8010a72 <__ulp+0x2a>
 8010a68:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010a6c:	4113      	asrs	r3, r2
 8010a6e:	2200      	movs	r2, #0
 8010a70:	e008      	b.n	8010a84 <__ulp+0x3c>
 8010a72:	f1a2 0314 	sub.w	r3, r2, #20
 8010a76:	2b1e      	cmp	r3, #30
 8010a78:	bfda      	itte	le
 8010a7a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010a7e:	40da      	lsrle	r2, r3
 8010a80:	2201      	movgt	r2, #1
 8010a82:	2300      	movs	r3, #0
 8010a84:	4619      	mov	r1, r3
 8010a86:	4610      	mov	r0, r2
 8010a88:	ec41 0b10 	vmov	d0, r0, r1
 8010a8c:	b002      	add	sp, #8
 8010a8e:	4770      	bx	lr
 8010a90:	7ff00000 	.word	0x7ff00000

08010a94 <__b2d>:
 8010a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a98:	6906      	ldr	r6, [r0, #16]
 8010a9a:	f100 0814 	add.w	r8, r0, #20
 8010a9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010aa2:	1f37      	subs	r7, r6, #4
 8010aa4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010aa8:	4610      	mov	r0, r2
 8010aaa:	f7ff fd4b 	bl	8010544 <__hi0bits>
 8010aae:	f1c0 0320 	rsb	r3, r0, #32
 8010ab2:	280a      	cmp	r0, #10
 8010ab4:	600b      	str	r3, [r1, #0]
 8010ab6:	491b      	ldr	r1, [pc, #108]	@ (8010b24 <__b2d+0x90>)
 8010ab8:	dc15      	bgt.n	8010ae6 <__b2d+0x52>
 8010aba:	f1c0 0c0b 	rsb	ip, r0, #11
 8010abe:	fa22 f30c 	lsr.w	r3, r2, ip
 8010ac2:	45b8      	cmp	r8, r7
 8010ac4:	ea43 0501 	orr.w	r5, r3, r1
 8010ac8:	bf34      	ite	cc
 8010aca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010ace:	2300      	movcs	r3, #0
 8010ad0:	3015      	adds	r0, #21
 8010ad2:	fa02 f000 	lsl.w	r0, r2, r0
 8010ad6:	fa23 f30c 	lsr.w	r3, r3, ip
 8010ada:	4303      	orrs	r3, r0
 8010adc:	461c      	mov	r4, r3
 8010ade:	ec45 4b10 	vmov	d0, r4, r5
 8010ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ae6:	45b8      	cmp	r8, r7
 8010ae8:	bf3a      	itte	cc
 8010aea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010aee:	f1a6 0708 	subcc.w	r7, r6, #8
 8010af2:	2300      	movcs	r3, #0
 8010af4:	380b      	subs	r0, #11
 8010af6:	d012      	beq.n	8010b1e <__b2d+0x8a>
 8010af8:	f1c0 0120 	rsb	r1, r0, #32
 8010afc:	fa23 f401 	lsr.w	r4, r3, r1
 8010b00:	4082      	lsls	r2, r0
 8010b02:	4322      	orrs	r2, r4
 8010b04:	4547      	cmp	r7, r8
 8010b06:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010b0a:	bf8c      	ite	hi
 8010b0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010b10:	2200      	movls	r2, #0
 8010b12:	4083      	lsls	r3, r0
 8010b14:	40ca      	lsrs	r2, r1
 8010b16:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010b1a:	4313      	orrs	r3, r2
 8010b1c:	e7de      	b.n	8010adc <__b2d+0x48>
 8010b1e:	ea42 0501 	orr.w	r5, r2, r1
 8010b22:	e7db      	b.n	8010adc <__b2d+0x48>
 8010b24:	3ff00000 	.word	0x3ff00000

08010b28 <__d2b>:
 8010b28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b2c:	460f      	mov	r7, r1
 8010b2e:	2101      	movs	r1, #1
 8010b30:	ec59 8b10 	vmov	r8, r9, d0
 8010b34:	4616      	mov	r6, r2
 8010b36:	f7ff fc13 	bl	8010360 <_Balloc>
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	b930      	cbnz	r0, 8010b4c <__d2b+0x24>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	4b23      	ldr	r3, [pc, #140]	@ (8010bd0 <__d2b+0xa8>)
 8010b42:	4824      	ldr	r0, [pc, #144]	@ (8010bd4 <__d2b+0xac>)
 8010b44:	f240 310f 	movw	r1, #783	@ 0x30f
 8010b48:	f7fe fca0 	bl	800f48c <__assert_func>
 8010b4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010b50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b54:	b10d      	cbz	r5, 8010b5a <__d2b+0x32>
 8010b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010b5a:	9301      	str	r3, [sp, #4]
 8010b5c:	f1b8 0300 	subs.w	r3, r8, #0
 8010b60:	d023      	beq.n	8010baa <__d2b+0x82>
 8010b62:	4668      	mov	r0, sp
 8010b64:	9300      	str	r3, [sp, #0]
 8010b66:	f7ff fd0c 	bl	8010582 <__lo0bits>
 8010b6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010b6e:	b1d0      	cbz	r0, 8010ba6 <__d2b+0x7e>
 8010b70:	f1c0 0320 	rsb	r3, r0, #32
 8010b74:	fa02 f303 	lsl.w	r3, r2, r3
 8010b78:	430b      	orrs	r3, r1
 8010b7a:	40c2      	lsrs	r2, r0
 8010b7c:	6163      	str	r3, [r4, #20]
 8010b7e:	9201      	str	r2, [sp, #4]
 8010b80:	9b01      	ldr	r3, [sp, #4]
 8010b82:	61a3      	str	r3, [r4, #24]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	bf0c      	ite	eq
 8010b88:	2201      	moveq	r2, #1
 8010b8a:	2202      	movne	r2, #2
 8010b8c:	6122      	str	r2, [r4, #16]
 8010b8e:	b1a5      	cbz	r5, 8010bba <__d2b+0x92>
 8010b90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010b94:	4405      	add	r5, r0
 8010b96:	603d      	str	r5, [r7, #0]
 8010b98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010b9c:	6030      	str	r0, [r6, #0]
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	b003      	add	sp, #12
 8010ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ba6:	6161      	str	r1, [r4, #20]
 8010ba8:	e7ea      	b.n	8010b80 <__d2b+0x58>
 8010baa:	a801      	add	r0, sp, #4
 8010bac:	f7ff fce9 	bl	8010582 <__lo0bits>
 8010bb0:	9b01      	ldr	r3, [sp, #4]
 8010bb2:	6163      	str	r3, [r4, #20]
 8010bb4:	3020      	adds	r0, #32
 8010bb6:	2201      	movs	r2, #1
 8010bb8:	e7e8      	b.n	8010b8c <__d2b+0x64>
 8010bba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010bbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010bc2:	6038      	str	r0, [r7, #0]
 8010bc4:	6918      	ldr	r0, [r3, #16]
 8010bc6:	f7ff fcbd 	bl	8010544 <__hi0bits>
 8010bca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010bce:	e7e5      	b.n	8010b9c <__d2b+0x74>
 8010bd0:	080136d7 	.word	0x080136d7
 8010bd4:	080136e8 	.word	0x080136e8

08010bd8 <__ratio>:
 8010bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bdc:	b085      	sub	sp, #20
 8010bde:	e9cd 1000 	strd	r1, r0, [sp]
 8010be2:	a902      	add	r1, sp, #8
 8010be4:	f7ff ff56 	bl	8010a94 <__b2d>
 8010be8:	9800      	ldr	r0, [sp, #0]
 8010bea:	a903      	add	r1, sp, #12
 8010bec:	ec55 4b10 	vmov	r4, r5, d0
 8010bf0:	f7ff ff50 	bl	8010a94 <__b2d>
 8010bf4:	9b01      	ldr	r3, [sp, #4]
 8010bf6:	6919      	ldr	r1, [r3, #16]
 8010bf8:	9b00      	ldr	r3, [sp, #0]
 8010bfa:	691b      	ldr	r3, [r3, #16]
 8010bfc:	1ac9      	subs	r1, r1, r3
 8010bfe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010c02:	1a9b      	subs	r3, r3, r2
 8010c04:	ec5b ab10 	vmov	sl, fp, d0
 8010c08:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	bfce      	itee	gt
 8010c10:	462a      	movgt	r2, r5
 8010c12:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010c16:	465a      	movle	r2, fp
 8010c18:	462f      	mov	r7, r5
 8010c1a:	46d9      	mov	r9, fp
 8010c1c:	bfcc      	ite	gt
 8010c1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010c22:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010c26:	464b      	mov	r3, r9
 8010c28:	4652      	mov	r2, sl
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	4639      	mov	r1, r7
 8010c2e:	f7ef fe0d 	bl	800084c <__aeabi_ddiv>
 8010c32:	ec41 0b10 	vmov	d0, r0, r1
 8010c36:	b005      	add	sp, #20
 8010c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c3c <__copybits>:
 8010c3c:	3901      	subs	r1, #1
 8010c3e:	b570      	push	{r4, r5, r6, lr}
 8010c40:	1149      	asrs	r1, r1, #5
 8010c42:	6914      	ldr	r4, [r2, #16]
 8010c44:	3101      	adds	r1, #1
 8010c46:	f102 0314 	add.w	r3, r2, #20
 8010c4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010c4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010c52:	1f05      	subs	r5, r0, #4
 8010c54:	42a3      	cmp	r3, r4
 8010c56:	d30c      	bcc.n	8010c72 <__copybits+0x36>
 8010c58:	1aa3      	subs	r3, r4, r2
 8010c5a:	3b11      	subs	r3, #17
 8010c5c:	f023 0303 	bic.w	r3, r3, #3
 8010c60:	3211      	adds	r2, #17
 8010c62:	42a2      	cmp	r2, r4
 8010c64:	bf88      	it	hi
 8010c66:	2300      	movhi	r3, #0
 8010c68:	4418      	add	r0, r3
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	4288      	cmp	r0, r1
 8010c6e:	d305      	bcc.n	8010c7c <__copybits+0x40>
 8010c70:	bd70      	pop	{r4, r5, r6, pc}
 8010c72:	f853 6b04 	ldr.w	r6, [r3], #4
 8010c76:	f845 6f04 	str.w	r6, [r5, #4]!
 8010c7a:	e7eb      	b.n	8010c54 <__copybits+0x18>
 8010c7c:	f840 3b04 	str.w	r3, [r0], #4
 8010c80:	e7f4      	b.n	8010c6c <__copybits+0x30>

08010c82 <__any_on>:
 8010c82:	f100 0214 	add.w	r2, r0, #20
 8010c86:	6900      	ldr	r0, [r0, #16]
 8010c88:	114b      	asrs	r3, r1, #5
 8010c8a:	4298      	cmp	r0, r3
 8010c8c:	b510      	push	{r4, lr}
 8010c8e:	db11      	blt.n	8010cb4 <__any_on+0x32>
 8010c90:	dd0a      	ble.n	8010ca8 <__any_on+0x26>
 8010c92:	f011 011f 	ands.w	r1, r1, #31
 8010c96:	d007      	beq.n	8010ca8 <__any_on+0x26>
 8010c98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010c9c:	fa24 f001 	lsr.w	r0, r4, r1
 8010ca0:	fa00 f101 	lsl.w	r1, r0, r1
 8010ca4:	428c      	cmp	r4, r1
 8010ca6:	d10b      	bne.n	8010cc0 <__any_on+0x3e>
 8010ca8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d803      	bhi.n	8010cb8 <__any_on+0x36>
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	bd10      	pop	{r4, pc}
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	e7f7      	b.n	8010ca8 <__any_on+0x26>
 8010cb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	d0f5      	beq.n	8010cac <__any_on+0x2a>
 8010cc0:	2001      	movs	r0, #1
 8010cc2:	e7f6      	b.n	8010cb2 <__any_on+0x30>

08010cc4 <sulp>:
 8010cc4:	b570      	push	{r4, r5, r6, lr}
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	460d      	mov	r5, r1
 8010cca:	ec45 4b10 	vmov	d0, r4, r5
 8010cce:	4616      	mov	r6, r2
 8010cd0:	f7ff feba 	bl	8010a48 <__ulp>
 8010cd4:	ec51 0b10 	vmov	r0, r1, d0
 8010cd8:	b17e      	cbz	r6, 8010cfa <sulp+0x36>
 8010cda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010cde:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	dd09      	ble.n	8010cfa <sulp+0x36>
 8010ce6:	051b      	lsls	r3, r3, #20
 8010ce8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010cec:	2400      	movs	r4, #0
 8010cee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010cf2:	4622      	mov	r2, r4
 8010cf4:	462b      	mov	r3, r5
 8010cf6:	f7ef fc7f 	bl	80005f8 <__aeabi_dmul>
 8010cfa:	ec41 0b10 	vmov	d0, r0, r1
 8010cfe:	bd70      	pop	{r4, r5, r6, pc}

08010d00 <_strtod_l>:
 8010d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d04:	b09f      	sub	sp, #124	@ 0x7c
 8010d06:	460c      	mov	r4, r1
 8010d08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8010d0e:	9005      	str	r0, [sp, #20]
 8010d10:	f04f 0a00 	mov.w	sl, #0
 8010d14:	f04f 0b00 	mov.w	fp, #0
 8010d18:	460a      	mov	r2, r1
 8010d1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d1c:	7811      	ldrb	r1, [r2, #0]
 8010d1e:	292b      	cmp	r1, #43	@ 0x2b
 8010d20:	d04a      	beq.n	8010db8 <_strtod_l+0xb8>
 8010d22:	d838      	bhi.n	8010d96 <_strtod_l+0x96>
 8010d24:	290d      	cmp	r1, #13
 8010d26:	d832      	bhi.n	8010d8e <_strtod_l+0x8e>
 8010d28:	2908      	cmp	r1, #8
 8010d2a:	d832      	bhi.n	8010d92 <_strtod_l+0x92>
 8010d2c:	2900      	cmp	r1, #0
 8010d2e:	d03b      	beq.n	8010da8 <_strtod_l+0xa8>
 8010d30:	2200      	movs	r2, #0
 8010d32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010d34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010d36:	782a      	ldrb	r2, [r5, #0]
 8010d38:	2a30      	cmp	r2, #48	@ 0x30
 8010d3a:	f040 80b3 	bne.w	8010ea4 <_strtod_l+0x1a4>
 8010d3e:	786a      	ldrb	r2, [r5, #1]
 8010d40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010d44:	2a58      	cmp	r2, #88	@ 0x58
 8010d46:	d16e      	bne.n	8010e26 <_strtod_l+0x126>
 8010d48:	9302      	str	r3, [sp, #8]
 8010d4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d4c:	9301      	str	r3, [sp, #4]
 8010d4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8010d50:	9300      	str	r3, [sp, #0]
 8010d52:	4a8e      	ldr	r2, [pc, #568]	@ (8010f8c <_strtod_l+0x28c>)
 8010d54:	9805      	ldr	r0, [sp, #20]
 8010d56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010d58:	a919      	add	r1, sp, #100	@ 0x64
 8010d5a:	f001 fac7 	bl	80122ec <__gethex>
 8010d5e:	f010 060f 	ands.w	r6, r0, #15
 8010d62:	4604      	mov	r4, r0
 8010d64:	d005      	beq.n	8010d72 <_strtod_l+0x72>
 8010d66:	2e06      	cmp	r6, #6
 8010d68:	d128      	bne.n	8010dbc <_strtod_l+0xbc>
 8010d6a:	3501      	adds	r5, #1
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f040 858e 	bne.w	8011896 <_strtod_l+0xb96>
 8010d7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d7c:	b1cb      	cbz	r3, 8010db2 <_strtod_l+0xb2>
 8010d7e:	4652      	mov	r2, sl
 8010d80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010d84:	ec43 2b10 	vmov	d0, r2, r3
 8010d88:	b01f      	add	sp, #124	@ 0x7c
 8010d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d8e:	2920      	cmp	r1, #32
 8010d90:	d1ce      	bne.n	8010d30 <_strtod_l+0x30>
 8010d92:	3201      	adds	r2, #1
 8010d94:	e7c1      	b.n	8010d1a <_strtod_l+0x1a>
 8010d96:	292d      	cmp	r1, #45	@ 0x2d
 8010d98:	d1ca      	bne.n	8010d30 <_strtod_l+0x30>
 8010d9a:	2101      	movs	r1, #1
 8010d9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010d9e:	1c51      	adds	r1, r2, #1
 8010da0:	9119      	str	r1, [sp, #100]	@ 0x64
 8010da2:	7852      	ldrb	r2, [r2, #1]
 8010da4:	2a00      	cmp	r2, #0
 8010da6:	d1c5      	bne.n	8010d34 <_strtod_l+0x34>
 8010da8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010daa:	9419      	str	r4, [sp, #100]	@ 0x64
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	f040 8570 	bne.w	8011892 <_strtod_l+0xb92>
 8010db2:	4652      	mov	r2, sl
 8010db4:	465b      	mov	r3, fp
 8010db6:	e7e5      	b.n	8010d84 <_strtod_l+0x84>
 8010db8:	2100      	movs	r1, #0
 8010dba:	e7ef      	b.n	8010d9c <_strtod_l+0x9c>
 8010dbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010dbe:	b13a      	cbz	r2, 8010dd0 <_strtod_l+0xd0>
 8010dc0:	2135      	movs	r1, #53	@ 0x35
 8010dc2:	a81c      	add	r0, sp, #112	@ 0x70
 8010dc4:	f7ff ff3a 	bl	8010c3c <__copybits>
 8010dc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010dca:	9805      	ldr	r0, [sp, #20]
 8010dcc:	f7ff fb08 	bl	80103e0 <_Bfree>
 8010dd0:	3e01      	subs	r6, #1
 8010dd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010dd4:	2e04      	cmp	r6, #4
 8010dd6:	d806      	bhi.n	8010de6 <_strtod_l+0xe6>
 8010dd8:	e8df f006 	tbb	[pc, r6]
 8010ddc:	201d0314 	.word	0x201d0314
 8010de0:	14          	.byte	0x14
 8010de1:	00          	.byte	0x00
 8010de2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010de6:	05e1      	lsls	r1, r4, #23
 8010de8:	bf48      	it	mi
 8010dea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010dee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010df2:	0d1b      	lsrs	r3, r3, #20
 8010df4:	051b      	lsls	r3, r3, #20
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d1bb      	bne.n	8010d72 <_strtod_l+0x72>
 8010dfa:	f7fe fb05 	bl	800f408 <__errno>
 8010dfe:	2322      	movs	r3, #34	@ 0x22
 8010e00:	6003      	str	r3, [r0, #0]
 8010e02:	e7b6      	b.n	8010d72 <_strtod_l+0x72>
 8010e04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010e08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010e0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010e10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010e14:	e7e7      	b.n	8010de6 <_strtod_l+0xe6>
 8010e16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010f94 <_strtod_l+0x294>
 8010e1a:	e7e4      	b.n	8010de6 <_strtod_l+0xe6>
 8010e1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010e20:	f04f 3aff 	mov.w	sl, #4294967295
 8010e24:	e7df      	b.n	8010de6 <_strtod_l+0xe6>
 8010e26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e28:	1c5a      	adds	r2, r3, #1
 8010e2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010e2c:	785b      	ldrb	r3, [r3, #1]
 8010e2e:	2b30      	cmp	r3, #48	@ 0x30
 8010e30:	d0f9      	beq.n	8010e26 <_strtod_l+0x126>
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d09d      	beq.n	8010d72 <_strtod_l+0x72>
 8010e36:	2301      	movs	r3, #1
 8010e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010e3e:	2300      	movs	r3, #0
 8010e40:	9308      	str	r3, [sp, #32]
 8010e42:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e44:	461f      	mov	r7, r3
 8010e46:	220a      	movs	r2, #10
 8010e48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010e4a:	7805      	ldrb	r5, [r0, #0]
 8010e4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010e50:	b2d9      	uxtb	r1, r3
 8010e52:	2909      	cmp	r1, #9
 8010e54:	d928      	bls.n	8010ea8 <_strtod_l+0x1a8>
 8010e56:	494e      	ldr	r1, [pc, #312]	@ (8010f90 <_strtod_l+0x290>)
 8010e58:	2201      	movs	r2, #1
 8010e5a:	f7fe f9f3 	bl	800f244 <strncmp>
 8010e5e:	2800      	cmp	r0, #0
 8010e60:	d032      	beq.n	8010ec8 <_strtod_l+0x1c8>
 8010e62:	2000      	movs	r0, #0
 8010e64:	462a      	mov	r2, r5
 8010e66:	4681      	mov	r9, r0
 8010e68:	463d      	mov	r5, r7
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2a65      	cmp	r2, #101	@ 0x65
 8010e6e:	d001      	beq.n	8010e74 <_strtod_l+0x174>
 8010e70:	2a45      	cmp	r2, #69	@ 0x45
 8010e72:	d114      	bne.n	8010e9e <_strtod_l+0x19e>
 8010e74:	b91d      	cbnz	r5, 8010e7e <_strtod_l+0x17e>
 8010e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e78:	4302      	orrs	r2, r0
 8010e7a:	d095      	beq.n	8010da8 <_strtod_l+0xa8>
 8010e7c:	2500      	movs	r5, #0
 8010e7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010e80:	1c62      	adds	r2, r4, #1
 8010e82:	9219      	str	r2, [sp, #100]	@ 0x64
 8010e84:	7862      	ldrb	r2, [r4, #1]
 8010e86:	2a2b      	cmp	r2, #43	@ 0x2b
 8010e88:	d077      	beq.n	8010f7a <_strtod_l+0x27a>
 8010e8a:	2a2d      	cmp	r2, #45	@ 0x2d
 8010e8c:	d07b      	beq.n	8010f86 <_strtod_l+0x286>
 8010e8e:	f04f 0c00 	mov.w	ip, #0
 8010e92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010e96:	2909      	cmp	r1, #9
 8010e98:	f240 8082 	bls.w	8010fa0 <_strtod_l+0x2a0>
 8010e9c:	9419      	str	r4, [sp, #100]	@ 0x64
 8010e9e:	f04f 0800 	mov.w	r8, #0
 8010ea2:	e0a2      	b.n	8010fea <_strtod_l+0x2ea>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	e7c7      	b.n	8010e38 <_strtod_l+0x138>
 8010ea8:	2f08      	cmp	r7, #8
 8010eaa:	bfd5      	itete	le
 8010eac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010eae:	9908      	ldrgt	r1, [sp, #32]
 8010eb0:	fb02 3301 	mlale	r3, r2, r1, r3
 8010eb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010eb8:	f100 0001 	add.w	r0, r0, #1
 8010ebc:	bfd4      	ite	le
 8010ebe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010ec0:	9308      	strgt	r3, [sp, #32]
 8010ec2:	3701      	adds	r7, #1
 8010ec4:	9019      	str	r0, [sp, #100]	@ 0x64
 8010ec6:	e7bf      	b.n	8010e48 <_strtod_l+0x148>
 8010ec8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010eca:	1c5a      	adds	r2, r3, #1
 8010ecc:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ece:	785a      	ldrb	r2, [r3, #1]
 8010ed0:	b37f      	cbz	r7, 8010f32 <_strtod_l+0x232>
 8010ed2:	4681      	mov	r9, r0
 8010ed4:	463d      	mov	r5, r7
 8010ed6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010eda:	2b09      	cmp	r3, #9
 8010edc:	d912      	bls.n	8010f04 <_strtod_l+0x204>
 8010ede:	2301      	movs	r3, #1
 8010ee0:	e7c4      	b.n	8010e6c <_strtod_l+0x16c>
 8010ee2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ee4:	1c5a      	adds	r2, r3, #1
 8010ee6:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ee8:	785a      	ldrb	r2, [r3, #1]
 8010eea:	3001      	adds	r0, #1
 8010eec:	2a30      	cmp	r2, #48	@ 0x30
 8010eee:	d0f8      	beq.n	8010ee2 <_strtod_l+0x1e2>
 8010ef0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010ef4:	2b08      	cmp	r3, #8
 8010ef6:	f200 84d3 	bhi.w	80118a0 <_strtod_l+0xba0>
 8010efa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010efc:	930c      	str	r3, [sp, #48]	@ 0x30
 8010efe:	4681      	mov	r9, r0
 8010f00:	2000      	movs	r0, #0
 8010f02:	4605      	mov	r5, r0
 8010f04:	3a30      	subs	r2, #48	@ 0x30
 8010f06:	f100 0301 	add.w	r3, r0, #1
 8010f0a:	d02a      	beq.n	8010f62 <_strtod_l+0x262>
 8010f0c:	4499      	add	r9, r3
 8010f0e:	eb00 0c05 	add.w	ip, r0, r5
 8010f12:	462b      	mov	r3, r5
 8010f14:	210a      	movs	r1, #10
 8010f16:	4563      	cmp	r3, ip
 8010f18:	d10d      	bne.n	8010f36 <_strtod_l+0x236>
 8010f1a:	1c69      	adds	r1, r5, #1
 8010f1c:	4401      	add	r1, r0
 8010f1e:	4428      	add	r0, r5
 8010f20:	2808      	cmp	r0, #8
 8010f22:	dc16      	bgt.n	8010f52 <_strtod_l+0x252>
 8010f24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010f26:	230a      	movs	r3, #10
 8010f28:	fb03 2300 	mla	r3, r3, r0, r2
 8010f2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f2e:	2300      	movs	r3, #0
 8010f30:	e018      	b.n	8010f64 <_strtod_l+0x264>
 8010f32:	4638      	mov	r0, r7
 8010f34:	e7da      	b.n	8010eec <_strtod_l+0x1ec>
 8010f36:	2b08      	cmp	r3, #8
 8010f38:	f103 0301 	add.w	r3, r3, #1
 8010f3c:	dc03      	bgt.n	8010f46 <_strtod_l+0x246>
 8010f3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010f40:	434e      	muls	r6, r1
 8010f42:	960a      	str	r6, [sp, #40]	@ 0x28
 8010f44:	e7e7      	b.n	8010f16 <_strtod_l+0x216>
 8010f46:	2b10      	cmp	r3, #16
 8010f48:	bfde      	ittt	le
 8010f4a:	9e08      	ldrle	r6, [sp, #32]
 8010f4c:	434e      	mulle	r6, r1
 8010f4e:	9608      	strle	r6, [sp, #32]
 8010f50:	e7e1      	b.n	8010f16 <_strtod_l+0x216>
 8010f52:	280f      	cmp	r0, #15
 8010f54:	dceb      	bgt.n	8010f2e <_strtod_l+0x22e>
 8010f56:	9808      	ldr	r0, [sp, #32]
 8010f58:	230a      	movs	r3, #10
 8010f5a:	fb03 2300 	mla	r3, r3, r0, r2
 8010f5e:	9308      	str	r3, [sp, #32]
 8010f60:	e7e5      	b.n	8010f2e <_strtod_l+0x22e>
 8010f62:	4629      	mov	r1, r5
 8010f64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010f66:	1c50      	adds	r0, r2, #1
 8010f68:	9019      	str	r0, [sp, #100]	@ 0x64
 8010f6a:	7852      	ldrb	r2, [r2, #1]
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	460d      	mov	r5, r1
 8010f70:	e7b1      	b.n	8010ed6 <_strtod_l+0x1d6>
 8010f72:	f04f 0900 	mov.w	r9, #0
 8010f76:	2301      	movs	r3, #1
 8010f78:	e77d      	b.n	8010e76 <_strtod_l+0x176>
 8010f7a:	f04f 0c00 	mov.w	ip, #0
 8010f7e:	1ca2      	adds	r2, r4, #2
 8010f80:	9219      	str	r2, [sp, #100]	@ 0x64
 8010f82:	78a2      	ldrb	r2, [r4, #2]
 8010f84:	e785      	b.n	8010e92 <_strtod_l+0x192>
 8010f86:	f04f 0c01 	mov.w	ip, #1
 8010f8a:	e7f8      	b.n	8010f7e <_strtod_l+0x27e>
 8010f8c:	08013858 	.word	0x08013858
 8010f90:	08013840 	.word	0x08013840
 8010f94:	7ff00000 	.word	0x7ff00000
 8010f98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010f9a:	1c51      	adds	r1, r2, #1
 8010f9c:	9119      	str	r1, [sp, #100]	@ 0x64
 8010f9e:	7852      	ldrb	r2, [r2, #1]
 8010fa0:	2a30      	cmp	r2, #48	@ 0x30
 8010fa2:	d0f9      	beq.n	8010f98 <_strtod_l+0x298>
 8010fa4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010fa8:	2908      	cmp	r1, #8
 8010faa:	f63f af78 	bhi.w	8010e9e <_strtod_l+0x19e>
 8010fae:	3a30      	subs	r2, #48	@ 0x30
 8010fb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010fb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010fb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010fb6:	f04f 080a 	mov.w	r8, #10
 8010fba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010fbc:	1c56      	adds	r6, r2, #1
 8010fbe:	9619      	str	r6, [sp, #100]	@ 0x64
 8010fc0:	7852      	ldrb	r2, [r2, #1]
 8010fc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010fc6:	f1be 0f09 	cmp.w	lr, #9
 8010fca:	d939      	bls.n	8011040 <_strtod_l+0x340>
 8010fcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010fce:	1a76      	subs	r6, r6, r1
 8010fd0:	2e08      	cmp	r6, #8
 8010fd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010fd6:	dc03      	bgt.n	8010fe0 <_strtod_l+0x2e0>
 8010fd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010fda:	4588      	cmp	r8, r1
 8010fdc:	bfa8      	it	ge
 8010fde:	4688      	movge	r8, r1
 8010fe0:	f1bc 0f00 	cmp.w	ip, #0
 8010fe4:	d001      	beq.n	8010fea <_strtod_l+0x2ea>
 8010fe6:	f1c8 0800 	rsb	r8, r8, #0
 8010fea:	2d00      	cmp	r5, #0
 8010fec:	d14e      	bne.n	801108c <_strtod_l+0x38c>
 8010fee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ff0:	4308      	orrs	r0, r1
 8010ff2:	f47f aebe 	bne.w	8010d72 <_strtod_l+0x72>
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f47f aed6 	bne.w	8010da8 <_strtod_l+0xa8>
 8010ffc:	2a69      	cmp	r2, #105	@ 0x69
 8010ffe:	d028      	beq.n	8011052 <_strtod_l+0x352>
 8011000:	dc25      	bgt.n	801104e <_strtod_l+0x34e>
 8011002:	2a49      	cmp	r2, #73	@ 0x49
 8011004:	d025      	beq.n	8011052 <_strtod_l+0x352>
 8011006:	2a4e      	cmp	r2, #78	@ 0x4e
 8011008:	f47f aece 	bne.w	8010da8 <_strtod_l+0xa8>
 801100c:	499b      	ldr	r1, [pc, #620]	@ (801127c <_strtod_l+0x57c>)
 801100e:	a819      	add	r0, sp, #100	@ 0x64
 8011010:	f001 fb8e 	bl	8012730 <__match>
 8011014:	2800      	cmp	r0, #0
 8011016:	f43f aec7 	beq.w	8010da8 <_strtod_l+0xa8>
 801101a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	2b28      	cmp	r3, #40	@ 0x28
 8011020:	d12e      	bne.n	8011080 <_strtod_l+0x380>
 8011022:	4997      	ldr	r1, [pc, #604]	@ (8011280 <_strtod_l+0x580>)
 8011024:	aa1c      	add	r2, sp, #112	@ 0x70
 8011026:	a819      	add	r0, sp, #100	@ 0x64
 8011028:	f001 fb96 	bl	8012758 <__hexnan>
 801102c:	2805      	cmp	r0, #5
 801102e:	d127      	bne.n	8011080 <_strtod_l+0x380>
 8011030:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011032:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011036:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801103a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801103e:	e698      	b.n	8010d72 <_strtod_l+0x72>
 8011040:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011042:	fb08 2101 	mla	r1, r8, r1, r2
 8011046:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801104a:	920e      	str	r2, [sp, #56]	@ 0x38
 801104c:	e7b5      	b.n	8010fba <_strtod_l+0x2ba>
 801104e:	2a6e      	cmp	r2, #110	@ 0x6e
 8011050:	e7da      	b.n	8011008 <_strtod_l+0x308>
 8011052:	498c      	ldr	r1, [pc, #560]	@ (8011284 <_strtod_l+0x584>)
 8011054:	a819      	add	r0, sp, #100	@ 0x64
 8011056:	f001 fb6b 	bl	8012730 <__match>
 801105a:	2800      	cmp	r0, #0
 801105c:	f43f aea4 	beq.w	8010da8 <_strtod_l+0xa8>
 8011060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011062:	4989      	ldr	r1, [pc, #548]	@ (8011288 <_strtod_l+0x588>)
 8011064:	3b01      	subs	r3, #1
 8011066:	a819      	add	r0, sp, #100	@ 0x64
 8011068:	9319      	str	r3, [sp, #100]	@ 0x64
 801106a:	f001 fb61 	bl	8012730 <__match>
 801106e:	b910      	cbnz	r0, 8011076 <_strtod_l+0x376>
 8011070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011072:	3301      	adds	r3, #1
 8011074:	9319      	str	r3, [sp, #100]	@ 0x64
 8011076:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011298 <_strtod_l+0x598>
 801107a:	f04f 0a00 	mov.w	sl, #0
 801107e:	e678      	b.n	8010d72 <_strtod_l+0x72>
 8011080:	4882      	ldr	r0, [pc, #520]	@ (801128c <_strtod_l+0x58c>)
 8011082:	f001 f8a9 	bl	80121d8 <nan>
 8011086:	ec5b ab10 	vmov	sl, fp, d0
 801108a:	e672      	b.n	8010d72 <_strtod_l+0x72>
 801108c:	eba8 0309 	sub.w	r3, r8, r9
 8011090:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011092:	9309      	str	r3, [sp, #36]	@ 0x24
 8011094:	2f00      	cmp	r7, #0
 8011096:	bf08      	it	eq
 8011098:	462f      	moveq	r7, r5
 801109a:	2d10      	cmp	r5, #16
 801109c:	462c      	mov	r4, r5
 801109e:	bfa8      	it	ge
 80110a0:	2410      	movge	r4, #16
 80110a2:	f7ef fa2f 	bl	8000504 <__aeabi_ui2d>
 80110a6:	2d09      	cmp	r5, #9
 80110a8:	4682      	mov	sl, r0
 80110aa:	468b      	mov	fp, r1
 80110ac:	dc13      	bgt.n	80110d6 <_strtod_l+0x3d6>
 80110ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f43f ae5e 	beq.w	8010d72 <_strtod_l+0x72>
 80110b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110b8:	dd78      	ble.n	80111ac <_strtod_l+0x4ac>
 80110ba:	2b16      	cmp	r3, #22
 80110bc:	dc5f      	bgt.n	801117e <_strtod_l+0x47e>
 80110be:	4974      	ldr	r1, [pc, #464]	@ (8011290 <_strtod_l+0x590>)
 80110c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80110c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110c8:	4652      	mov	r2, sl
 80110ca:	465b      	mov	r3, fp
 80110cc:	f7ef fa94 	bl	80005f8 <__aeabi_dmul>
 80110d0:	4682      	mov	sl, r0
 80110d2:	468b      	mov	fp, r1
 80110d4:	e64d      	b.n	8010d72 <_strtod_l+0x72>
 80110d6:	4b6e      	ldr	r3, [pc, #440]	@ (8011290 <_strtod_l+0x590>)
 80110d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80110dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80110e0:	f7ef fa8a 	bl	80005f8 <__aeabi_dmul>
 80110e4:	4682      	mov	sl, r0
 80110e6:	9808      	ldr	r0, [sp, #32]
 80110e8:	468b      	mov	fp, r1
 80110ea:	f7ef fa0b 	bl	8000504 <__aeabi_ui2d>
 80110ee:	4602      	mov	r2, r0
 80110f0:	460b      	mov	r3, r1
 80110f2:	4650      	mov	r0, sl
 80110f4:	4659      	mov	r1, fp
 80110f6:	f7ef f8c9 	bl	800028c <__adddf3>
 80110fa:	2d0f      	cmp	r5, #15
 80110fc:	4682      	mov	sl, r0
 80110fe:	468b      	mov	fp, r1
 8011100:	ddd5      	ble.n	80110ae <_strtod_l+0x3ae>
 8011102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011104:	1b2c      	subs	r4, r5, r4
 8011106:	441c      	add	r4, r3
 8011108:	2c00      	cmp	r4, #0
 801110a:	f340 8096 	ble.w	801123a <_strtod_l+0x53a>
 801110e:	f014 030f 	ands.w	r3, r4, #15
 8011112:	d00a      	beq.n	801112a <_strtod_l+0x42a>
 8011114:	495e      	ldr	r1, [pc, #376]	@ (8011290 <_strtod_l+0x590>)
 8011116:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801111a:	4652      	mov	r2, sl
 801111c:	465b      	mov	r3, fp
 801111e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011122:	f7ef fa69 	bl	80005f8 <__aeabi_dmul>
 8011126:	4682      	mov	sl, r0
 8011128:	468b      	mov	fp, r1
 801112a:	f034 040f 	bics.w	r4, r4, #15
 801112e:	d073      	beq.n	8011218 <_strtod_l+0x518>
 8011130:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011134:	dd48      	ble.n	80111c8 <_strtod_l+0x4c8>
 8011136:	2400      	movs	r4, #0
 8011138:	46a0      	mov	r8, r4
 801113a:	940a      	str	r4, [sp, #40]	@ 0x28
 801113c:	46a1      	mov	r9, r4
 801113e:	9a05      	ldr	r2, [sp, #20]
 8011140:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011298 <_strtod_l+0x598>
 8011144:	2322      	movs	r3, #34	@ 0x22
 8011146:	6013      	str	r3, [r2, #0]
 8011148:	f04f 0a00 	mov.w	sl, #0
 801114c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801114e:	2b00      	cmp	r3, #0
 8011150:	f43f ae0f 	beq.w	8010d72 <_strtod_l+0x72>
 8011154:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011156:	9805      	ldr	r0, [sp, #20]
 8011158:	f7ff f942 	bl	80103e0 <_Bfree>
 801115c:	9805      	ldr	r0, [sp, #20]
 801115e:	4649      	mov	r1, r9
 8011160:	f7ff f93e 	bl	80103e0 <_Bfree>
 8011164:	9805      	ldr	r0, [sp, #20]
 8011166:	4641      	mov	r1, r8
 8011168:	f7ff f93a 	bl	80103e0 <_Bfree>
 801116c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801116e:	9805      	ldr	r0, [sp, #20]
 8011170:	f7ff f936 	bl	80103e0 <_Bfree>
 8011174:	9805      	ldr	r0, [sp, #20]
 8011176:	4621      	mov	r1, r4
 8011178:	f7ff f932 	bl	80103e0 <_Bfree>
 801117c:	e5f9      	b.n	8010d72 <_strtod_l+0x72>
 801117e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011180:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011184:	4293      	cmp	r3, r2
 8011186:	dbbc      	blt.n	8011102 <_strtod_l+0x402>
 8011188:	4c41      	ldr	r4, [pc, #260]	@ (8011290 <_strtod_l+0x590>)
 801118a:	f1c5 050f 	rsb	r5, r5, #15
 801118e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011192:	4652      	mov	r2, sl
 8011194:	465b      	mov	r3, fp
 8011196:	e9d1 0100 	ldrd	r0, r1, [r1]
 801119a:	f7ef fa2d 	bl	80005f8 <__aeabi_dmul>
 801119e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111a0:	1b5d      	subs	r5, r3, r5
 80111a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80111a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80111aa:	e78f      	b.n	80110cc <_strtod_l+0x3cc>
 80111ac:	3316      	adds	r3, #22
 80111ae:	dba8      	blt.n	8011102 <_strtod_l+0x402>
 80111b0:	4b37      	ldr	r3, [pc, #220]	@ (8011290 <_strtod_l+0x590>)
 80111b2:	eba9 0808 	sub.w	r8, r9, r8
 80111b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80111ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80111be:	4650      	mov	r0, sl
 80111c0:	4659      	mov	r1, fp
 80111c2:	f7ef fb43 	bl	800084c <__aeabi_ddiv>
 80111c6:	e783      	b.n	80110d0 <_strtod_l+0x3d0>
 80111c8:	4b32      	ldr	r3, [pc, #200]	@ (8011294 <_strtod_l+0x594>)
 80111ca:	9308      	str	r3, [sp, #32]
 80111cc:	2300      	movs	r3, #0
 80111ce:	1124      	asrs	r4, r4, #4
 80111d0:	4650      	mov	r0, sl
 80111d2:	4659      	mov	r1, fp
 80111d4:	461e      	mov	r6, r3
 80111d6:	2c01      	cmp	r4, #1
 80111d8:	dc21      	bgt.n	801121e <_strtod_l+0x51e>
 80111da:	b10b      	cbz	r3, 80111e0 <_strtod_l+0x4e0>
 80111dc:	4682      	mov	sl, r0
 80111de:	468b      	mov	fp, r1
 80111e0:	492c      	ldr	r1, [pc, #176]	@ (8011294 <_strtod_l+0x594>)
 80111e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80111e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80111ea:	4652      	mov	r2, sl
 80111ec:	465b      	mov	r3, fp
 80111ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111f2:	f7ef fa01 	bl	80005f8 <__aeabi_dmul>
 80111f6:	4b28      	ldr	r3, [pc, #160]	@ (8011298 <_strtod_l+0x598>)
 80111f8:	460a      	mov	r2, r1
 80111fa:	400b      	ands	r3, r1
 80111fc:	4927      	ldr	r1, [pc, #156]	@ (801129c <_strtod_l+0x59c>)
 80111fe:	428b      	cmp	r3, r1
 8011200:	4682      	mov	sl, r0
 8011202:	d898      	bhi.n	8011136 <_strtod_l+0x436>
 8011204:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011208:	428b      	cmp	r3, r1
 801120a:	bf86      	itte	hi
 801120c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80112a0 <_strtod_l+0x5a0>
 8011210:	f04f 3aff 	movhi.w	sl, #4294967295
 8011214:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011218:	2300      	movs	r3, #0
 801121a:	9308      	str	r3, [sp, #32]
 801121c:	e07a      	b.n	8011314 <_strtod_l+0x614>
 801121e:	07e2      	lsls	r2, r4, #31
 8011220:	d505      	bpl.n	801122e <_strtod_l+0x52e>
 8011222:	9b08      	ldr	r3, [sp, #32]
 8011224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011228:	f7ef f9e6 	bl	80005f8 <__aeabi_dmul>
 801122c:	2301      	movs	r3, #1
 801122e:	9a08      	ldr	r2, [sp, #32]
 8011230:	3208      	adds	r2, #8
 8011232:	3601      	adds	r6, #1
 8011234:	1064      	asrs	r4, r4, #1
 8011236:	9208      	str	r2, [sp, #32]
 8011238:	e7cd      	b.n	80111d6 <_strtod_l+0x4d6>
 801123a:	d0ed      	beq.n	8011218 <_strtod_l+0x518>
 801123c:	4264      	negs	r4, r4
 801123e:	f014 020f 	ands.w	r2, r4, #15
 8011242:	d00a      	beq.n	801125a <_strtod_l+0x55a>
 8011244:	4b12      	ldr	r3, [pc, #72]	@ (8011290 <_strtod_l+0x590>)
 8011246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801124a:	4650      	mov	r0, sl
 801124c:	4659      	mov	r1, fp
 801124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011252:	f7ef fafb 	bl	800084c <__aeabi_ddiv>
 8011256:	4682      	mov	sl, r0
 8011258:	468b      	mov	fp, r1
 801125a:	1124      	asrs	r4, r4, #4
 801125c:	d0dc      	beq.n	8011218 <_strtod_l+0x518>
 801125e:	2c1f      	cmp	r4, #31
 8011260:	dd20      	ble.n	80112a4 <_strtod_l+0x5a4>
 8011262:	2400      	movs	r4, #0
 8011264:	46a0      	mov	r8, r4
 8011266:	940a      	str	r4, [sp, #40]	@ 0x28
 8011268:	46a1      	mov	r9, r4
 801126a:	9a05      	ldr	r2, [sp, #20]
 801126c:	2322      	movs	r3, #34	@ 0x22
 801126e:	f04f 0a00 	mov.w	sl, #0
 8011272:	f04f 0b00 	mov.w	fp, #0
 8011276:	6013      	str	r3, [r2, #0]
 8011278:	e768      	b.n	801114c <_strtod_l+0x44c>
 801127a:	bf00      	nop
 801127c:	08013599 	.word	0x08013599
 8011280:	08013844 	.word	0x08013844
 8011284:	08013591 	.word	0x08013591
 8011288:	08013675 	.word	0x08013675
 801128c:	08013671 	.word	0x08013671
 8011290:	08013778 	.word	0x08013778
 8011294:	08013750 	.word	0x08013750
 8011298:	7ff00000 	.word	0x7ff00000
 801129c:	7ca00000 	.word	0x7ca00000
 80112a0:	7fefffff 	.word	0x7fefffff
 80112a4:	f014 0310 	ands.w	r3, r4, #16
 80112a8:	bf18      	it	ne
 80112aa:	236a      	movne	r3, #106	@ 0x6a
 80112ac:	4ea9      	ldr	r6, [pc, #676]	@ (8011554 <_strtod_l+0x854>)
 80112ae:	9308      	str	r3, [sp, #32]
 80112b0:	4650      	mov	r0, sl
 80112b2:	4659      	mov	r1, fp
 80112b4:	2300      	movs	r3, #0
 80112b6:	07e2      	lsls	r2, r4, #31
 80112b8:	d504      	bpl.n	80112c4 <_strtod_l+0x5c4>
 80112ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80112be:	f7ef f99b 	bl	80005f8 <__aeabi_dmul>
 80112c2:	2301      	movs	r3, #1
 80112c4:	1064      	asrs	r4, r4, #1
 80112c6:	f106 0608 	add.w	r6, r6, #8
 80112ca:	d1f4      	bne.n	80112b6 <_strtod_l+0x5b6>
 80112cc:	b10b      	cbz	r3, 80112d2 <_strtod_l+0x5d2>
 80112ce:	4682      	mov	sl, r0
 80112d0:	468b      	mov	fp, r1
 80112d2:	9b08      	ldr	r3, [sp, #32]
 80112d4:	b1b3      	cbz	r3, 8011304 <_strtod_l+0x604>
 80112d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80112da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80112de:	2b00      	cmp	r3, #0
 80112e0:	4659      	mov	r1, fp
 80112e2:	dd0f      	ble.n	8011304 <_strtod_l+0x604>
 80112e4:	2b1f      	cmp	r3, #31
 80112e6:	dd55      	ble.n	8011394 <_strtod_l+0x694>
 80112e8:	2b34      	cmp	r3, #52	@ 0x34
 80112ea:	bfde      	ittt	le
 80112ec:	f04f 33ff 	movle.w	r3, #4294967295
 80112f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80112f4:	4093      	lslle	r3, r2
 80112f6:	f04f 0a00 	mov.w	sl, #0
 80112fa:	bfcc      	ite	gt
 80112fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011300:	ea03 0b01 	andle.w	fp, r3, r1
 8011304:	2200      	movs	r2, #0
 8011306:	2300      	movs	r3, #0
 8011308:	4650      	mov	r0, sl
 801130a:	4659      	mov	r1, fp
 801130c:	f7ef fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8011310:	2800      	cmp	r0, #0
 8011312:	d1a6      	bne.n	8011262 <_strtod_l+0x562>
 8011314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011316:	9300      	str	r3, [sp, #0]
 8011318:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801131a:	9805      	ldr	r0, [sp, #20]
 801131c:	462b      	mov	r3, r5
 801131e:	463a      	mov	r2, r7
 8011320:	f7ff f8c6 	bl	80104b0 <__s2b>
 8011324:	900a      	str	r0, [sp, #40]	@ 0x28
 8011326:	2800      	cmp	r0, #0
 8011328:	f43f af05 	beq.w	8011136 <_strtod_l+0x436>
 801132c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801132e:	2a00      	cmp	r2, #0
 8011330:	eba9 0308 	sub.w	r3, r9, r8
 8011334:	bfa8      	it	ge
 8011336:	2300      	movge	r3, #0
 8011338:	9312      	str	r3, [sp, #72]	@ 0x48
 801133a:	2400      	movs	r4, #0
 801133c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011340:	9316      	str	r3, [sp, #88]	@ 0x58
 8011342:	46a0      	mov	r8, r4
 8011344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011346:	9805      	ldr	r0, [sp, #20]
 8011348:	6859      	ldr	r1, [r3, #4]
 801134a:	f7ff f809 	bl	8010360 <_Balloc>
 801134e:	4681      	mov	r9, r0
 8011350:	2800      	cmp	r0, #0
 8011352:	f43f aef4 	beq.w	801113e <_strtod_l+0x43e>
 8011356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011358:	691a      	ldr	r2, [r3, #16]
 801135a:	3202      	adds	r2, #2
 801135c:	f103 010c 	add.w	r1, r3, #12
 8011360:	0092      	lsls	r2, r2, #2
 8011362:	300c      	adds	r0, #12
 8011364:	f7fe f87d 	bl	800f462 <memcpy>
 8011368:	ec4b ab10 	vmov	d0, sl, fp
 801136c:	9805      	ldr	r0, [sp, #20]
 801136e:	aa1c      	add	r2, sp, #112	@ 0x70
 8011370:	a91b      	add	r1, sp, #108	@ 0x6c
 8011372:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011376:	f7ff fbd7 	bl	8010b28 <__d2b>
 801137a:	901a      	str	r0, [sp, #104]	@ 0x68
 801137c:	2800      	cmp	r0, #0
 801137e:	f43f aede 	beq.w	801113e <_strtod_l+0x43e>
 8011382:	9805      	ldr	r0, [sp, #20]
 8011384:	2101      	movs	r1, #1
 8011386:	f7ff f929 	bl	80105dc <__i2b>
 801138a:	4680      	mov	r8, r0
 801138c:	b948      	cbnz	r0, 80113a2 <_strtod_l+0x6a2>
 801138e:	f04f 0800 	mov.w	r8, #0
 8011392:	e6d4      	b.n	801113e <_strtod_l+0x43e>
 8011394:	f04f 32ff 	mov.w	r2, #4294967295
 8011398:	fa02 f303 	lsl.w	r3, r2, r3
 801139c:	ea03 0a0a 	and.w	sl, r3, sl
 80113a0:	e7b0      	b.n	8011304 <_strtod_l+0x604>
 80113a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80113a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80113a6:	2d00      	cmp	r5, #0
 80113a8:	bfab      	itete	ge
 80113aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80113ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80113ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80113b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80113b2:	bfac      	ite	ge
 80113b4:	18ef      	addge	r7, r5, r3
 80113b6:	1b5e      	sublt	r6, r3, r5
 80113b8:	9b08      	ldr	r3, [sp, #32]
 80113ba:	1aed      	subs	r5, r5, r3
 80113bc:	4415      	add	r5, r2
 80113be:	4b66      	ldr	r3, [pc, #408]	@ (8011558 <_strtod_l+0x858>)
 80113c0:	3d01      	subs	r5, #1
 80113c2:	429d      	cmp	r5, r3
 80113c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80113c8:	da50      	bge.n	801146c <_strtod_l+0x76c>
 80113ca:	1b5b      	subs	r3, r3, r5
 80113cc:	2b1f      	cmp	r3, #31
 80113ce:	eba2 0203 	sub.w	r2, r2, r3
 80113d2:	f04f 0101 	mov.w	r1, #1
 80113d6:	dc3d      	bgt.n	8011454 <_strtod_l+0x754>
 80113d8:	fa01 f303 	lsl.w	r3, r1, r3
 80113dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80113de:	2300      	movs	r3, #0
 80113e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80113e2:	18bd      	adds	r5, r7, r2
 80113e4:	9b08      	ldr	r3, [sp, #32]
 80113e6:	42af      	cmp	r7, r5
 80113e8:	4416      	add	r6, r2
 80113ea:	441e      	add	r6, r3
 80113ec:	463b      	mov	r3, r7
 80113ee:	bfa8      	it	ge
 80113f0:	462b      	movge	r3, r5
 80113f2:	42b3      	cmp	r3, r6
 80113f4:	bfa8      	it	ge
 80113f6:	4633      	movge	r3, r6
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	bfc2      	ittt	gt
 80113fc:	1aed      	subgt	r5, r5, r3
 80113fe:	1af6      	subgt	r6, r6, r3
 8011400:	1aff      	subgt	r7, r7, r3
 8011402:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011404:	2b00      	cmp	r3, #0
 8011406:	dd16      	ble.n	8011436 <_strtod_l+0x736>
 8011408:	4641      	mov	r1, r8
 801140a:	9805      	ldr	r0, [sp, #20]
 801140c:	461a      	mov	r2, r3
 801140e:	f7ff f9a5 	bl	801075c <__pow5mult>
 8011412:	4680      	mov	r8, r0
 8011414:	2800      	cmp	r0, #0
 8011416:	d0ba      	beq.n	801138e <_strtod_l+0x68e>
 8011418:	4601      	mov	r1, r0
 801141a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801141c:	9805      	ldr	r0, [sp, #20]
 801141e:	f7ff f8f3 	bl	8010608 <__multiply>
 8011422:	900e      	str	r0, [sp, #56]	@ 0x38
 8011424:	2800      	cmp	r0, #0
 8011426:	f43f ae8a 	beq.w	801113e <_strtod_l+0x43e>
 801142a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801142c:	9805      	ldr	r0, [sp, #20]
 801142e:	f7fe ffd7 	bl	80103e0 <_Bfree>
 8011432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011434:	931a      	str	r3, [sp, #104]	@ 0x68
 8011436:	2d00      	cmp	r5, #0
 8011438:	dc1d      	bgt.n	8011476 <_strtod_l+0x776>
 801143a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801143c:	2b00      	cmp	r3, #0
 801143e:	dd23      	ble.n	8011488 <_strtod_l+0x788>
 8011440:	4649      	mov	r1, r9
 8011442:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011444:	9805      	ldr	r0, [sp, #20]
 8011446:	f7ff f989 	bl	801075c <__pow5mult>
 801144a:	4681      	mov	r9, r0
 801144c:	b9e0      	cbnz	r0, 8011488 <_strtod_l+0x788>
 801144e:	f04f 0900 	mov.w	r9, #0
 8011452:	e674      	b.n	801113e <_strtod_l+0x43e>
 8011454:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011458:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801145c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011460:	35e2      	adds	r5, #226	@ 0xe2
 8011462:	fa01 f305 	lsl.w	r3, r1, r5
 8011466:	9310      	str	r3, [sp, #64]	@ 0x40
 8011468:	9113      	str	r1, [sp, #76]	@ 0x4c
 801146a:	e7ba      	b.n	80113e2 <_strtod_l+0x6e2>
 801146c:	2300      	movs	r3, #0
 801146e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011470:	2301      	movs	r3, #1
 8011472:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011474:	e7b5      	b.n	80113e2 <_strtod_l+0x6e2>
 8011476:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011478:	9805      	ldr	r0, [sp, #20]
 801147a:	462a      	mov	r2, r5
 801147c:	f7ff f9c8 	bl	8010810 <__lshift>
 8011480:	901a      	str	r0, [sp, #104]	@ 0x68
 8011482:	2800      	cmp	r0, #0
 8011484:	d1d9      	bne.n	801143a <_strtod_l+0x73a>
 8011486:	e65a      	b.n	801113e <_strtod_l+0x43e>
 8011488:	2e00      	cmp	r6, #0
 801148a:	dd07      	ble.n	801149c <_strtod_l+0x79c>
 801148c:	4649      	mov	r1, r9
 801148e:	9805      	ldr	r0, [sp, #20]
 8011490:	4632      	mov	r2, r6
 8011492:	f7ff f9bd 	bl	8010810 <__lshift>
 8011496:	4681      	mov	r9, r0
 8011498:	2800      	cmp	r0, #0
 801149a:	d0d8      	beq.n	801144e <_strtod_l+0x74e>
 801149c:	2f00      	cmp	r7, #0
 801149e:	dd08      	ble.n	80114b2 <_strtod_l+0x7b2>
 80114a0:	4641      	mov	r1, r8
 80114a2:	9805      	ldr	r0, [sp, #20]
 80114a4:	463a      	mov	r2, r7
 80114a6:	f7ff f9b3 	bl	8010810 <__lshift>
 80114aa:	4680      	mov	r8, r0
 80114ac:	2800      	cmp	r0, #0
 80114ae:	f43f ae46 	beq.w	801113e <_strtod_l+0x43e>
 80114b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80114b4:	9805      	ldr	r0, [sp, #20]
 80114b6:	464a      	mov	r2, r9
 80114b8:	f7ff fa32 	bl	8010920 <__mdiff>
 80114bc:	4604      	mov	r4, r0
 80114be:	2800      	cmp	r0, #0
 80114c0:	f43f ae3d 	beq.w	801113e <_strtod_l+0x43e>
 80114c4:	68c3      	ldr	r3, [r0, #12]
 80114c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80114c8:	2300      	movs	r3, #0
 80114ca:	60c3      	str	r3, [r0, #12]
 80114cc:	4641      	mov	r1, r8
 80114ce:	f7ff fa0b 	bl	80108e8 <__mcmp>
 80114d2:	2800      	cmp	r0, #0
 80114d4:	da46      	bge.n	8011564 <_strtod_l+0x864>
 80114d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114d8:	ea53 030a 	orrs.w	r3, r3, sl
 80114dc:	d16c      	bne.n	80115b8 <_strtod_l+0x8b8>
 80114de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d168      	bne.n	80115b8 <_strtod_l+0x8b8>
 80114e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80114ea:	0d1b      	lsrs	r3, r3, #20
 80114ec:	051b      	lsls	r3, r3, #20
 80114ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80114f2:	d961      	bls.n	80115b8 <_strtod_l+0x8b8>
 80114f4:	6963      	ldr	r3, [r4, #20]
 80114f6:	b913      	cbnz	r3, 80114fe <_strtod_l+0x7fe>
 80114f8:	6923      	ldr	r3, [r4, #16]
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	dd5c      	ble.n	80115b8 <_strtod_l+0x8b8>
 80114fe:	4621      	mov	r1, r4
 8011500:	2201      	movs	r2, #1
 8011502:	9805      	ldr	r0, [sp, #20]
 8011504:	f7ff f984 	bl	8010810 <__lshift>
 8011508:	4641      	mov	r1, r8
 801150a:	4604      	mov	r4, r0
 801150c:	f7ff f9ec 	bl	80108e8 <__mcmp>
 8011510:	2800      	cmp	r0, #0
 8011512:	dd51      	ble.n	80115b8 <_strtod_l+0x8b8>
 8011514:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011518:	9a08      	ldr	r2, [sp, #32]
 801151a:	0d1b      	lsrs	r3, r3, #20
 801151c:	051b      	lsls	r3, r3, #20
 801151e:	2a00      	cmp	r2, #0
 8011520:	d06b      	beq.n	80115fa <_strtod_l+0x8fa>
 8011522:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011526:	d868      	bhi.n	80115fa <_strtod_l+0x8fa>
 8011528:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801152c:	f67f ae9d 	bls.w	801126a <_strtod_l+0x56a>
 8011530:	4b0a      	ldr	r3, [pc, #40]	@ (801155c <_strtod_l+0x85c>)
 8011532:	4650      	mov	r0, sl
 8011534:	4659      	mov	r1, fp
 8011536:	2200      	movs	r2, #0
 8011538:	f7ef f85e 	bl	80005f8 <__aeabi_dmul>
 801153c:	4b08      	ldr	r3, [pc, #32]	@ (8011560 <_strtod_l+0x860>)
 801153e:	400b      	ands	r3, r1
 8011540:	4682      	mov	sl, r0
 8011542:	468b      	mov	fp, r1
 8011544:	2b00      	cmp	r3, #0
 8011546:	f47f ae05 	bne.w	8011154 <_strtod_l+0x454>
 801154a:	9a05      	ldr	r2, [sp, #20]
 801154c:	2322      	movs	r3, #34	@ 0x22
 801154e:	6013      	str	r3, [r2, #0]
 8011550:	e600      	b.n	8011154 <_strtod_l+0x454>
 8011552:	bf00      	nop
 8011554:	08013870 	.word	0x08013870
 8011558:	fffffc02 	.word	0xfffffc02
 801155c:	39500000 	.word	0x39500000
 8011560:	7ff00000 	.word	0x7ff00000
 8011564:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011568:	d165      	bne.n	8011636 <_strtod_l+0x936>
 801156a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801156c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011570:	b35a      	cbz	r2, 80115ca <_strtod_l+0x8ca>
 8011572:	4a9f      	ldr	r2, [pc, #636]	@ (80117f0 <_strtod_l+0xaf0>)
 8011574:	4293      	cmp	r3, r2
 8011576:	d12b      	bne.n	80115d0 <_strtod_l+0x8d0>
 8011578:	9b08      	ldr	r3, [sp, #32]
 801157a:	4651      	mov	r1, sl
 801157c:	b303      	cbz	r3, 80115c0 <_strtod_l+0x8c0>
 801157e:	4b9d      	ldr	r3, [pc, #628]	@ (80117f4 <_strtod_l+0xaf4>)
 8011580:	465a      	mov	r2, fp
 8011582:	4013      	ands	r3, r2
 8011584:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011588:	f04f 32ff 	mov.w	r2, #4294967295
 801158c:	d81b      	bhi.n	80115c6 <_strtod_l+0x8c6>
 801158e:	0d1b      	lsrs	r3, r3, #20
 8011590:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011594:	fa02 f303 	lsl.w	r3, r2, r3
 8011598:	4299      	cmp	r1, r3
 801159a:	d119      	bne.n	80115d0 <_strtod_l+0x8d0>
 801159c:	4b96      	ldr	r3, [pc, #600]	@ (80117f8 <_strtod_l+0xaf8>)
 801159e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d102      	bne.n	80115aa <_strtod_l+0x8aa>
 80115a4:	3101      	adds	r1, #1
 80115a6:	f43f adca 	beq.w	801113e <_strtod_l+0x43e>
 80115aa:	4b92      	ldr	r3, [pc, #584]	@ (80117f4 <_strtod_l+0xaf4>)
 80115ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80115ae:	401a      	ands	r2, r3
 80115b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80115b4:	f04f 0a00 	mov.w	sl, #0
 80115b8:	9b08      	ldr	r3, [sp, #32]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d1b8      	bne.n	8011530 <_strtod_l+0x830>
 80115be:	e5c9      	b.n	8011154 <_strtod_l+0x454>
 80115c0:	f04f 33ff 	mov.w	r3, #4294967295
 80115c4:	e7e8      	b.n	8011598 <_strtod_l+0x898>
 80115c6:	4613      	mov	r3, r2
 80115c8:	e7e6      	b.n	8011598 <_strtod_l+0x898>
 80115ca:	ea53 030a 	orrs.w	r3, r3, sl
 80115ce:	d0a1      	beq.n	8011514 <_strtod_l+0x814>
 80115d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80115d2:	b1db      	cbz	r3, 801160c <_strtod_l+0x90c>
 80115d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80115d6:	4213      	tst	r3, r2
 80115d8:	d0ee      	beq.n	80115b8 <_strtod_l+0x8b8>
 80115da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115dc:	9a08      	ldr	r2, [sp, #32]
 80115de:	4650      	mov	r0, sl
 80115e0:	4659      	mov	r1, fp
 80115e2:	b1bb      	cbz	r3, 8011614 <_strtod_l+0x914>
 80115e4:	f7ff fb6e 	bl	8010cc4 <sulp>
 80115e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80115ec:	ec53 2b10 	vmov	r2, r3, d0
 80115f0:	f7ee fe4c 	bl	800028c <__adddf3>
 80115f4:	4682      	mov	sl, r0
 80115f6:	468b      	mov	fp, r1
 80115f8:	e7de      	b.n	80115b8 <_strtod_l+0x8b8>
 80115fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80115fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011602:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011606:	f04f 3aff 	mov.w	sl, #4294967295
 801160a:	e7d5      	b.n	80115b8 <_strtod_l+0x8b8>
 801160c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801160e:	ea13 0f0a 	tst.w	r3, sl
 8011612:	e7e1      	b.n	80115d8 <_strtod_l+0x8d8>
 8011614:	f7ff fb56 	bl	8010cc4 <sulp>
 8011618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801161c:	ec53 2b10 	vmov	r2, r3, d0
 8011620:	f7ee fe32 	bl	8000288 <__aeabi_dsub>
 8011624:	2200      	movs	r2, #0
 8011626:	2300      	movs	r3, #0
 8011628:	4682      	mov	sl, r0
 801162a:	468b      	mov	fp, r1
 801162c:	f7ef fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011630:	2800      	cmp	r0, #0
 8011632:	d0c1      	beq.n	80115b8 <_strtod_l+0x8b8>
 8011634:	e619      	b.n	801126a <_strtod_l+0x56a>
 8011636:	4641      	mov	r1, r8
 8011638:	4620      	mov	r0, r4
 801163a:	f7ff facd 	bl	8010bd8 <__ratio>
 801163e:	ec57 6b10 	vmov	r6, r7, d0
 8011642:	2200      	movs	r2, #0
 8011644:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011648:	4630      	mov	r0, r6
 801164a:	4639      	mov	r1, r7
 801164c:	f7ef fa50 	bl	8000af0 <__aeabi_dcmple>
 8011650:	2800      	cmp	r0, #0
 8011652:	d06f      	beq.n	8011734 <_strtod_l+0xa34>
 8011654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011656:	2b00      	cmp	r3, #0
 8011658:	d17a      	bne.n	8011750 <_strtod_l+0xa50>
 801165a:	f1ba 0f00 	cmp.w	sl, #0
 801165e:	d158      	bne.n	8011712 <_strtod_l+0xa12>
 8011660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011666:	2b00      	cmp	r3, #0
 8011668:	d15a      	bne.n	8011720 <_strtod_l+0xa20>
 801166a:	4b64      	ldr	r3, [pc, #400]	@ (80117fc <_strtod_l+0xafc>)
 801166c:	2200      	movs	r2, #0
 801166e:	4630      	mov	r0, r6
 8011670:	4639      	mov	r1, r7
 8011672:	f7ef fa33 	bl	8000adc <__aeabi_dcmplt>
 8011676:	2800      	cmp	r0, #0
 8011678:	d159      	bne.n	801172e <_strtod_l+0xa2e>
 801167a:	4630      	mov	r0, r6
 801167c:	4639      	mov	r1, r7
 801167e:	4b60      	ldr	r3, [pc, #384]	@ (8011800 <_strtod_l+0xb00>)
 8011680:	2200      	movs	r2, #0
 8011682:	f7ee ffb9 	bl	80005f8 <__aeabi_dmul>
 8011686:	4606      	mov	r6, r0
 8011688:	460f      	mov	r7, r1
 801168a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801168e:	9606      	str	r6, [sp, #24]
 8011690:	9307      	str	r3, [sp, #28]
 8011692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011696:	4d57      	ldr	r5, [pc, #348]	@ (80117f4 <_strtod_l+0xaf4>)
 8011698:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801169c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801169e:	401d      	ands	r5, r3
 80116a0:	4b58      	ldr	r3, [pc, #352]	@ (8011804 <_strtod_l+0xb04>)
 80116a2:	429d      	cmp	r5, r3
 80116a4:	f040 80b2 	bne.w	801180c <_strtod_l+0xb0c>
 80116a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80116aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80116ae:	ec4b ab10 	vmov	d0, sl, fp
 80116b2:	f7ff f9c9 	bl	8010a48 <__ulp>
 80116b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80116ba:	ec51 0b10 	vmov	r0, r1, d0
 80116be:	f7ee ff9b 	bl	80005f8 <__aeabi_dmul>
 80116c2:	4652      	mov	r2, sl
 80116c4:	465b      	mov	r3, fp
 80116c6:	f7ee fde1 	bl	800028c <__adddf3>
 80116ca:	460b      	mov	r3, r1
 80116cc:	4949      	ldr	r1, [pc, #292]	@ (80117f4 <_strtod_l+0xaf4>)
 80116ce:	4a4e      	ldr	r2, [pc, #312]	@ (8011808 <_strtod_l+0xb08>)
 80116d0:	4019      	ands	r1, r3
 80116d2:	4291      	cmp	r1, r2
 80116d4:	4682      	mov	sl, r0
 80116d6:	d942      	bls.n	801175e <_strtod_l+0xa5e>
 80116d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80116da:	4b47      	ldr	r3, [pc, #284]	@ (80117f8 <_strtod_l+0xaf8>)
 80116dc:	429a      	cmp	r2, r3
 80116de:	d103      	bne.n	80116e8 <_strtod_l+0x9e8>
 80116e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116e2:	3301      	adds	r3, #1
 80116e4:	f43f ad2b 	beq.w	801113e <_strtod_l+0x43e>
 80116e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80117f8 <_strtod_l+0xaf8>
 80116ec:	f04f 3aff 	mov.w	sl, #4294967295
 80116f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80116f2:	9805      	ldr	r0, [sp, #20]
 80116f4:	f7fe fe74 	bl	80103e0 <_Bfree>
 80116f8:	9805      	ldr	r0, [sp, #20]
 80116fa:	4649      	mov	r1, r9
 80116fc:	f7fe fe70 	bl	80103e0 <_Bfree>
 8011700:	9805      	ldr	r0, [sp, #20]
 8011702:	4641      	mov	r1, r8
 8011704:	f7fe fe6c 	bl	80103e0 <_Bfree>
 8011708:	9805      	ldr	r0, [sp, #20]
 801170a:	4621      	mov	r1, r4
 801170c:	f7fe fe68 	bl	80103e0 <_Bfree>
 8011710:	e618      	b.n	8011344 <_strtod_l+0x644>
 8011712:	f1ba 0f01 	cmp.w	sl, #1
 8011716:	d103      	bne.n	8011720 <_strtod_l+0xa20>
 8011718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801171a:	2b00      	cmp	r3, #0
 801171c:	f43f ada5 	beq.w	801126a <_strtod_l+0x56a>
 8011720:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80117d0 <_strtod_l+0xad0>
 8011724:	4f35      	ldr	r7, [pc, #212]	@ (80117fc <_strtod_l+0xafc>)
 8011726:	ed8d 7b06 	vstr	d7, [sp, #24]
 801172a:	2600      	movs	r6, #0
 801172c:	e7b1      	b.n	8011692 <_strtod_l+0x992>
 801172e:	4f34      	ldr	r7, [pc, #208]	@ (8011800 <_strtod_l+0xb00>)
 8011730:	2600      	movs	r6, #0
 8011732:	e7aa      	b.n	801168a <_strtod_l+0x98a>
 8011734:	4b32      	ldr	r3, [pc, #200]	@ (8011800 <_strtod_l+0xb00>)
 8011736:	4630      	mov	r0, r6
 8011738:	4639      	mov	r1, r7
 801173a:	2200      	movs	r2, #0
 801173c:	f7ee ff5c 	bl	80005f8 <__aeabi_dmul>
 8011740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011742:	4606      	mov	r6, r0
 8011744:	460f      	mov	r7, r1
 8011746:	2b00      	cmp	r3, #0
 8011748:	d09f      	beq.n	801168a <_strtod_l+0x98a>
 801174a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801174e:	e7a0      	b.n	8011692 <_strtod_l+0x992>
 8011750:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80117d8 <_strtod_l+0xad8>
 8011754:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011758:	ec57 6b17 	vmov	r6, r7, d7
 801175c:	e799      	b.n	8011692 <_strtod_l+0x992>
 801175e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011762:	9b08      	ldr	r3, [sp, #32]
 8011764:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011768:	2b00      	cmp	r3, #0
 801176a:	d1c1      	bne.n	80116f0 <_strtod_l+0x9f0>
 801176c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011770:	0d1b      	lsrs	r3, r3, #20
 8011772:	051b      	lsls	r3, r3, #20
 8011774:	429d      	cmp	r5, r3
 8011776:	d1bb      	bne.n	80116f0 <_strtod_l+0x9f0>
 8011778:	4630      	mov	r0, r6
 801177a:	4639      	mov	r1, r7
 801177c:	f7ef fa9c 	bl	8000cb8 <__aeabi_d2lz>
 8011780:	f7ee ff0c 	bl	800059c <__aeabi_l2d>
 8011784:	4602      	mov	r2, r0
 8011786:	460b      	mov	r3, r1
 8011788:	4630      	mov	r0, r6
 801178a:	4639      	mov	r1, r7
 801178c:	f7ee fd7c 	bl	8000288 <__aeabi_dsub>
 8011790:	460b      	mov	r3, r1
 8011792:	4602      	mov	r2, r0
 8011794:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011798:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801179c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801179e:	ea46 060a 	orr.w	r6, r6, sl
 80117a2:	431e      	orrs	r6, r3
 80117a4:	d06f      	beq.n	8011886 <_strtod_l+0xb86>
 80117a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80117e0 <_strtod_l+0xae0>)
 80117a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ac:	f7ef f996 	bl	8000adc <__aeabi_dcmplt>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	f47f accf 	bne.w	8011154 <_strtod_l+0x454>
 80117b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80117e8 <_strtod_l+0xae8>)
 80117b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80117c0:	f7ef f9aa 	bl	8000b18 <__aeabi_dcmpgt>
 80117c4:	2800      	cmp	r0, #0
 80117c6:	d093      	beq.n	80116f0 <_strtod_l+0x9f0>
 80117c8:	e4c4      	b.n	8011154 <_strtod_l+0x454>
 80117ca:	bf00      	nop
 80117cc:	f3af 8000 	nop.w
 80117d0:	00000000 	.word	0x00000000
 80117d4:	bff00000 	.word	0xbff00000
 80117d8:	00000000 	.word	0x00000000
 80117dc:	3ff00000 	.word	0x3ff00000
 80117e0:	94a03595 	.word	0x94a03595
 80117e4:	3fdfffff 	.word	0x3fdfffff
 80117e8:	35afe535 	.word	0x35afe535
 80117ec:	3fe00000 	.word	0x3fe00000
 80117f0:	000fffff 	.word	0x000fffff
 80117f4:	7ff00000 	.word	0x7ff00000
 80117f8:	7fefffff 	.word	0x7fefffff
 80117fc:	3ff00000 	.word	0x3ff00000
 8011800:	3fe00000 	.word	0x3fe00000
 8011804:	7fe00000 	.word	0x7fe00000
 8011808:	7c9fffff 	.word	0x7c9fffff
 801180c:	9b08      	ldr	r3, [sp, #32]
 801180e:	b323      	cbz	r3, 801185a <_strtod_l+0xb5a>
 8011810:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011814:	d821      	bhi.n	801185a <_strtod_l+0xb5a>
 8011816:	a328      	add	r3, pc, #160	@ (adr r3, 80118b8 <_strtod_l+0xbb8>)
 8011818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801181c:	4630      	mov	r0, r6
 801181e:	4639      	mov	r1, r7
 8011820:	f7ef f966 	bl	8000af0 <__aeabi_dcmple>
 8011824:	b1a0      	cbz	r0, 8011850 <_strtod_l+0xb50>
 8011826:	4639      	mov	r1, r7
 8011828:	4630      	mov	r0, r6
 801182a:	f7ef f9bd 	bl	8000ba8 <__aeabi_d2uiz>
 801182e:	2801      	cmp	r0, #1
 8011830:	bf38      	it	cc
 8011832:	2001      	movcc	r0, #1
 8011834:	f7ee fe66 	bl	8000504 <__aeabi_ui2d>
 8011838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801183a:	4606      	mov	r6, r0
 801183c:	460f      	mov	r7, r1
 801183e:	b9fb      	cbnz	r3, 8011880 <_strtod_l+0xb80>
 8011840:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011844:	9014      	str	r0, [sp, #80]	@ 0x50
 8011846:	9315      	str	r3, [sp, #84]	@ 0x54
 8011848:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801184c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011850:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011852:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011856:	1b5b      	subs	r3, r3, r5
 8011858:	9311      	str	r3, [sp, #68]	@ 0x44
 801185a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801185e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011862:	f7ff f8f1 	bl	8010a48 <__ulp>
 8011866:	4650      	mov	r0, sl
 8011868:	ec53 2b10 	vmov	r2, r3, d0
 801186c:	4659      	mov	r1, fp
 801186e:	f7ee fec3 	bl	80005f8 <__aeabi_dmul>
 8011872:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011876:	f7ee fd09 	bl	800028c <__adddf3>
 801187a:	4682      	mov	sl, r0
 801187c:	468b      	mov	fp, r1
 801187e:	e770      	b.n	8011762 <_strtod_l+0xa62>
 8011880:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011884:	e7e0      	b.n	8011848 <_strtod_l+0xb48>
 8011886:	a30e      	add	r3, pc, #56	@ (adr r3, 80118c0 <_strtod_l+0xbc0>)
 8011888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188c:	f7ef f926 	bl	8000adc <__aeabi_dcmplt>
 8011890:	e798      	b.n	80117c4 <_strtod_l+0xac4>
 8011892:	2300      	movs	r3, #0
 8011894:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011896:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011898:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801189a:	6013      	str	r3, [r2, #0]
 801189c:	f7ff ba6d 	b.w	8010d7a <_strtod_l+0x7a>
 80118a0:	2a65      	cmp	r2, #101	@ 0x65
 80118a2:	f43f ab66 	beq.w	8010f72 <_strtod_l+0x272>
 80118a6:	2a45      	cmp	r2, #69	@ 0x45
 80118a8:	f43f ab63 	beq.w	8010f72 <_strtod_l+0x272>
 80118ac:	2301      	movs	r3, #1
 80118ae:	f7ff bb9e 	b.w	8010fee <_strtod_l+0x2ee>
 80118b2:	bf00      	nop
 80118b4:	f3af 8000 	nop.w
 80118b8:	ffc00000 	.word	0xffc00000
 80118bc:	41dfffff 	.word	0x41dfffff
 80118c0:	94a03595 	.word	0x94a03595
 80118c4:	3fcfffff 	.word	0x3fcfffff

080118c8 <_strtod_r>:
 80118c8:	4b01      	ldr	r3, [pc, #4]	@ (80118d0 <_strtod_r+0x8>)
 80118ca:	f7ff ba19 	b.w	8010d00 <_strtod_l>
 80118ce:	bf00      	nop
 80118d0:	20000118 	.word	0x20000118

080118d4 <_strtol_l.constprop.0>:
 80118d4:	2b24      	cmp	r3, #36	@ 0x24
 80118d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118da:	4686      	mov	lr, r0
 80118dc:	4690      	mov	r8, r2
 80118de:	d801      	bhi.n	80118e4 <_strtol_l.constprop.0+0x10>
 80118e0:	2b01      	cmp	r3, #1
 80118e2:	d106      	bne.n	80118f2 <_strtol_l.constprop.0+0x1e>
 80118e4:	f7fd fd90 	bl	800f408 <__errno>
 80118e8:	2316      	movs	r3, #22
 80118ea:	6003      	str	r3, [r0, #0]
 80118ec:	2000      	movs	r0, #0
 80118ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118f2:	4834      	ldr	r0, [pc, #208]	@ (80119c4 <_strtol_l.constprop.0+0xf0>)
 80118f4:	460d      	mov	r5, r1
 80118f6:	462a      	mov	r2, r5
 80118f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118fc:	5d06      	ldrb	r6, [r0, r4]
 80118fe:	f016 0608 	ands.w	r6, r6, #8
 8011902:	d1f8      	bne.n	80118f6 <_strtol_l.constprop.0+0x22>
 8011904:	2c2d      	cmp	r4, #45	@ 0x2d
 8011906:	d12d      	bne.n	8011964 <_strtol_l.constprop.0+0x90>
 8011908:	782c      	ldrb	r4, [r5, #0]
 801190a:	2601      	movs	r6, #1
 801190c:	1c95      	adds	r5, r2, #2
 801190e:	f033 0210 	bics.w	r2, r3, #16
 8011912:	d109      	bne.n	8011928 <_strtol_l.constprop.0+0x54>
 8011914:	2c30      	cmp	r4, #48	@ 0x30
 8011916:	d12a      	bne.n	801196e <_strtol_l.constprop.0+0x9a>
 8011918:	782a      	ldrb	r2, [r5, #0]
 801191a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801191e:	2a58      	cmp	r2, #88	@ 0x58
 8011920:	d125      	bne.n	801196e <_strtol_l.constprop.0+0x9a>
 8011922:	786c      	ldrb	r4, [r5, #1]
 8011924:	2310      	movs	r3, #16
 8011926:	3502      	adds	r5, #2
 8011928:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801192c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011930:	2200      	movs	r2, #0
 8011932:	fbbc f9f3 	udiv	r9, ip, r3
 8011936:	4610      	mov	r0, r2
 8011938:	fb03 ca19 	mls	sl, r3, r9, ip
 801193c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011940:	2f09      	cmp	r7, #9
 8011942:	d81b      	bhi.n	801197c <_strtol_l.constprop.0+0xa8>
 8011944:	463c      	mov	r4, r7
 8011946:	42a3      	cmp	r3, r4
 8011948:	dd27      	ble.n	801199a <_strtol_l.constprop.0+0xc6>
 801194a:	1c57      	adds	r7, r2, #1
 801194c:	d007      	beq.n	801195e <_strtol_l.constprop.0+0x8a>
 801194e:	4581      	cmp	r9, r0
 8011950:	d320      	bcc.n	8011994 <_strtol_l.constprop.0+0xc0>
 8011952:	d101      	bne.n	8011958 <_strtol_l.constprop.0+0x84>
 8011954:	45a2      	cmp	sl, r4
 8011956:	db1d      	blt.n	8011994 <_strtol_l.constprop.0+0xc0>
 8011958:	fb00 4003 	mla	r0, r0, r3, r4
 801195c:	2201      	movs	r2, #1
 801195e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011962:	e7eb      	b.n	801193c <_strtol_l.constprop.0+0x68>
 8011964:	2c2b      	cmp	r4, #43	@ 0x2b
 8011966:	bf04      	itt	eq
 8011968:	782c      	ldrbeq	r4, [r5, #0]
 801196a:	1c95      	addeq	r5, r2, #2
 801196c:	e7cf      	b.n	801190e <_strtol_l.constprop.0+0x3a>
 801196e:	2b00      	cmp	r3, #0
 8011970:	d1da      	bne.n	8011928 <_strtol_l.constprop.0+0x54>
 8011972:	2c30      	cmp	r4, #48	@ 0x30
 8011974:	bf0c      	ite	eq
 8011976:	2308      	moveq	r3, #8
 8011978:	230a      	movne	r3, #10
 801197a:	e7d5      	b.n	8011928 <_strtol_l.constprop.0+0x54>
 801197c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011980:	2f19      	cmp	r7, #25
 8011982:	d801      	bhi.n	8011988 <_strtol_l.constprop.0+0xb4>
 8011984:	3c37      	subs	r4, #55	@ 0x37
 8011986:	e7de      	b.n	8011946 <_strtol_l.constprop.0+0x72>
 8011988:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801198c:	2f19      	cmp	r7, #25
 801198e:	d804      	bhi.n	801199a <_strtol_l.constprop.0+0xc6>
 8011990:	3c57      	subs	r4, #87	@ 0x57
 8011992:	e7d8      	b.n	8011946 <_strtol_l.constprop.0+0x72>
 8011994:	f04f 32ff 	mov.w	r2, #4294967295
 8011998:	e7e1      	b.n	801195e <_strtol_l.constprop.0+0x8a>
 801199a:	1c53      	adds	r3, r2, #1
 801199c:	d108      	bne.n	80119b0 <_strtol_l.constprop.0+0xdc>
 801199e:	2322      	movs	r3, #34	@ 0x22
 80119a0:	f8ce 3000 	str.w	r3, [lr]
 80119a4:	4660      	mov	r0, ip
 80119a6:	f1b8 0f00 	cmp.w	r8, #0
 80119aa:	d0a0      	beq.n	80118ee <_strtol_l.constprop.0+0x1a>
 80119ac:	1e69      	subs	r1, r5, #1
 80119ae:	e006      	b.n	80119be <_strtol_l.constprop.0+0xea>
 80119b0:	b106      	cbz	r6, 80119b4 <_strtol_l.constprop.0+0xe0>
 80119b2:	4240      	negs	r0, r0
 80119b4:	f1b8 0f00 	cmp.w	r8, #0
 80119b8:	d099      	beq.n	80118ee <_strtol_l.constprop.0+0x1a>
 80119ba:	2a00      	cmp	r2, #0
 80119bc:	d1f6      	bne.n	80119ac <_strtol_l.constprop.0+0xd8>
 80119be:	f8c8 1000 	str.w	r1, [r8]
 80119c2:	e794      	b.n	80118ee <_strtol_l.constprop.0+0x1a>
 80119c4:	08013899 	.word	0x08013899

080119c8 <_strtol_r>:
 80119c8:	f7ff bf84 	b.w	80118d4 <_strtol_l.constprop.0>

080119cc <__ssputs_r>:
 80119cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119d0:	688e      	ldr	r6, [r1, #8]
 80119d2:	461f      	mov	r7, r3
 80119d4:	42be      	cmp	r6, r7
 80119d6:	680b      	ldr	r3, [r1, #0]
 80119d8:	4682      	mov	sl, r0
 80119da:	460c      	mov	r4, r1
 80119dc:	4690      	mov	r8, r2
 80119de:	d82d      	bhi.n	8011a3c <__ssputs_r+0x70>
 80119e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80119e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80119e8:	d026      	beq.n	8011a38 <__ssputs_r+0x6c>
 80119ea:	6965      	ldr	r5, [r4, #20]
 80119ec:	6909      	ldr	r1, [r1, #16]
 80119ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80119f2:	eba3 0901 	sub.w	r9, r3, r1
 80119f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80119fa:	1c7b      	adds	r3, r7, #1
 80119fc:	444b      	add	r3, r9
 80119fe:	106d      	asrs	r5, r5, #1
 8011a00:	429d      	cmp	r5, r3
 8011a02:	bf38      	it	cc
 8011a04:	461d      	movcc	r5, r3
 8011a06:	0553      	lsls	r3, r2, #21
 8011a08:	d527      	bpl.n	8011a5a <__ssputs_r+0x8e>
 8011a0a:	4629      	mov	r1, r5
 8011a0c:	f7fe fc1c 	bl	8010248 <_malloc_r>
 8011a10:	4606      	mov	r6, r0
 8011a12:	b360      	cbz	r0, 8011a6e <__ssputs_r+0xa2>
 8011a14:	6921      	ldr	r1, [r4, #16]
 8011a16:	464a      	mov	r2, r9
 8011a18:	f7fd fd23 	bl	800f462 <memcpy>
 8011a1c:	89a3      	ldrh	r3, [r4, #12]
 8011a1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a26:	81a3      	strh	r3, [r4, #12]
 8011a28:	6126      	str	r6, [r4, #16]
 8011a2a:	6165      	str	r5, [r4, #20]
 8011a2c:	444e      	add	r6, r9
 8011a2e:	eba5 0509 	sub.w	r5, r5, r9
 8011a32:	6026      	str	r6, [r4, #0]
 8011a34:	60a5      	str	r5, [r4, #8]
 8011a36:	463e      	mov	r6, r7
 8011a38:	42be      	cmp	r6, r7
 8011a3a:	d900      	bls.n	8011a3e <__ssputs_r+0x72>
 8011a3c:	463e      	mov	r6, r7
 8011a3e:	6820      	ldr	r0, [r4, #0]
 8011a40:	4632      	mov	r2, r6
 8011a42:	4641      	mov	r1, r8
 8011a44:	f000 fb7c 	bl	8012140 <memmove>
 8011a48:	68a3      	ldr	r3, [r4, #8]
 8011a4a:	1b9b      	subs	r3, r3, r6
 8011a4c:	60a3      	str	r3, [r4, #8]
 8011a4e:	6823      	ldr	r3, [r4, #0]
 8011a50:	4433      	add	r3, r6
 8011a52:	6023      	str	r3, [r4, #0]
 8011a54:	2000      	movs	r0, #0
 8011a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a5a:	462a      	mov	r2, r5
 8011a5c:	f000 ff29 	bl	80128b2 <_realloc_r>
 8011a60:	4606      	mov	r6, r0
 8011a62:	2800      	cmp	r0, #0
 8011a64:	d1e0      	bne.n	8011a28 <__ssputs_r+0x5c>
 8011a66:	6921      	ldr	r1, [r4, #16]
 8011a68:	4650      	mov	r0, sl
 8011a6a:	f7fe fb79 	bl	8010160 <_free_r>
 8011a6e:	230c      	movs	r3, #12
 8011a70:	f8ca 3000 	str.w	r3, [sl]
 8011a74:	89a3      	ldrh	r3, [r4, #12]
 8011a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a7a:	81a3      	strh	r3, [r4, #12]
 8011a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a80:	e7e9      	b.n	8011a56 <__ssputs_r+0x8a>
	...

08011a84 <_svfiprintf_r>:
 8011a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a88:	4698      	mov	r8, r3
 8011a8a:	898b      	ldrh	r3, [r1, #12]
 8011a8c:	061b      	lsls	r3, r3, #24
 8011a8e:	b09d      	sub	sp, #116	@ 0x74
 8011a90:	4607      	mov	r7, r0
 8011a92:	460d      	mov	r5, r1
 8011a94:	4614      	mov	r4, r2
 8011a96:	d510      	bpl.n	8011aba <_svfiprintf_r+0x36>
 8011a98:	690b      	ldr	r3, [r1, #16]
 8011a9a:	b973      	cbnz	r3, 8011aba <_svfiprintf_r+0x36>
 8011a9c:	2140      	movs	r1, #64	@ 0x40
 8011a9e:	f7fe fbd3 	bl	8010248 <_malloc_r>
 8011aa2:	6028      	str	r0, [r5, #0]
 8011aa4:	6128      	str	r0, [r5, #16]
 8011aa6:	b930      	cbnz	r0, 8011ab6 <_svfiprintf_r+0x32>
 8011aa8:	230c      	movs	r3, #12
 8011aaa:	603b      	str	r3, [r7, #0]
 8011aac:	f04f 30ff 	mov.w	r0, #4294967295
 8011ab0:	b01d      	add	sp, #116	@ 0x74
 8011ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab6:	2340      	movs	r3, #64	@ 0x40
 8011ab8:	616b      	str	r3, [r5, #20]
 8011aba:	2300      	movs	r3, #0
 8011abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011abe:	2320      	movs	r3, #32
 8011ac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ac8:	2330      	movs	r3, #48	@ 0x30
 8011aca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011c68 <_svfiprintf_r+0x1e4>
 8011ace:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ad2:	f04f 0901 	mov.w	r9, #1
 8011ad6:	4623      	mov	r3, r4
 8011ad8:	469a      	mov	sl, r3
 8011ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ade:	b10a      	cbz	r2, 8011ae4 <_svfiprintf_r+0x60>
 8011ae0:	2a25      	cmp	r2, #37	@ 0x25
 8011ae2:	d1f9      	bne.n	8011ad8 <_svfiprintf_r+0x54>
 8011ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8011ae8:	d00b      	beq.n	8011b02 <_svfiprintf_r+0x7e>
 8011aea:	465b      	mov	r3, fp
 8011aec:	4622      	mov	r2, r4
 8011aee:	4629      	mov	r1, r5
 8011af0:	4638      	mov	r0, r7
 8011af2:	f7ff ff6b 	bl	80119cc <__ssputs_r>
 8011af6:	3001      	adds	r0, #1
 8011af8:	f000 80a7 	beq.w	8011c4a <_svfiprintf_r+0x1c6>
 8011afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011afe:	445a      	add	r2, fp
 8011b00:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b02:	f89a 3000 	ldrb.w	r3, [sl]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	f000 809f 	beq.w	8011c4a <_svfiprintf_r+0x1c6>
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8011b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b16:	f10a 0a01 	add.w	sl, sl, #1
 8011b1a:	9304      	str	r3, [sp, #16]
 8011b1c:	9307      	str	r3, [sp, #28]
 8011b1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b22:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b24:	4654      	mov	r4, sl
 8011b26:	2205      	movs	r2, #5
 8011b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b2c:	484e      	ldr	r0, [pc, #312]	@ (8011c68 <_svfiprintf_r+0x1e4>)
 8011b2e:	f7ee fb4f 	bl	80001d0 <memchr>
 8011b32:	9a04      	ldr	r2, [sp, #16]
 8011b34:	b9d8      	cbnz	r0, 8011b6e <_svfiprintf_r+0xea>
 8011b36:	06d0      	lsls	r0, r2, #27
 8011b38:	bf44      	itt	mi
 8011b3a:	2320      	movmi	r3, #32
 8011b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b40:	0711      	lsls	r1, r2, #28
 8011b42:	bf44      	itt	mi
 8011b44:	232b      	movmi	r3, #43	@ 0x2b
 8011b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8011b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b50:	d015      	beq.n	8011b7e <_svfiprintf_r+0xfa>
 8011b52:	9a07      	ldr	r2, [sp, #28]
 8011b54:	4654      	mov	r4, sl
 8011b56:	2000      	movs	r0, #0
 8011b58:	f04f 0c0a 	mov.w	ip, #10
 8011b5c:	4621      	mov	r1, r4
 8011b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b62:	3b30      	subs	r3, #48	@ 0x30
 8011b64:	2b09      	cmp	r3, #9
 8011b66:	d94b      	bls.n	8011c00 <_svfiprintf_r+0x17c>
 8011b68:	b1b0      	cbz	r0, 8011b98 <_svfiprintf_r+0x114>
 8011b6a:	9207      	str	r2, [sp, #28]
 8011b6c:	e014      	b.n	8011b98 <_svfiprintf_r+0x114>
 8011b6e:	eba0 0308 	sub.w	r3, r0, r8
 8011b72:	fa09 f303 	lsl.w	r3, r9, r3
 8011b76:	4313      	orrs	r3, r2
 8011b78:	9304      	str	r3, [sp, #16]
 8011b7a:	46a2      	mov	sl, r4
 8011b7c:	e7d2      	b.n	8011b24 <_svfiprintf_r+0xa0>
 8011b7e:	9b03      	ldr	r3, [sp, #12]
 8011b80:	1d19      	adds	r1, r3, #4
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	9103      	str	r1, [sp, #12]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	bfbb      	ittet	lt
 8011b8a:	425b      	neglt	r3, r3
 8011b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8011b90:	9307      	strge	r3, [sp, #28]
 8011b92:	9307      	strlt	r3, [sp, #28]
 8011b94:	bfb8      	it	lt
 8011b96:	9204      	strlt	r2, [sp, #16]
 8011b98:	7823      	ldrb	r3, [r4, #0]
 8011b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b9c:	d10a      	bne.n	8011bb4 <_svfiprintf_r+0x130>
 8011b9e:	7863      	ldrb	r3, [r4, #1]
 8011ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ba2:	d132      	bne.n	8011c0a <_svfiprintf_r+0x186>
 8011ba4:	9b03      	ldr	r3, [sp, #12]
 8011ba6:	1d1a      	adds	r2, r3, #4
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	9203      	str	r2, [sp, #12]
 8011bac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011bb0:	3402      	adds	r4, #2
 8011bb2:	9305      	str	r3, [sp, #20]
 8011bb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011c78 <_svfiprintf_r+0x1f4>
 8011bb8:	7821      	ldrb	r1, [r4, #0]
 8011bba:	2203      	movs	r2, #3
 8011bbc:	4650      	mov	r0, sl
 8011bbe:	f7ee fb07 	bl	80001d0 <memchr>
 8011bc2:	b138      	cbz	r0, 8011bd4 <_svfiprintf_r+0x150>
 8011bc4:	9b04      	ldr	r3, [sp, #16]
 8011bc6:	eba0 000a 	sub.w	r0, r0, sl
 8011bca:	2240      	movs	r2, #64	@ 0x40
 8011bcc:	4082      	lsls	r2, r0
 8011bce:	4313      	orrs	r3, r2
 8011bd0:	3401      	adds	r4, #1
 8011bd2:	9304      	str	r3, [sp, #16]
 8011bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bd8:	4824      	ldr	r0, [pc, #144]	@ (8011c6c <_svfiprintf_r+0x1e8>)
 8011bda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011bde:	2206      	movs	r2, #6
 8011be0:	f7ee faf6 	bl	80001d0 <memchr>
 8011be4:	2800      	cmp	r0, #0
 8011be6:	d036      	beq.n	8011c56 <_svfiprintf_r+0x1d2>
 8011be8:	4b21      	ldr	r3, [pc, #132]	@ (8011c70 <_svfiprintf_r+0x1ec>)
 8011bea:	bb1b      	cbnz	r3, 8011c34 <_svfiprintf_r+0x1b0>
 8011bec:	9b03      	ldr	r3, [sp, #12]
 8011bee:	3307      	adds	r3, #7
 8011bf0:	f023 0307 	bic.w	r3, r3, #7
 8011bf4:	3308      	adds	r3, #8
 8011bf6:	9303      	str	r3, [sp, #12]
 8011bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bfa:	4433      	add	r3, r6
 8011bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011bfe:	e76a      	b.n	8011ad6 <_svfiprintf_r+0x52>
 8011c00:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c04:	460c      	mov	r4, r1
 8011c06:	2001      	movs	r0, #1
 8011c08:	e7a8      	b.n	8011b5c <_svfiprintf_r+0xd8>
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	3401      	adds	r4, #1
 8011c0e:	9305      	str	r3, [sp, #20]
 8011c10:	4619      	mov	r1, r3
 8011c12:	f04f 0c0a 	mov.w	ip, #10
 8011c16:	4620      	mov	r0, r4
 8011c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c1c:	3a30      	subs	r2, #48	@ 0x30
 8011c1e:	2a09      	cmp	r2, #9
 8011c20:	d903      	bls.n	8011c2a <_svfiprintf_r+0x1a6>
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d0c6      	beq.n	8011bb4 <_svfiprintf_r+0x130>
 8011c26:	9105      	str	r1, [sp, #20]
 8011c28:	e7c4      	b.n	8011bb4 <_svfiprintf_r+0x130>
 8011c2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c2e:	4604      	mov	r4, r0
 8011c30:	2301      	movs	r3, #1
 8011c32:	e7f0      	b.n	8011c16 <_svfiprintf_r+0x192>
 8011c34:	ab03      	add	r3, sp, #12
 8011c36:	9300      	str	r3, [sp, #0]
 8011c38:	462a      	mov	r2, r5
 8011c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8011c74 <_svfiprintf_r+0x1f0>)
 8011c3c:	a904      	add	r1, sp, #16
 8011c3e:	4638      	mov	r0, r7
 8011c40:	f7fc faf2 	bl	800e228 <_printf_float>
 8011c44:	1c42      	adds	r2, r0, #1
 8011c46:	4606      	mov	r6, r0
 8011c48:	d1d6      	bne.n	8011bf8 <_svfiprintf_r+0x174>
 8011c4a:	89ab      	ldrh	r3, [r5, #12]
 8011c4c:	065b      	lsls	r3, r3, #25
 8011c4e:	f53f af2d 	bmi.w	8011aac <_svfiprintf_r+0x28>
 8011c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c54:	e72c      	b.n	8011ab0 <_svfiprintf_r+0x2c>
 8011c56:	ab03      	add	r3, sp, #12
 8011c58:	9300      	str	r3, [sp, #0]
 8011c5a:	462a      	mov	r2, r5
 8011c5c:	4b05      	ldr	r3, [pc, #20]	@ (8011c74 <_svfiprintf_r+0x1f0>)
 8011c5e:	a904      	add	r1, sp, #16
 8011c60:	4638      	mov	r0, r7
 8011c62:	f7fc fd79 	bl	800e758 <_printf_i>
 8011c66:	e7ed      	b.n	8011c44 <_svfiprintf_r+0x1c0>
 8011c68:	08013999 	.word	0x08013999
 8011c6c:	080139a3 	.word	0x080139a3
 8011c70:	0800e229 	.word	0x0800e229
 8011c74:	080119cd 	.word	0x080119cd
 8011c78:	0801399f 	.word	0x0801399f

08011c7c <__sfputc_r>:
 8011c7c:	6893      	ldr	r3, [r2, #8]
 8011c7e:	3b01      	subs	r3, #1
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	b410      	push	{r4}
 8011c84:	6093      	str	r3, [r2, #8]
 8011c86:	da08      	bge.n	8011c9a <__sfputc_r+0x1e>
 8011c88:	6994      	ldr	r4, [r2, #24]
 8011c8a:	42a3      	cmp	r3, r4
 8011c8c:	db01      	blt.n	8011c92 <__sfputc_r+0x16>
 8011c8e:	290a      	cmp	r1, #10
 8011c90:	d103      	bne.n	8011c9a <__sfputc_r+0x1e>
 8011c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c96:	f7fd ba28 	b.w	800f0ea <__swbuf_r>
 8011c9a:	6813      	ldr	r3, [r2, #0]
 8011c9c:	1c58      	adds	r0, r3, #1
 8011c9e:	6010      	str	r0, [r2, #0]
 8011ca0:	7019      	strb	r1, [r3, #0]
 8011ca2:	4608      	mov	r0, r1
 8011ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ca8:	4770      	bx	lr

08011caa <__sfputs_r>:
 8011caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cac:	4606      	mov	r6, r0
 8011cae:	460f      	mov	r7, r1
 8011cb0:	4614      	mov	r4, r2
 8011cb2:	18d5      	adds	r5, r2, r3
 8011cb4:	42ac      	cmp	r4, r5
 8011cb6:	d101      	bne.n	8011cbc <__sfputs_r+0x12>
 8011cb8:	2000      	movs	r0, #0
 8011cba:	e007      	b.n	8011ccc <__sfputs_r+0x22>
 8011cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cc0:	463a      	mov	r2, r7
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	f7ff ffda 	bl	8011c7c <__sfputc_r>
 8011cc8:	1c43      	adds	r3, r0, #1
 8011cca:	d1f3      	bne.n	8011cb4 <__sfputs_r+0xa>
 8011ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011cd0 <_vfiprintf_r>:
 8011cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd4:	460d      	mov	r5, r1
 8011cd6:	b09d      	sub	sp, #116	@ 0x74
 8011cd8:	4614      	mov	r4, r2
 8011cda:	4698      	mov	r8, r3
 8011cdc:	4606      	mov	r6, r0
 8011cde:	b118      	cbz	r0, 8011ce8 <_vfiprintf_r+0x18>
 8011ce0:	6a03      	ldr	r3, [r0, #32]
 8011ce2:	b90b      	cbnz	r3, 8011ce8 <_vfiprintf_r+0x18>
 8011ce4:	f7fd f8f8 	bl	800eed8 <__sinit>
 8011ce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011cea:	07d9      	lsls	r1, r3, #31
 8011cec:	d405      	bmi.n	8011cfa <_vfiprintf_r+0x2a>
 8011cee:	89ab      	ldrh	r3, [r5, #12]
 8011cf0:	059a      	lsls	r2, r3, #22
 8011cf2:	d402      	bmi.n	8011cfa <_vfiprintf_r+0x2a>
 8011cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cf6:	f7fd fbb2 	bl	800f45e <__retarget_lock_acquire_recursive>
 8011cfa:	89ab      	ldrh	r3, [r5, #12]
 8011cfc:	071b      	lsls	r3, r3, #28
 8011cfe:	d501      	bpl.n	8011d04 <_vfiprintf_r+0x34>
 8011d00:	692b      	ldr	r3, [r5, #16]
 8011d02:	b99b      	cbnz	r3, 8011d2c <_vfiprintf_r+0x5c>
 8011d04:	4629      	mov	r1, r5
 8011d06:	4630      	mov	r0, r6
 8011d08:	f7fd fa2e 	bl	800f168 <__swsetup_r>
 8011d0c:	b170      	cbz	r0, 8011d2c <_vfiprintf_r+0x5c>
 8011d0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d10:	07dc      	lsls	r4, r3, #31
 8011d12:	d504      	bpl.n	8011d1e <_vfiprintf_r+0x4e>
 8011d14:	f04f 30ff 	mov.w	r0, #4294967295
 8011d18:	b01d      	add	sp, #116	@ 0x74
 8011d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d1e:	89ab      	ldrh	r3, [r5, #12]
 8011d20:	0598      	lsls	r0, r3, #22
 8011d22:	d4f7      	bmi.n	8011d14 <_vfiprintf_r+0x44>
 8011d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d26:	f7fd fb9b 	bl	800f460 <__retarget_lock_release_recursive>
 8011d2a:	e7f3      	b.n	8011d14 <_vfiprintf_r+0x44>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d30:	2320      	movs	r3, #32
 8011d32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d3a:	2330      	movs	r3, #48	@ 0x30
 8011d3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011eec <_vfiprintf_r+0x21c>
 8011d40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d44:	f04f 0901 	mov.w	r9, #1
 8011d48:	4623      	mov	r3, r4
 8011d4a:	469a      	mov	sl, r3
 8011d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d50:	b10a      	cbz	r2, 8011d56 <_vfiprintf_r+0x86>
 8011d52:	2a25      	cmp	r2, #37	@ 0x25
 8011d54:	d1f9      	bne.n	8011d4a <_vfiprintf_r+0x7a>
 8011d56:	ebba 0b04 	subs.w	fp, sl, r4
 8011d5a:	d00b      	beq.n	8011d74 <_vfiprintf_r+0xa4>
 8011d5c:	465b      	mov	r3, fp
 8011d5e:	4622      	mov	r2, r4
 8011d60:	4629      	mov	r1, r5
 8011d62:	4630      	mov	r0, r6
 8011d64:	f7ff ffa1 	bl	8011caa <__sfputs_r>
 8011d68:	3001      	adds	r0, #1
 8011d6a:	f000 80a7 	beq.w	8011ebc <_vfiprintf_r+0x1ec>
 8011d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d70:	445a      	add	r2, fp
 8011d72:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d74:	f89a 3000 	ldrb.w	r3, [sl]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	f000 809f 	beq.w	8011ebc <_vfiprintf_r+0x1ec>
 8011d7e:	2300      	movs	r3, #0
 8011d80:	f04f 32ff 	mov.w	r2, #4294967295
 8011d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d88:	f10a 0a01 	add.w	sl, sl, #1
 8011d8c:	9304      	str	r3, [sp, #16]
 8011d8e:	9307      	str	r3, [sp, #28]
 8011d90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d96:	4654      	mov	r4, sl
 8011d98:	2205      	movs	r2, #5
 8011d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d9e:	4853      	ldr	r0, [pc, #332]	@ (8011eec <_vfiprintf_r+0x21c>)
 8011da0:	f7ee fa16 	bl	80001d0 <memchr>
 8011da4:	9a04      	ldr	r2, [sp, #16]
 8011da6:	b9d8      	cbnz	r0, 8011de0 <_vfiprintf_r+0x110>
 8011da8:	06d1      	lsls	r1, r2, #27
 8011daa:	bf44      	itt	mi
 8011dac:	2320      	movmi	r3, #32
 8011dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011db2:	0713      	lsls	r3, r2, #28
 8011db4:	bf44      	itt	mi
 8011db6:	232b      	movmi	r3, #43	@ 0x2b
 8011db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8011dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dc2:	d015      	beq.n	8011df0 <_vfiprintf_r+0x120>
 8011dc4:	9a07      	ldr	r2, [sp, #28]
 8011dc6:	4654      	mov	r4, sl
 8011dc8:	2000      	movs	r0, #0
 8011dca:	f04f 0c0a 	mov.w	ip, #10
 8011dce:	4621      	mov	r1, r4
 8011dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dd4:	3b30      	subs	r3, #48	@ 0x30
 8011dd6:	2b09      	cmp	r3, #9
 8011dd8:	d94b      	bls.n	8011e72 <_vfiprintf_r+0x1a2>
 8011dda:	b1b0      	cbz	r0, 8011e0a <_vfiprintf_r+0x13a>
 8011ddc:	9207      	str	r2, [sp, #28]
 8011dde:	e014      	b.n	8011e0a <_vfiprintf_r+0x13a>
 8011de0:	eba0 0308 	sub.w	r3, r0, r8
 8011de4:	fa09 f303 	lsl.w	r3, r9, r3
 8011de8:	4313      	orrs	r3, r2
 8011dea:	9304      	str	r3, [sp, #16]
 8011dec:	46a2      	mov	sl, r4
 8011dee:	e7d2      	b.n	8011d96 <_vfiprintf_r+0xc6>
 8011df0:	9b03      	ldr	r3, [sp, #12]
 8011df2:	1d19      	adds	r1, r3, #4
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	9103      	str	r1, [sp, #12]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	bfbb      	ittet	lt
 8011dfc:	425b      	neglt	r3, r3
 8011dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8011e02:	9307      	strge	r3, [sp, #28]
 8011e04:	9307      	strlt	r3, [sp, #28]
 8011e06:	bfb8      	it	lt
 8011e08:	9204      	strlt	r2, [sp, #16]
 8011e0a:	7823      	ldrb	r3, [r4, #0]
 8011e0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e0e:	d10a      	bne.n	8011e26 <_vfiprintf_r+0x156>
 8011e10:	7863      	ldrb	r3, [r4, #1]
 8011e12:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e14:	d132      	bne.n	8011e7c <_vfiprintf_r+0x1ac>
 8011e16:	9b03      	ldr	r3, [sp, #12]
 8011e18:	1d1a      	adds	r2, r3, #4
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	9203      	str	r2, [sp, #12]
 8011e1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e22:	3402      	adds	r4, #2
 8011e24:	9305      	str	r3, [sp, #20]
 8011e26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011efc <_vfiprintf_r+0x22c>
 8011e2a:	7821      	ldrb	r1, [r4, #0]
 8011e2c:	2203      	movs	r2, #3
 8011e2e:	4650      	mov	r0, sl
 8011e30:	f7ee f9ce 	bl	80001d0 <memchr>
 8011e34:	b138      	cbz	r0, 8011e46 <_vfiprintf_r+0x176>
 8011e36:	9b04      	ldr	r3, [sp, #16]
 8011e38:	eba0 000a 	sub.w	r0, r0, sl
 8011e3c:	2240      	movs	r2, #64	@ 0x40
 8011e3e:	4082      	lsls	r2, r0
 8011e40:	4313      	orrs	r3, r2
 8011e42:	3401      	adds	r4, #1
 8011e44:	9304      	str	r3, [sp, #16]
 8011e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e4a:	4829      	ldr	r0, [pc, #164]	@ (8011ef0 <_vfiprintf_r+0x220>)
 8011e4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e50:	2206      	movs	r2, #6
 8011e52:	f7ee f9bd 	bl	80001d0 <memchr>
 8011e56:	2800      	cmp	r0, #0
 8011e58:	d03f      	beq.n	8011eda <_vfiprintf_r+0x20a>
 8011e5a:	4b26      	ldr	r3, [pc, #152]	@ (8011ef4 <_vfiprintf_r+0x224>)
 8011e5c:	bb1b      	cbnz	r3, 8011ea6 <_vfiprintf_r+0x1d6>
 8011e5e:	9b03      	ldr	r3, [sp, #12]
 8011e60:	3307      	adds	r3, #7
 8011e62:	f023 0307 	bic.w	r3, r3, #7
 8011e66:	3308      	adds	r3, #8
 8011e68:	9303      	str	r3, [sp, #12]
 8011e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e6c:	443b      	add	r3, r7
 8011e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e70:	e76a      	b.n	8011d48 <_vfiprintf_r+0x78>
 8011e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e76:	460c      	mov	r4, r1
 8011e78:	2001      	movs	r0, #1
 8011e7a:	e7a8      	b.n	8011dce <_vfiprintf_r+0xfe>
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	3401      	adds	r4, #1
 8011e80:	9305      	str	r3, [sp, #20]
 8011e82:	4619      	mov	r1, r3
 8011e84:	f04f 0c0a 	mov.w	ip, #10
 8011e88:	4620      	mov	r0, r4
 8011e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e8e:	3a30      	subs	r2, #48	@ 0x30
 8011e90:	2a09      	cmp	r2, #9
 8011e92:	d903      	bls.n	8011e9c <_vfiprintf_r+0x1cc>
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d0c6      	beq.n	8011e26 <_vfiprintf_r+0x156>
 8011e98:	9105      	str	r1, [sp, #20]
 8011e9a:	e7c4      	b.n	8011e26 <_vfiprintf_r+0x156>
 8011e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	2301      	movs	r3, #1
 8011ea4:	e7f0      	b.n	8011e88 <_vfiprintf_r+0x1b8>
 8011ea6:	ab03      	add	r3, sp, #12
 8011ea8:	9300      	str	r3, [sp, #0]
 8011eaa:	462a      	mov	r2, r5
 8011eac:	4b12      	ldr	r3, [pc, #72]	@ (8011ef8 <_vfiprintf_r+0x228>)
 8011eae:	a904      	add	r1, sp, #16
 8011eb0:	4630      	mov	r0, r6
 8011eb2:	f7fc f9b9 	bl	800e228 <_printf_float>
 8011eb6:	4607      	mov	r7, r0
 8011eb8:	1c78      	adds	r0, r7, #1
 8011eba:	d1d6      	bne.n	8011e6a <_vfiprintf_r+0x19a>
 8011ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ebe:	07d9      	lsls	r1, r3, #31
 8011ec0:	d405      	bmi.n	8011ece <_vfiprintf_r+0x1fe>
 8011ec2:	89ab      	ldrh	r3, [r5, #12]
 8011ec4:	059a      	lsls	r2, r3, #22
 8011ec6:	d402      	bmi.n	8011ece <_vfiprintf_r+0x1fe>
 8011ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011eca:	f7fd fac9 	bl	800f460 <__retarget_lock_release_recursive>
 8011ece:	89ab      	ldrh	r3, [r5, #12]
 8011ed0:	065b      	lsls	r3, r3, #25
 8011ed2:	f53f af1f 	bmi.w	8011d14 <_vfiprintf_r+0x44>
 8011ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ed8:	e71e      	b.n	8011d18 <_vfiprintf_r+0x48>
 8011eda:	ab03      	add	r3, sp, #12
 8011edc:	9300      	str	r3, [sp, #0]
 8011ede:	462a      	mov	r2, r5
 8011ee0:	4b05      	ldr	r3, [pc, #20]	@ (8011ef8 <_vfiprintf_r+0x228>)
 8011ee2:	a904      	add	r1, sp, #16
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	f7fc fc37 	bl	800e758 <_printf_i>
 8011eea:	e7e4      	b.n	8011eb6 <_vfiprintf_r+0x1e6>
 8011eec:	08013999 	.word	0x08013999
 8011ef0:	080139a3 	.word	0x080139a3
 8011ef4:	0800e229 	.word	0x0800e229
 8011ef8:	08011cab 	.word	0x08011cab
 8011efc:	0801399f 	.word	0x0801399f

08011f00 <__sflush_r>:
 8011f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f08:	0716      	lsls	r6, r2, #28
 8011f0a:	4605      	mov	r5, r0
 8011f0c:	460c      	mov	r4, r1
 8011f0e:	d454      	bmi.n	8011fba <__sflush_r+0xba>
 8011f10:	684b      	ldr	r3, [r1, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	dc02      	bgt.n	8011f1c <__sflush_r+0x1c>
 8011f16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	dd48      	ble.n	8011fae <__sflush_r+0xae>
 8011f1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011f1e:	2e00      	cmp	r6, #0
 8011f20:	d045      	beq.n	8011fae <__sflush_r+0xae>
 8011f22:	2300      	movs	r3, #0
 8011f24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011f28:	682f      	ldr	r7, [r5, #0]
 8011f2a:	6a21      	ldr	r1, [r4, #32]
 8011f2c:	602b      	str	r3, [r5, #0]
 8011f2e:	d030      	beq.n	8011f92 <__sflush_r+0x92>
 8011f30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011f32:	89a3      	ldrh	r3, [r4, #12]
 8011f34:	0759      	lsls	r1, r3, #29
 8011f36:	d505      	bpl.n	8011f44 <__sflush_r+0x44>
 8011f38:	6863      	ldr	r3, [r4, #4]
 8011f3a:	1ad2      	subs	r2, r2, r3
 8011f3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011f3e:	b10b      	cbz	r3, 8011f44 <__sflush_r+0x44>
 8011f40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011f42:	1ad2      	subs	r2, r2, r3
 8011f44:	2300      	movs	r3, #0
 8011f46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011f48:	6a21      	ldr	r1, [r4, #32]
 8011f4a:	4628      	mov	r0, r5
 8011f4c:	47b0      	blx	r6
 8011f4e:	1c43      	adds	r3, r0, #1
 8011f50:	89a3      	ldrh	r3, [r4, #12]
 8011f52:	d106      	bne.n	8011f62 <__sflush_r+0x62>
 8011f54:	6829      	ldr	r1, [r5, #0]
 8011f56:	291d      	cmp	r1, #29
 8011f58:	d82b      	bhi.n	8011fb2 <__sflush_r+0xb2>
 8011f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8012004 <__sflush_r+0x104>)
 8011f5c:	410a      	asrs	r2, r1
 8011f5e:	07d6      	lsls	r6, r2, #31
 8011f60:	d427      	bmi.n	8011fb2 <__sflush_r+0xb2>
 8011f62:	2200      	movs	r2, #0
 8011f64:	6062      	str	r2, [r4, #4]
 8011f66:	04d9      	lsls	r1, r3, #19
 8011f68:	6922      	ldr	r2, [r4, #16]
 8011f6a:	6022      	str	r2, [r4, #0]
 8011f6c:	d504      	bpl.n	8011f78 <__sflush_r+0x78>
 8011f6e:	1c42      	adds	r2, r0, #1
 8011f70:	d101      	bne.n	8011f76 <__sflush_r+0x76>
 8011f72:	682b      	ldr	r3, [r5, #0]
 8011f74:	b903      	cbnz	r3, 8011f78 <__sflush_r+0x78>
 8011f76:	6560      	str	r0, [r4, #84]	@ 0x54
 8011f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f7a:	602f      	str	r7, [r5, #0]
 8011f7c:	b1b9      	cbz	r1, 8011fae <__sflush_r+0xae>
 8011f7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f82:	4299      	cmp	r1, r3
 8011f84:	d002      	beq.n	8011f8c <__sflush_r+0x8c>
 8011f86:	4628      	mov	r0, r5
 8011f88:	f7fe f8ea 	bl	8010160 <_free_r>
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f90:	e00d      	b.n	8011fae <__sflush_r+0xae>
 8011f92:	2301      	movs	r3, #1
 8011f94:	4628      	mov	r0, r5
 8011f96:	47b0      	blx	r6
 8011f98:	4602      	mov	r2, r0
 8011f9a:	1c50      	adds	r0, r2, #1
 8011f9c:	d1c9      	bne.n	8011f32 <__sflush_r+0x32>
 8011f9e:	682b      	ldr	r3, [r5, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d0c6      	beq.n	8011f32 <__sflush_r+0x32>
 8011fa4:	2b1d      	cmp	r3, #29
 8011fa6:	d001      	beq.n	8011fac <__sflush_r+0xac>
 8011fa8:	2b16      	cmp	r3, #22
 8011faa:	d11e      	bne.n	8011fea <__sflush_r+0xea>
 8011fac:	602f      	str	r7, [r5, #0]
 8011fae:	2000      	movs	r0, #0
 8011fb0:	e022      	b.n	8011ff8 <__sflush_r+0xf8>
 8011fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fb6:	b21b      	sxth	r3, r3
 8011fb8:	e01b      	b.n	8011ff2 <__sflush_r+0xf2>
 8011fba:	690f      	ldr	r7, [r1, #16]
 8011fbc:	2f00      	cmp	r7, #0
 8011fbe:	d0f6      	beq.n	8011fae <__sflush_r+0xae>
 8011fc0:	0793      	lsls	r3, r2, #30
 8011fc2:	680e      	ldr	r6, [r1, #0]
 8011fc4:	bf08      	it	eq
 8011fc6:	694b      	ldreq	r3, [r1, #20]
 8011fc8:	600f      	str	r7, [r1, #0]
 8011fca:	bf18      	it	ne
 8011fcc:	2300      	movne	r3, #0
 8011fce:	eba6 0807 	sub.w	r8, r6, r7
 8011fd2:	608b      	str	r3, [r1, #8]
 8011fd4:	f1b8 0f00 	cmp.w	r8, #0
 8011fd8:	dde9      	ble.n	8011fae <__sflush_r+0xae>
 8011fda:	6a21      	ldr	r1, [r4, #32]
 8011fdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011fde:	4643      	mov	r3, r8
 8011fe0:	463a      	mov	r2, r7
 8011fe2:	4628      	mov	r0, r5
 8011fe4:	47b0      	blx	r6
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	dc08      	bgt.n	8011ffc <__sflush_r+0xfc>
 8011fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ff2:	81a3      	strh	r3, [r4, #12]
 8011ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ffc:	4407      	add	r7, r0
 8011ffe:	eba8 0800 	sub.w	r8, r8, r0
 8012002:	e7e7      	b.n	8011fd4 <__sflush_r+0xd4>
 8012004:	dfbffffe 	.word	0xdfbffffe

08012008 <_fflush_r>:
 8012008:	b538      	push	{r3, r4, r5, lr}
 801200a:	690b      	ldr	r3, [r1, #16]
 801200c:	4605      	mov	r5, r0
 801200e:	460c      	mov	r4, r1
 8012010:	b913      	cbnz	r3, 8012018 <_fflush_r+0x10>
 8012012:	2500      	movs	r5, #0
 8012014:	4628      	mov	r0, r5
 8012016:	bd38      	pop	{r3, r4, r5, pc}
 8012018:	b118      	cbz	r0, 8012022 <_fflush_r+0x1a>
 801201a:	6a03      	ldr	r3, [r0, #32]
 801201c:	b90b      	cbnz	r3, 8012022 <_fflush_r+0x1a>
 801201e:	f7fc ff5b 	bl	800eed8 <__sinit>
 8012022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d0f3      	beq.n	8012012 <_fflush_r+0xa>
 801202a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801202c:	07d0      	lsls	r0, r2, #31
 801202e:	d404      	bmi.n	801203a <_fflush_r+0x32>
 8012030:	0599      	lsls	r1, r3, #22
 8012032:	d402      	bmi.n	801203a <_fflush_r+0x32>
 8012034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012036:	f7fd fa12 	bl	800f45e <__retarget_lock_acquire_recursive>
 801203a:	4628      	mov	r0, r5
 801203c:	4621      	mov	r1, r4
 801203e:	f7ff ff5f 	bl	8011f00 <__sflush_r>
 8012042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012044:	07da      	lsls	r2, r3, #31
 8012046:	4605      	mov	r5, r0
 8012048:	d4e4      	bmi.n	8012014 <_fflush_r+0xc>
 801204a:	89a3      	ldrh	r3, [r4, #12]
 801204c:	059b      	lsls	r3, r3, #22
 801204e:	d4e1      	bmi.n	8012014 <_fflush_r+0xc>
 8012050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012052:	f7fd fa05 	bl	800f460 <__retarget_lock_release_recursive>
 8012056:	e7dd      	b.n	8012014 <_fflush_r+0xc>

08012058 <fiprintf>:
 8012058:	b40e      	push	{r1, r2, r3}
 801205a:	b503      	push	{r0, r1, lr}
 801205c:	4601      	mov	r1, r0
 801205e:	ab03      	add	r3, sp, #12
 8012060:	4805      	ldr	r0, [pc, #20]	@ (8012078 <fiprintf+0x20>)
 8012062:	f853 2b04 	ldr.w	r2, [r3], #4
 8012066:	6800      	ldr	r0, [r0, #0]
 8012068:	9301      	str	r3, [sp, #4]
 801206a:	f7ff fe31 	bl	8011cd0 <_vfiprintf_r>
 801206e:	b002      	add	sp, #8
 8012070:	f85d eb04 	ldr.w	lr, [sp], #4
 8012074:	b003      	add	sp, #12
 8012076:	4770      	bx	lr
 8012078:	200000c8 	.word	0x200000c8

0801207c <__swhatbuf_r>:
 801207c:	b570      	push	{r4, r5, r6, lr}
 801207e:	460c      	mov	r4, r1
 8012080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012084:	2900      	cmp	r1, #0
 8012086:	b096      	sub	sp, #88	@ 0x58
 8012088:	4615      	mov	r5, r2
 801208a:	461e      	mov	r6, r3
 801208c:	da0d      	bge.n	80120aa <__swhatbuf_r+0x2e>
 801208e:	89a3      	ldrh	r3, [r4, #12]
 8012090:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012094:	f04f 0100 	mov.w	r1, #0
 8012098:	bf14      	ite	ne
 801209a:	2340      	movne	r3, #64	@ 0x40
 801209c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80120a0:	2000      	movs	r0, #0
 80120a2:	6031      	str	r1, [r6, #0]
 80120a4:	602b      	str	r3, [r5, #0]
 80120a6:	b016      	add	sp, #88	@ 0x58
 80120a8:	bd70      	pop	{r4, r5, r6, pc}
 80120aa:	466a      	mov	r2, sp
 80120ac:	f000 f862 	bl	8012174 <_fstat_r>
 80120b0:	2800      	cmp	r0, #0
 80120b2:	dbec      	blt.n	801208e <__swhatbuf_r+0x12>
 80120b4:	9901      	ldr	r1, [sp, #4]
 80120b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80120ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80120be:	4259      	negs	r1, r3
 80120c0:	4159      	adcs	r1, r3
 80120c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80120c6:	e7eb      	b.n	80120a0 <__swhatbuf_r+0x24>

080120c8 <__smakebuf_r>:
 80120c8:	898b      	ldrh	r3, [r1, #12]
 80120ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120cc:	079d      	lsls	r5, r3, #30
 80120ce:	4606      	mov	r6, r0
 80120d0:	460c      	mov	r4, r1
 80120d2:	d507      	bpl.n	80120e4 <__smakebuf_r+0x1c>
 80120d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80120d8:	6023      	str	r3, [r4, #0]
 80120da:	6123      	str	r3, [r4, #16]
 80120dc:	2301      	movs	r3, #1
 80120de:	6163      	str	r3, [r4, #20]
 80120e0:	b003      	add	sp, #12
 80120e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120e4:	ab01      	add	r3, sp, #4
 80120e6:	466a      	mov	r2, sp
 80120e8:	f7ff ffc8 	bl	801207c <__swhatbuf_r>
 80120ec:	9f00      	ldr	r7, [sp, #0]
 80120ee:	4605      	mov	r5, r0
 80120f0:	4639      	mov	r1, r7
 80120f2:	4630      	mov	r0, r6
 80120f4:	f7fe f8a8 	bl	8010248 <_malloc_r>
 80120f8:	b948      	cbnz	r0, 801210e <__smakebuf_r+0x46>
 80120fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120fe:	059a      	lsls	r2, r3, #22
 8012100:	d4ee      	bmi.n	80120e0 <__smakebuf_r+0x18>
 8012102:	f023 0303 	bic.w	r3, r3, #3
 8012106:	f043 0302 	orr.w	r3, r3, #2
 801210a:	81a3      	strh	r3, [r4, #12]
 801210c:	e7e2      	b.n	80120d4 <__smakebuf_r+0xc>
 801210e:	89a3      	ldrh	r3, [r4, #12]
 8012110:	6020      	str	r0, [r4, #0]
 8012112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012116:	81a3      	strh	r3, [r4, #12]
 8012118:	9b01      	ldr	r3, [sp, #4]
 801211a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801211e:	b15b      	cbz	r3, 8012138 <__smakebuf_r+0x70>
 8012120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012124:	4630      	mov	r0, r6
 8012126:	f000 f837 	bl	8012198 <_isatty_r>
 801212a:	b128      	cbz	r0, 8012138 <__smakebuf_r+0x70>
 801212c:	89a3      	ldrh	r3, [r4, #12]
 801212e:	f023 0303 	bic.w	r3, r3, #3
 8012132:	f043 0301 	orr.w	r3, r3, #1
 8012136:	81a3      	strh	r3, [r4, #12]
 8012138:	89a3      	ldrh	r3, [r4, #12]
 801213a:	431d      	orrs	r5, r3
 801213c:	81a5      	strh	r5, [r4, #12]
 801213e:	e7cf      	b.n	80120e0 <__smakebuf_r+0x18>

08012140 <memmove>:
 8012140:	4288      	cmp	r0, r1
 8012142:	b510      	push	{r4, lr}
 8012144:	eb01 0402 	add.w	r4, r1, r2
 8012148:	d902      	bls.n	8012150 <memmove+0x10>
 801214a:	4284      	cmp	r4, r0
 801214c:	4623      	mov	r3, r4
 801214e:	d807      	bhi.n	8012160 <memmove+0x20>
 8012150:	1e43      	subs	r3, r0, #1
 8012152:	42a1      	cmp	r1, r4
 8012154:	d008      	beq.n	8012168 <memmove+0x28>
 8012156:	f811 2b01 	ldrb.w	r2, [r1], #1
 801215a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801215e:	e7f8      	b.n	8012152 <memmove+0x12>
 8012160:	4402      	add	r2, r0
 8012162:	4601      	mov	r1, r0
 8012164:	428a      	cmp	r2, r1
 8012166:	d100      	bne.n	801216a <memmove+0x2a>
 8012168:	bd10      	pop	{r4, pc}
 801216a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801216e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012172:	e7f7      	b.n	8012164 <memmove+0x24>

08012174 <_fstat_r>:
 8012174:	b538      	push	{r3, r4, r5, lr}
 8012176:	4d07      	ldr	r5, [pc, #28]	@ (8012194 <_fstat_r+0x20>)
 8012178:	2300      	movs	r3, #0
 801217a:	4604      	mov	r4, r0
 801217c:	4608      	mov	r0, r1
 801217e:	4611      	mov	r1, r2
 8012180:	602b      	str	r3, [r5, #0]
 8012182:	f7f0 fb14 	bl	80027ae <_fstat>
 8012186:	1c43      	adds	r3, r0, #1
 8012188:	d102      	bne.n	8012190 <_fstat_r+0x1c>
 801218a:	682b      	ldr	r3, [r5, #0]
 801218c:	b103      	cbz	r3, 8012190 <_fstat_r+0x1c>
 801218e:	6023      	str	r3, [r4, #0]
 8012190:	bd38      	pop	{r3, r4, r5, pc}
 8012192:	bf00      	nop
 8012194:	20003344 	.word	0x20003344

08012198 <_isatty_r>:
 8012198:	b538      	push	{r3, r4, r5, lr}
 801219a:	4d06      	ldr	r5, [pc, #24]	@ (80121b4 <_isatty_r+0x1c>)
 801219c:	2300      	movs	r3, #0
 801219e:	4604      	mov	r4, r0
 80121a0:	4608      	mov	r0, r1
 80121a2:	602b      	str	r3, [r5, #0]
 80121a4:	f7f0 fb13 	bl	80027ce <_isatty>
 80121a8:	1c43      	adds	r3, r0, #1
 80121aa:	d102      	bne.n	80121b2 <_isatty_r+0x1a>
 80121ac:	682b      	ldr	r3, [r5, #0]
 80121ae:	b103      	cbz	r3, 80121b2 <_isatty_r+0x1a>
 80121b0:	6023      	str	r3, [r4, #0]
 80121b2:	bd38      	pop	{r3, r4, r5, pc}
 80121b4:	20003344 	.word	0x20003344

080121b8 <_sbrk_r>:
 80121b8:	b538      	push	{r3, r4, r5, lr}
 80121ba:	4d06      	ldr	r5, [pc, #24]	@ (80121d4 <_sbrk_r+0x1c>)
 80121bc:	2300      	movs	r3, #0
 80121be:	4604      	mov	r4, r0
 80121c0:	4608      	mov	r0, r1
 80121c2:	602b      	str	r3, [r5, #0]
 80121c4:	f7f0 fb1c 	bl	8002800 <_sbrk>
 80121c8:	1c43      	adds	r3, r0, #1
 80121ca:	d102      	bne.n	80121d2 <_sbrk_r+0x1a>
 80121cc:	682b      	ldr	r3, [r5, #0]
 80121ce:	b103      	cbz	r3, 80121d2 <_sbrk_r+0x1a>
 80121d0:	6023      	str	r3, [r4, #0]
 80121d2:	bd38      	pop	{r3, r4, r5, pc}
 80121d4:	20003344 	.word	0x20003344

080121d8 <nan>:
 80121d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80121e0 <nan+0x8>
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop
 80121e0:	00000000 	.word	0x00000000
 80121e4:	7ff80000 	.word	0x7ff80000

080121e8 <abort>:
 80121e8:	b508      	push	{r3, lr}
 80121ea:	2006      	movs	r0, #6
 80121ec:	f000 fbc4 	bl	8012978 <raise>
 80121f0:	2001      	movs	r0, #1
 80121f2:	f7f0 fa8c 	bl	800270e <_exit>

080121f6 <_calloc_r>:
 80121f6:	b570      	push	{r4, r5, r6, lr}
 80121f8:	fba1 5402 	umull	r5, r4, r1, r2
 80121fc:	b93c      	cbnz	r4, 801220e <_calloc_r+0x18>
 80121fe:	4629      	mov	r1, r5
 8012200:	f7fe f822 	bl	8010248 <_malloc_r>
 8012204:	4606      	mov	r6, r0
 8012206:	b928      	cbnz	r0, 8012214 <_calloc_r+0x1e>
 8012208:	2600      	movs	r6, #0
 801220a:	4630      	mov	r0, r6
 801220c:	bd70      	pop	{r4, r5, r6, pc}
 801220e:	220c      	movs	r2, #12
 8012210:	6002      	str	r2, [r0, #0]
 8012212:	e7f9      	b.n	8012208 <_calloc_r+0x12>
 8012214:	462a      	mov	r2, r5
 8012216:	4621      	mov	r1, r4
 8012218:	f7fd f80c 	bl	800f234 <memset>
 801221c:	e7f5      	b.n	801220a <_calloc_r+0x14>

0801221e <rshift>:
 801221e:	6903      	ldr	r3, [r0, #16]
 8012220:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012228:	ea4f 1261 	mov.w	r2, r1, asr #5
 801222c:	f100 0414 	add.w	r4, r0, #20
 8012230:	dd45      	ble.n	80122be <rshift+0xa0>
 8012232:	f011 011f 	ands.w	r1, r1, #31
 8012236:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801223a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801223e:	d10c      	bne.n	801225a <rshift+0x3c>
 8012240:	f100 0710 	add.w	r7, r0, #16
 8012244:	4629      	mov	r1, r5
 8012246:	42b1      	cmp	r1, r6
 8012248:	d334      	bcc.n	80122b4 <rshift+0x96>
 801224a:	1a9b      	subs	r3, r3, r2
 801224c:	009b      	lsls	r3, r3, #2
 801224e:	1eea      	subs	r2, r5, #3
 8012250:	4296      	cmp	r6, r2
 8012252:	bf38      	it	cc
 8012254:	2300      	movcc	r3, #0
 8012256:	4423      	add	r3, r4
 8012258:	e015      	b.n	8012286 <rshift+0x68>
 801225a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801225e:	f1c1 0820 	rsb	r8, r1, #32
 8012262:	40cf      	lsrs	r7, r1
 8012264:	f105 0e04 	add.w	lr, r5, #4
 8012268:	46a1      	mov	r9, r4
 801226a:	4576      	cmp	r6, lr
 801226c:	46f4      	mov	ip, lr
 801226e:	d815      	bhi.n	801229c <rshift+0x7e>
 8012270:	1a9a      	subs	r2, r3, r2
 8012272:	0092      	lsls	r2, r2, #2
 8012274:	3a04      	subs	r2, #4
 8012276:	3501      	adds	r5, #1
 8012278:	42ae      	cmp	r6, r5
 801227a:	bf38      	it	cc
 801227c:	2200      	movcc	r2, #0
 801227e:	18a3      	adds	r3, r4, r2
 8012280:	50a7      	str	r7, [r4, r2]
 8012282:	b107      	cbz	r7, 8012286 <rshift+0x68>
 8012284:	3304      	adds	r3, #4
 8012286:	1b1a      	subs	r2, r3, r4
 8012288:	42a3      	cmp	r3, r4
 801228a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801228e:	bf08      	it	eq
 8012290:	2300      	moveq	r3, #0
 8012292:	6102      	str	r2, [r0, #16]
 8012294:	bf08      	it	eq
 8012296:	6143      	streq	r3, [r0, #20]
 8012298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801229c:	f8dc c000 	ldr.w	ip, [ip]
 80122a0:	fa0c fc08 	lsl.w	ip, ip, r8
 80122a4:	ea4c 0707 	orr.w	r7, ip, r7
 80122a8:	f849 7b04 	str.w	r7, [r9], #4
 80122ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80122b0:	40cf      	lsrs	r7, r1
 80122b2:	e7da      	b.n	801226a <rshift+0x4c>
 80122b4:	f851 cb04 	ldr.w	ip, [r1], #4
 80122b8:	f847 cf04 	str.w	ip, [r7, #4]!
 80122bc:	e7c3      	b.n	8012246 <rshift+0x28>
 80122be:	4623      	mov	r3, r4
 80122c0:	e7e1      	b.n	8012286 <rshift+0x68>

080122c2 <__hexdig_fun>:
 80122c2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80122c6:	2b09      	cmp	r3, #9
 80122c8:	d802      	bhi.n	80122d0 <__hexdig_fun+0xe>
 80122ca:	3820      	subs	r0, #32
 80122cc:	b2c0      	uxtb	r0, r0
 80122ce:	4770      	bx	lr
 80122d0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80122d4:	2b05      	cmp	r3, #5
 80122d6:	d801      	bhi.n	80122dc <__hexdig_fun+0x1a>
 80122d8:	3847      	subs	r0, #71	@ 0x47
 80122da:	e7f7      	b.n	80122cc <__hexdig_fun+0xa>
 80122dc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80122e0:	2b05      	cmp	r3, #5
 80122e2:	d801      	bhi.n	80122e8 <__hexdig_fun+0x26>
 80122e4:	3827      	subs	r0, #39	@ 0x27
 80122e6:	e7f1      	b.n	80122cc <__hexdig_fun+0xa>
 80122e8:	2000      	movs	r0, #0
 80122ea:	4770      	bx	lr

080122ec <__gethex>:
 80122ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f0:	b085      	sub	sp, #20
 80122f2:	468a      	mov	sl, r1
 80122f4:	9302      	str	r3, [sp, #8]
 80122f6:	680b      	ldr	r3, [r1, #0]
 80122f8:	9001      	str	r0, [sp, #4]
 80122fa:	4690      	mov	r8, r2
 80122fc:	1c9c      	adds	r4, r3, #2
 80122fe:	46a1      	mov	r9, r4
 8012300:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012304:	2830      	cmp	r0, #48	@ 0x30
 8012306:	d0fa      	beq.n	80122fe <__gethex+0x12>
 8012308:	eba9 0303 	sub.w	r3, r9, r3
 801230c:	f1a3 0b02 	sub.w	fp, r3, #2
 8012310:	f7ff ffd7 	bl	80122c2 <__hexdig_fun>
 8012314:	4605      	mov	r5, r0
 8012316:	2800      	cmp	r0, #0
 8012318:	d168      	bne.n	80123ec <__gethex+0x100>
 801231a:	49a0      	ldr	r1, [pc, #640]	@ (801259c <__gethex+0x2b0>)
 801231c:	2201      	movs	r2, #1
 801231e:	4648      	mov	r0, r9
 8012320:	f7fc ff90 	bl	800f244 <strncmp>
 8012324:	4607      	mov	r7, r0
 8012326:	2800      	cmp	r0, #0
 8012328:	d167      	bne.n	80123fa <__gethex+0x10e>
 801232a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801232e:	4626      	mov	r6, r4
 8012330:	f7ff ffc7 	bl	80122c2 <__hexdig_fun>
 8012334:	2800      	cmp	r0, #0
 8012336:	d062      	beq.n	80123fe <__gethex+0x112>
 8012338:	4623      	mov	r3, r4
 801233a:	7818      	ldrb	r0, [r3, #0]
 801233c:	2830      	cmp	r0, #48	@ 0x30
 801233e:	4699      	mov	r9, r3
 8012340:	f103 0301 	add.w	r3, r3, #1
 8012344:	d0f9      	beq.n	801233a <__gethex+0x4e>
 8012346:	f7ff ffbc 	bl	80122c2 <__hexdig_fun>
 801234a:	fab0 f580 	clz	r5, r0
 801234e:	096d      	lsrs	r5, r5, #5
 8012350:	f04f 0b01 	mov.w	fp, #1
 8012354:	464a      	mov	r2, r9
 8012356:	4616      	mov	r6, r2
 8012358:	3201      	adds	r2, #1
 801235a:	7830      	ldrb	r0, [r6, #0]
 801235c:	f7ff ffb1 	bl	80122c2 <__hexdig_fun>
 8012360:	2800      	cmp	r0, #0
 8012362:	d1f8      	bne.n	8012356 <__gethex+0x6a>
 8012364:	498d      	ldr	r1, [pc, #564]	@ (801259c <__gethex+0x2b0>)
 8012366:	2201      	movs	r2, #1
 8012368:	4630      	mov	r0, r6
 801236a:	f7fc ff6b 	bl	800f244 <strncmp>
 801236e:	2800      	cmp	r0, #0
 8012370:	d13f      	bne.n	80123f2 <__gethex+0x106>
 8012372:	b944      	cbnz	r4, 8012386 <__gethex+0x9a>
 8012374:	1c74      	adds	r4, r6, #1
 8012376:	4622      	mov	r2, r4
 8012378:	4616      	mov	r6, r2
 801237a:	3201      	adds	r2, #1
 801237c:	7830      	ldrb	r0, [r6, #0]
 801237e:	f7ff ffa0 	bl	80122c2 <__hexdig_fun>
 8012382:	2800      	cmp	r0, #0
 8012384:	d1f8      	bne.n	8012378 <__gethex+0x8c>
 8012386:	1ba4      	subs	r4, r4, r6
 8012388:	00a7      	lsls	r7, r4, #2
 801238a:	7833      	ldrb	r3, [r6, #0]
 801238c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012390:	2b50      	cmp	r3, #80	@ 0x50
 8012392:	d13e      	bne.n	8012412 <__gethex+0x126>
 8012394:	7873      	ldrb	r3, [r6, #1]
 8012396:	2b2b      	cmp	r3, #43	@ 0x2b
 8012398:	d033      	beq.n	8012402 <__gethex+0x116>
 801239a:	2b2d      	cmp	r3, #45	@ 0x2d
 801239c:	d034      	beq.n	8012408 <__gethex+0x11c>
 801239e:	1c71      	adds	r1, r6, #1
 80123a0:	2400      	movs	r4, #0
 80123a2:	7808      	ldrb	r0, [r1, #0]
 80123a4:	f7ff ff8d 	bl	80122c2 <__hexdig_fun>
 80123a8:	1e43      	subs	r3, r0, #1
 80123aa:	b2db      	uxtb	r3, r3
 80123ac:	2b18      	cmp	r3, #24
 80123ae:	d830      	bhi.n	8012412 <__gethex+0x126>
 80123b0:	f1a0 0210 	sub.w	r2, r0, #16
 80123b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80123b8:	f7ff ff83 	bl	80122c2 <__hexdig_fun>
 80123bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80123c0:	fa5f fc8c 	uxtb.w	ip, ip
 80123c4:	f1bc 0f18 	cmp.w	ip, #24
 80123c8:	f04f 030a 	mov.w	r3, #10
 80123cc:	d91e      	bls.n	801240c <__gethex+0x120>
 80123ce:	b104      	cbz	r4, 80123d2 <__gethex+0xe6>
 80123d0:	4252      	negs	r2, r2
 80123d2:	4417      	add	r7, r2
 80123d4:	f8ca 1000 	str.w	r1, [sl]
 80123d8:	b1ed      	cbz	r5, 8012416 <__gethex+0x12a>
 80123da:	f1bb 0f00 	cmp.w	fp, #0
 80123de:	bf0c      	ite	eq
 80123e0:	2506      	moveq	r5, #6
 80123e2:	2500      	movne	r5, #0
 80123e4:	4628      	mov	r0, r5
 80123e6:	b005      	add	sp, #20
 80123e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ec:	2500      	movs	r5, #0
 80123ee:	462c      	mov	r4, r5
 80123f0:	e7b0      	b.n	8012354 <__gethex+0x68>
 80123f2:	2c00      	cmp	r4, #0
 80123f4:	d1c7      	bne.n	8012386 <__gethex+0x9a>
 80123f6:	4627      	mov	r7, r4
 80123f8:	e7c7      	b.n	801238a <__gethex+0x9e>
 80123fa:	464e      	mov	r6, r9
 80123fc:	462f      	mov	r7, r5
 80123fe:	2501      	movs	r5, #1
 8012400:	e7c3      	b.n	801238a <__gethex+0x9e>
 8012402:	2400      	movs	r4, #0
 8012404:	1cb1      	adds	r1, r6, #2
 8012406:	e7cc      	b.n	80123a2 <__gethex+0xb6>
 8012408:	2401      	movs	r4, #1
 801240a:	e7fb      	b.n	8012404 <__gethex+0x118>
 801240c:	fb03 0002 	mla	r0, r3, r2, r0
 8012410:	e7ce      	b.n	80123b0 <__gethex+0xc4>
 8012412:	4631      	mov	r1, r6
 8012414:	e7de      	b.n	80123d4 <__gethex+0xe8>
 8012416:	eba6 0309 	sub.w	r3, r6, r9
 801241a:	3b01      	subs	r3, #1
 801241c:	4629      	mov	r1, r5
 801241e:	2b07      	cmp	r3, #7
 8012420:	dc0a      	bgt.n	8012438 <__gethex+0x14c>
 8012422:	9801      	ldr	r0, [sp, #4]
 8012424:	f7fd ff9c 	bl	8010360 <_Balloc>
 8012428:	4604      	mov	r4, r0
 801242a:	b940      	cbnz	r0, 801243e <__gethex+0x152>
 801242c:	4b5c      	ldr	r3, [pc, #368]	@ (80125a0 <__gethex+0x2b4>)
 801242e:	4602      	mov	r2, r0
 8012430:	21e4      	movs	r1, #228	@ 0xe4
 8012432:	485c      	ldr	r0, [pc, #368]	@ (80125a4 <__gethex+0x2b8>)
 8012434:	f7fd f82a 	bl	800f48c <__assert_func>
 8012438:	3101      	adds	r1, #1
 801243a:	105b      	asrs	r3, r3, #1
 801243c:	e7ef      	b.n	801241e <__gethex+0x132>
 801243e:	f100 0a14 	add.w	sl, r0, #20
 8012442:	2300      	movs	r3, #0
 8012444:	4655      	mov	r5, sl
 8012446:	469b      	mov	fp, r3
 8012448:	45b1      	cmp	r9, r6
 801244a:	d337      	bcc.n	80124bc <__gethex+0x1d0>
 801244c:	f845 bb04 	str.w	fp, [r5], #4
 8012450:	eba5 050a 	sub.w	r5, r5, sl
 8012454:	10ad      	asrs	r5, r5, #2
 8012456:	6125      	str	r5, [r4, #16]
 8012458:	4658      	mov	r0, fp
 801245a:	f7fe f873 	bl	8010544 <__hi0bits>
 801245e:	016d      	lsls	r5, r5, #5
 8012460:	f8d8 6000 	ldr.w	r6, [r8]
 8012464:	1a2d      	subs	r5, r5, r0
 8012466:	42b5      	cmp	r5, r6
 8012468:	dd54      	ble.n	8012514 <__gethex+0x228>
 801246a:	1bad      	subs	r5, r5, r6
 801246c:	4629      	mov	r1, r5
 801246e:	4620      	mov	r0, r4
 8012470:	f7fe fc07 	bl	8010c82 <__any_on>
 8012474:	4681      	mov	r9, r0
 8012476:	b178      	cbz	r0, 8012498 <__gethex+0x1ac>
 8012478:	1e6b      	subs	r3, r5, #1
 801247a:	1159      	asrs	r1, r3, #5
 801247c:	f003 021f 	and.w	r2, r3, #31
 8012480:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012484:	f04f 0901 	mov.w	r9, #1
 8012488:	fa09 f202 	lsl.w	r2, r9, r2
 801248c:	420a      	tst	r2, r1
 801248e:	d003      	beq.n	8012498 <__gethex+0x1ac>
 8012490:	454b      	cmp	r3, r9
 8012492:	dc36      	bgt.n	8012502 <__gethex+0x216>
 8012494:	f04f 0902 	mov.w	r9, #2
 8012498:	4629      	mov	r1, r5
 801249a:	4620      	mov	r0, r4
 801249c:	f7ff febf 	bl	801221e <rshift>
 80124a0:	442f      	add	r7, r5
 80124a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80124a6:	42bb      	cmp	r3, r7
 80124a8:	da42      	bge.n	8012530 <__gethex+0x244>
 80124aa:	9801      	ldr	r0, [sp, #4]
 80124ac:	4621      	mov	r1, r4
 80124ae:	f7fd ff97 	bl	80103e0 <_Bfree>
 80124b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80124b4:	2300      	movs	r3, #0
 80124b6:	6013      	str	r3, [r2, #0]
 80124b8:	25a3      	movs	r5, #163	@ 0xa3
 80124ba:	e793      	b.n	80123e4 <__gethex+0xf8>
 80124bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80124c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80124c2:	d012      	beq.n	80124ea <__gethex+0x1fe>
 80124c4:	2b20      	cmp	r3, #32
 80124c6:	d104      	bne.n	80124d2 <__gethex+0x1e6>
 80124c8:	f845 bb04 	str.w	fp, [r5], #4
 80124cc:	f04f 0b00 	mov.w	fp, #0
 80124d0:	465b      	mov	r3, fp
 80124d2:	7830      	ldrb	r0, [r6, #0]
 80124d4:	9303      	str	r3, [sp, #12]
 80124d6:	f7ff fef4 	bl	80122c2 <__hexdig_fun>
 80124da:	9b03      	ldr	r3, [sp, #12]
 80124dc:	f000 000f 	and.w	r0, r0, #15
 80124e0:	4098      	lsls	r0, r3
 80124e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80124e6:	3304      	adds	r3, #4
 80124e8:	e7ae      	b.n	8012448 <__gethex+0x15c>
 80124ea:	45b1      	cmp	r9, r6
 80124ec:	d8ea      	bhi.n	80124c4 <__gethex+0x1d8>
 80124ee:	492b      	ldr	r1, [pc, #172]	@ (801259c <__gethex+0x2b0>)
 80124f0:	9303      	str	r3, [sp, #12]
 80124f2:	2201      	movs	r2, #1
 80124f4:	4630      	mov	r0, r6
 80124f6:	f7fc fea5 	bl	800f244 <strncmp>
 80124fa:	9b03      	ldr	r3, [sp, #12]
 80124fc:	2800      	cmp	r0, #0
 80124fe:	d1e1      	bne.n	80124c4 <__gethex+0x1d8>
 8012500:	e7a2      	b.n	8012448 <__gethex+0x15c>
 8012502:	1ea9      	subs	r1, r5, #2
 8012504:	4620      	mov	r0, r4
 8012506:	f7fe fbbc 	bl	8010c82 <__any_on>
 801250a:	2800      	cmp	r0, #0
 801250c:	d0c2      	beq.n	8012494 <__gethex+0x1a8>
 801250e:	f04f 0903 	mov.w	r9, #3
 8012512:	e7c1      	b.n	8012498 <__gethex+0x1ac>
 8012514:	da09      	bge.n	801252a <__gethex+0x23e>
 8012516:	1b75      	subs	r5, r6, r5
 8012518:	4621      	mov	r1, r4
 801251a:	9801      	ldr	r0, [sp, #4]
 801251c:	462a      	mov	r2, r5
 801251e:	f7fe f977 	bl	8010810 <__lshift>
 8012522:	1b7f      	subs	r7, r7, r5
 8012524:	4604      	mov	r4, r0
 8012526:	f100 0a14 	add.w	sl, r0, #20
 801252a:	f04f 0900 	mov.w	r9, #0
 801252e:	e7b8      	b.n	80124a2 <__gethex+0x1b6>
 8012530:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012534:	42bd      	cmp	r5, r7
 8012536:	dd6f      	ble.n	8012618 <__gethex+0x32c>
 8012538:	1bed      	subs	r5, r5, r7
 801253a:	42ae      	cmp	r6, r5
 801253c:	dc34      	bgt.n	80125a8 <__gethex+0x2bc>
 801253e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012542:	2b02      	cmp	r3, #2
 8012544:	d022      	beq.n	801258c <__gethex+0x2a0>
 8012546:	2b03      	cmp	r3, #3
 8012548:	d024      	beq.n	8012594 <__gethex+0x2a8>
 801254a:	2b01      	cmp	r3, #1
 801254c:	d115      	bne.n	801257a <__gethex+0x28e>
 801254e:	42ae      	cmp	r6, r5
 8012550:	d113      	bne.n	801257a <__gethex+0x28e>
 8012552:	2e01      	cmp	r6, #1
 8012554:	d10b      	bne.n	801256e <__gethex+0x282>
 8012556:	9a02      	ldr	r2, [sp, #8]
 8012558:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801255c:	6013      	str	r3, [r2, #0]
 801255e:	2301      	movs	r3, #1
 8012560:	6123      	str	r3, [r4, #16]
 8012562:	f8ca 3000 	str.w	r3, [sl]
 8012566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012568:	2562      	movs	r5, #98	@ 0x62
 801256a:	601c      	str	r4, [r3, #0]
 801256c:	e73a      	b.n	80123e4 <__gethex+0xf8>
 801256e:	1e71      	subs	r1, r6, #1
 8012570:	4620      	mov	r0, r4
 8012572:	f7fe fb86 	bl	8010c82 <__any_on>
 8012576:	2800      	cmp	r0, #0
 8012578:	d1ed      	bne.n	8012556 <__gethex+0x26a>
 801257a:	9801      	ldr	r0, [sp, #4]
 801257c:	4621      	mov	r1, r4
 801257e:	f7fd ff2f 	bl	80103e0 <_Bfree>
 8012582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012584:	2300      	movs	r3, #0
 8012586:	6013      	str	r3, [r2, #0]
 8012588:	2550      	movs	r5, #80	@ 0x50
 801258a:	e72b      	b.n	80123e4 <__gethex+0xf8>
 801258c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801258e:	2b00      	cmp	r3, #0
 8012590:	d1f3      	bne.n	801257a <__gethex+0x28e>
 8012592:	e7e0      	b.n	8012556 <__gethex+0x26a>
 8012594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012596:	2b00      	cmp	r3, #0
 8012598:	d1dd      	bne.n	8012556 <__gethex+0x26a>
 801259a:	e7ee      	b.n	801257a <__gethex+0x28e>
 801259c:	08013840 	.word	0x08013840
 80125a0:	080136d7 	.word	0x080136d7
 80125a4:	080139b2 	.word	0x080139b2
 80125a8:	1e6f      	subs	r7, r5, #1
 80125aa:	f1b9 0f00 	cmp.w	r9, #0
 80125ae:	d130      	bne.n	8012612 <__gethex+0x326>
 80125b0:	b127      	cbz	r7, 80125bc <__gethex+0x2d0>
 80125b2:	4639      	mov	r1, r7
 80125b4:	4620      	mov	r0, r4
 80125b6:	f7fe fb64 	bl	8010c82 <__any_on>
 80125ba:	4681      	mov	r9, r0
 80125bc:	117a      	asrs	r2, r7, #5
 80125be:	2301      	movs	r3, #1
 80125c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80125c4:	f007 071f 	and.w	r7, r7, #31
 80125c8:	40bb      	lsls	r3, r7
 80125ca:	4213      	tst	r3, r2
 80125cc:	4629      	mov	r1, r5
 80125ce:	4620      	mov	r0, r4
 80125d0:	bf18      	it	ne
 80125d2:	f049 0902 	orrne.w	r9, r9, #2
 80125d6:	f7ff fe22 	bl	801221e <rshift>
 80125da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80125de:	1b76      	subs	r6, r6, r5
 80125e0:	2502      	movs	r5, #2
 80125e2:	f1b9 0f00 	cmp.w	r9, #0
 80125e6:	d047      	beq.n	8012678 <__gethex+0x38c>
 80125e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80125ec:	2b02      	cmp	r3, #2
 80125ee:	d015      	beq.n	801261c <__gethex+0x330>
 80125f0:	2b03      	cmp	r3, #3
 80125f2:	d017      	beq.n	8012624 <__gethex+0x338>
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	d109      	bne.n	801260c <__gethex+0x320>
 80125f8:	f019 0f02 	tst.w	r9, #2
 80125fc:	d006      	beq.n	801260c <__gethex+0x320>
 80125fe:	f8da 3000 	ldr.w	r3, [sl]
 8012602:	ea49 0903 	orr.w	r9, r9, r3
 8012606:	f019 0f01 	tst.w	r9, #1
 801260a:	d10e      	bne.n	801262a <__gethex+0x33e>
 801260c:	f045 0510 	orr.w	r5, r5, #16
 8012610:	e032      	b.n	8012678 <__gethex+0x38c>
 8012612:	f04f 0901 	mov.w	r9, #1
 8012616:	e7d1      	b.n	80125bc <__gethex+0x2d0>
 8012618:	2501      	movs	r5, #1
 801261a:	e7e2      	b.n	80125e2 <__gethex+0x2f6>
 801261c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801261e:	f1c3 0301 	rsb	r3, r3, #1
 8012622:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012626:	2b00      	cmp	r3, #0
 8012628:	d0f0      	beq.n	801260c <__gethex+0x320>
 801262a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801262e:	f104 0314 	add.w	r3, r4, #20
 8012632:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012636:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801263a:	f04f 0c00 	mov.w	ip, #0
 801263e:	4618      	mov	r0, r3
 8012640:	f853 2b04 	ldr.w	r2, [r3], #4
 8012644:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012648:	d01b      	beq.n	8012682 <__gethex+0x396>
 801264a:	3201      	adds	r2, #1
 801264c:	6002      	str	r2, [r0, #0]
 801264e:	2d02      	cmp	r5, #2
 8012650:	f104 0314 	add.w	r3, r4, #20
 8012654:	d13c      	bne.n	80126d0 <__gethex+0x3e4>
 8012656:	f8d8 2000 	ldr.w	r2, [r8]
 801265a:	3a01      	subs	r2, #1
 801265c:	42b2      	cmp	r2, r6
 801265e:	d109      	bne.n	8012674 <__gethex+0x388>
 8012660:	1171      	asrs	r1, r6, #5
 8012662:	2201      	movs	r2, #1
 8012664:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012668:	f006 061f 	and.w	r6, r6, #31
 801266c:	fa02 f606 	lsl.w	r6, r2, r6
 8012670:	421e      	tst	r6, r3
 8012672:	d13a      	bne.n	80126ea <__gethex+0x3fe>
 8012674:	f045 0520 	orr.w	r5, r5, #32
 8012678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801267a:	601c      	str	r4, [r3, #0]
 801267c:	9b02      	ldr	r3, [sp, #8]
 801267e:	601f      	str	r7, [r3, #0]
 8012680:	e6b0      	b.n	80123e4 <__gethex+0xf8>
 8012682:	4299      	cmp	r1, r3
 8012684:	f843 cc04 	str.w	ip, [r3, #-4]
 8012688:	d8d9      	bhi.n	801263e <__gethex+0x352>
 801268a:	68a3      	ldr	r3, [r4, #8]
 801268c:	459b      	cmp	fp, r3
 801268e:	db17      	blt.n	80126c0 <__gethex+0x3d4>
 8012690:	6861      	ldr	r1, [r4, #4]
 8012692:	9801      	ldr	r0, [sp, #4]
 8012694:	3101      	adds	r1, #1
 8012696:	f7fd fe63 	bl	8010360 <_Balloc>
 801269a:	4681      	mov	r9, r0
 801269c:	b918      	cbnz	r0, 80126a6 <__gethex+0x3ba>
 801269e:	4b1a      	ldr	r3, [pc, #104]	@ (8012708 <__gethex+0x41c>)
 80126a0:	4602      	mov	r2, r0
 80126a2:	2184      	movs	r1, #132	@ 0x84
 80126a4:	e6c5      	b.n	8012432 <__gethex+0x146>
 80126a6:	6922      	ldr	r2, [r4, #16]
 80126a8:	3202      	adds	r2, #2
 80126aa:	f104 010c 	add.w	r1, r4, #12
 80126ae:	0092      	lsls	r2, r2, #2
 80126b0:	300c      	adds	r0, #12
 80126b2:	f7fc fed6 	bl	800f462 <memcpy>
 80126b6:	4621      	mov	r1, r4
 80126b8:	9801      	ldr	r0, [sp, #4]
 80126ba:	f7fd fe91 	bl	80103e0 <_Bfree>
 80126be:	464c      	mov	r4, r9
 80126c0:	6923      	ldr	r3, [r4, #16]
 80126c2:	1c5a      	adds	r2, r3, #1
 80126c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80126c8:	6122      	str	r2, [r4, #16]
 80126ca:	2201      	movs	r2, #1
 80126cc:	615a      	str	r2, [r3, #20]
 80126ce:	e7be      	b.n	801264e <__gethex+0x362>
 80126d0:	6922      	ldr	r2, [r4, #16]
 80126d2:	455a      	cmp	r2, fp
 80126d4:	dd0b      	ble.n	80126ee <__gethex+0x402>
 80126d6:	2101      	movs	r1, #1
 80126d8:	4620      	mov	r0, r4
 80126da:	f7ff fda0 	bl	801221e <rshift>
 80126de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80126e2:	3701      	adds	r7, #1
 80126e4:	42bb      	cmp	r3, r7
 80126e6:	f6ff aee0 	blt.w	80124aa <__gethex+0x1be>
 80126ea:	2501      	movs	r5, #1
 80126ec:	e7c2      	b.n	8012674 <__gethex+0x388>
 80126ee:	f016 061f 	ands.w	r6, r6, #31
 80126f2:	d0fa      	beq.n	80126ea <__gethex+0x3fe>
 80126f4:	4453      	add	r3, sl
 80126f6:	f1c6 0620 	rsb	r6, r6, #32
 80126fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80126fe:	f7fd ff21 	bl	8010544 <__hi0bits>
 8012702:	42b0      	cmp	r0, r6
 8012704:	dbe7      	blt.n	80126d6 <__gethex+0x3ea>
 8012706:	e7f0      	b.n	80126ea <__gethex+0x3fe>
 8012708:	080136d7 	.word	0x080136d7

0801270c <L_shift>:
 801270c:	f1c2 0208 	rsb	r2, r2, #8
 8012710:	0092      	lsls	r2, r2, #2
 8012712:	b570      	push	{r4, r5, r6, lr}
 8012714:	f1c2 0620 	rsb	r6, r2, #32
 8012718:	6843      	ldr	r3, [r0, #4]
 801271a:	6804      	ldr	r4, [r0, #0]
 801271c:	fa03 f506 	lsl.w	r5, r3, r6
 8012720:	432c      	orrs	r4, r5
 8012722:	40d3      	lsrs	r3, r2
 8012724:	6004      	str	r4, [r0, #0]
 8012726:	f840 3f04 	str.w	r3, [r0, #4]!
 801272a:	4288      	cmp	r0, r1
 801272c:	d3f4      	bcc.n	8012718 <L_shift+0xc>
 801272e:	bd70      	pop	{r4, r5, r6, pc}

08012730 <__match>:
 8012730:	b530      	push	{r4, r5, lr}
 8012732:	6803      	ldr	r3, [r0, #0]
 8012734:	3301      	adds	r3, #1
 8012736:	f811 4b01 	ldrb.w	r4, [r1], #1
 801273a:	b914      	cbnz	r4, 8012742 <__match+0x12>
 801273c:	6003      	str	r3, [r0, #0]
 801273e:	2001      	movs	r0, #1
 8012740:	bd30      	pop	{r4, r5, pc}
 8012742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012746:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801274a:	2d19      	cmp	r5, #25
 801274c:	bf98      	it	ls
 801274e:	3220      	addls	r2, #32
 8012750:	42a2      	cmp	r2, r4
 8012752:	d0f0      	beq.n	8012736 <__match+0x6>
 8012754:	2000      	movs	r0, #0
 8012756:	e7f3      	b.n	8012740 <__match+0x10>

08012758 <__hexnan>:
 8012758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801275c:	680b      	ldr	r3, [r1, #0]
 801275e:	6801      	ldr	r1, [r0, #0]
 8012760:	115e      	asrs	r6, r3, #5
 8012762:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012766:	f013 031f 	ands.w	r3, r3, #31
 801276a:	b087      	sub	sp, #28
 801276c:	bf18      	it	ne
 801276e:	3604      	addne	r6, #4
 8012770:	2500      	movs	r5, #0
 8012772:	1f37      	subs	r7, r6, #4
 8012774:	4682      	mov	sl, r0
 8012776:	4690      	mov	r8, r2
 8012778:	9301      	str	r3, [sp, #4]
 801277a:	f846 5c04 	str.w	r5, [r6, #-4]
 801277e:	46b9      	mov	r9, r7
 8012780:	463c      	mov	r4, r7
 8012782:	9502      	str	r5, [sp, #8]
 8012784:	46ab      	mov	fp, r5
 8012786:	784a      	ldrb	r2, [r1, #1]
 8012788:	1c4b      	adds	r3, r1, #1
 801278a:	9303      	str	r3, [sp, #12]
 801278c:	b342      	cbz	r2, 80127e0 <__hexnan+0x88>
 801278e:	4610      	mov	r0, r2
 8012790:	9105      	str	r1, [sp, #20]
 8012792:	9204      	str	r2, [sp, #16]
 8012794:	f7ff fd95 	bl	80122c2 <__hexdig_fun>
 8012798:	2800      	cmp	r0, #0
 801279a:	d151      	bne.n	8012840 <__hexnan+0xe8>
 801279c:	9a04      	ldr	r2, [sp, #16]
 801279e:	9905      	ldr	r1, [sp, #20]
 80127a0:	2a20      	cmp	r2, #32
 80127a2:	d818      	bhi.n	80127d6 <__hexnan+0x7e>
 80127a4:	9b02      	ldr	r3, [sp, #8]
 80127a6:	459b      	cmp	fp, r3
 80127a8:	dd13      	ble.n	80127d2 <__hexnan+0x7a>
 80127aa:	454c      	cmp	r4, r9
 80127ac:	d206      	bcs.n	80127bc <__hexnan+0x64>
 80127ae:	2d07      	cmp	r5, #7
 80127b0:	dc04      	bgt.n	80127bc <__hexnan+0x64>
 80127b2:	462a      	mov	r2, r5
 80127b4:	4649      	mov	r1, r9
 80127b6:	4620      	mov	r0, r4
 80127b8:	f7ff ffa8 	bl	801270c <L_shift>
 80127bc:	4544      	cmp	r4, r8
 80127be:	d952      	bls.n	8012866 <__hexnan+0x10e>
 80127c0:	2300      	movs	r3, #0
 80127c2:	f1a4 0904 	sub.w	r9, r4, #4
 80127c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80127ca:	f8cd b008 	str.w	fp, [sp, #8]
 80127ce:	464c      	mov	r4, r9
 80127d0:	461d      	mov	r5, r3
 80127d2:	9903      	ldr	r1, [sp, #12]
 80127d4:	e7d7      	b.n	8012786 <__hexnan+0x2e>
 80127d6:	2a29      	cmp	r2, #41	@ 0x29
 80127d8:	d157      	bne.n	801288a <__hexnan+0x132>
 80127da:	3102      	adds	r1, #2
 80127dc:	f8ca 1000 	str.w	r1, [sl]
 80127e0:	f1bb 0f00 	cmp.w	fp, #0
 80127e4:	d051      	beq.n	801288a <__hexnan+0x132>
 80127e6:	454c      	cmp	r4, r9
 80127e8:	d206      	bcs.n	80127f8 <__hexnan+0xa0>
 80127ea:	2d07      	cmp	r5, #7
 80127ec:	dc04      	bgt.n	80127f8 <__hexnan+0xa0>
 80127ee:	462a      	mov	r2, r5
 80127f0:	4649      	mov	r1, r9
 80127f2:	4620      	mov	r0, r4
 80127f4:	f7ff ff8a 	bl	801270c <L_shift>
 80127f8:	4544      	cmp	r4, r8
 80127fa:	d936      	bls.n	801286a <__hexnan+0x112>
 80127fc:	f1a8 0204 	sub.w	r2, r8, #4
 8012800:	4623      	mov	r3, r4
 8012802:	f853 1b04 	ldr.w	r1, [r3], #4
 8012806:	f842 1f04 	str.w	r1, [r2, #4]!
 801280a:	429f      	cmp	r7, r3
 801280c:	d2f9      	bcs.n	8012802 <__hexnan+0xaa>
 801280e:	1b3b      	subs	r3, r7, r4
 8012810:	f023 0303 	bic.w	r3, r3, #3
 8012814:	3304      	adds	r3, #4
 8012816:	3401      	adds	r4, #1
 8012818:	3e03      	subs	r6, #3
 801281a:	42b4      	cmp	r4, r6
 801281c:	bf88      	it	hi
 801281e:	2304      	movhi	r3, #4
 8012820:	4443      	add	r3, r8
 8012822:	2200      	movs	r2, #0
 8012824:	f843 2b04 	str.w	r2, [r3], #4
 8012828:	429f      	cmp	r7, r3
 801282a:	d2fb      	bcs.n	8012824 <__hexnan+0xcc>
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	b91b      	cbnz	r3, 8012838 <__hexnan+0xe0>
 8012830:	4547      	cmp	r7, r8
 8012832:	d128      	bne.n	8012886 <__hexnan+0x12e>
 8012834:	2301      	movs	r3, #1
 8012836:	603b      	str	r3, [r7, #0]
 8012838:	2005      	movs	r0, #5
 801283a:	b007      	add	sp, #28
 801283c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012840:	3501      	adds	r5, #1
 8012842:	2d08      	cmp	r5, #8
 8012844:	f10b 0b01 	add.w	fp, fp, #1
 8012848:	dd06      	ble.n	8012858 <__hexnan+0x100>
 801284a:	4544      	cmp	r4, r8
 801284c:	d9c1      	bls.n	80127d2 <__hexnan+0x7a>
 801284e:	2300      	movs	r3, #0
 8012850:	f844 3c04 	str.w	r3, [r4, #-4]
 8012854:	2501      	movs	r5, #1
 8012856:	3c04      	subs	r4, #4
 8012858:	6822      	ldr	r2, [r4, #0]
 801285a:	f000 000f 	and.w	r0, r0, #15
 801285e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012862:	6020      	str	r0, [r4, #0]
 8012864:	e7b5      	b.n	80127d2 <__hexnan+0x7a>
 8012866:	2508      	movs	r5, #8
 8012868:	e7b3      	b.n	80127d2 <__hexnan+0x7a>
 801286a:	9b01      	ldr	r3, [sp, #4]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d0dd      	beq.n	801282c <__hexnan+0xd4>
 8012870:	f1c3 0320 	rsb	r3, r3, #32
 8012874:	f04f 32ff 	mov.w	r2, #4294967295
 8012878:	40da      	lsrs	r2, r3
 801287a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801287e:	4013      	ands	r3, r2
 8012880:	f846 3c04 	str.w	r3, [r6, #-4]
 8012884:	e7d2      	b.n	801282c <__hexnan+0xd4>
 8012886:	3f04      	subs	r7, #4
 8012888:	e7d0      	b.n	801282c <__hexnan+0xd4>
 801288a:	2004      	movs	r0, #4
 801288c:	e7d5      	b.n	801283a <__hexnan+0xe2>

0801288e <__ascii_mbtowc>:
 801288e:	b082      	sub	sp, #8
 8012890:	b901      	cbnz	r1, 8012894 <__ascii_mbtowc+0x6>
 8012892:	a901      	add	r1, sp, #4
 8012894:	b142      	cbz	r2, 80128a8 <__ascii_mbtowc+0x1a>
 8012896:	b14b      	cbz	r3, 80128ac <__ascii_mbtowc+0x1e>
 8012898:	7813      	ldrb	r3, [r2, #0]
 801289a:	600b      	str	r3, [r1, #0]
 801289c:	7812      	ldrb	r2, [r2, #0]
 801289e:	1e10      	subs	r0, r2, #0
 80128a0:	bf18      	it	ne
 80128a2:	2001      	movne	r0, #1
 80128a4:	b002      	add	sp, #8
 80128a6:	4770      	bx	lr
 80128a8:	4610      	mov	r0, r2
 80128aa:	e7fb      	b.n	80128a4 <__ascii_mbtowc+0x16>
 80128ac:	f06f 0001 	mvn.w	r0, #1
 80128b0:	e7f8      	b.n	80128a4 <__ascii_mbtowc+0x16>

080128b2 <_realloc_r>:
 80128b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128b6:	4680      	mov	r8, r0
 80128b8:	4615      	mov	r5, r2
 80128ba:	460c      	mov	r4, r1
 80128bc:	b921      	cbnz	r1, 80128c8 <_realloc_r+0x16>
 80128be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128c2:	4611      	mov	r1, r2
 80128c4:	f7fd bcc0 	b.w	8010248 <_malloc_r>
 80128c8:	b92a      	cbnz	r2, 80128d6 <_realloc_r+0x24>
 80128ca:	f7fd fc49 	bl	8010160 <_free_r>
 80128ce:	2400      	movs	r4, #0
 80128d0:	4620      	mov	r0, r4
 80128d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128d6:	f000 f86b 	bl	80129b0 <_malloc_usable_size_r>
 80128da:	4285      	cmp	r5, r0
 80128dc:	4606      	mov	r6, r0
 80128de:	d802      	bhi.n	80128e6 <_realloc_r+0x34>
 80128e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80128e4:	d8f4      	bhi.n	80128d0 <_realloc_r+0x1e>
 80128e6:	4629      	mov	r1, r5
 80128e8:	4640      	mov	r0, r8
 80128ea:	f7fd fcad 	bl	8010248 <_malloc_r>
 80128ee:	4607      	mov	r7, r0
 80128f0:	2800      	cmp	r0, #0
 80128f2:	d0ec      	beq.n	80128ce <_realloc_r+0x1c>
 80128f4:	42b5      	cmp	r5, r6
 80128f6:	462a      	mov	r2, r5
 80128f8:	4621      	mov	r1, r4
 80128fa:	bf28      	it	cs
 80128fc:	4632      	movcs	r2, r6
 80128fe:	f7fc fdb0 	bl	800f462 <memcpy>
 8012902:	4621      	mov	r1, r4
 8012904:	4640      	mov	r0, r8
 8012906:	f7fd fc2b 	bl	8010160 <_free_r>
 801290a:	463c      	mov	r4, r7
 801290c:	e7e0      	b.n	80128d0 <_realloc_r+0x1e>

0801290e <__ascii_wctomb>:
 801290e:	4603      	mov	r3, r0
 8012910:	4608      	mov	r0, r1
 8012912:	b141      	cbz	r1, 8012926 <__ascii_wctomb+0x18>
 8012914:	2aff      	cmp	r2, #255	@ 0xff
 8012916:	d904      	bls.n	8012922 <__ascii_wctomb+0x14>
 8012918:	228a      	movs	r2, #138	@ 0x8a
 801291a:	601a      	str	r2, [r3, #0]
 801291c:	f04f 30ff 	mov.w	r0, #4294967295
 8012920:	4770      	bx	lr
 8012922:	700a      	strb	r2, [r1, #0]
 8012924:	2001      	movs	r0, #1
 8012926:	4770      	bx	lr

08012928 <_raise_r>:
 8012928:	291f      	cmp	r1, #31
 801292a:	b538      	push	{r3, r4, r5, lr}
 801292c:	4605      	mov	r5, r0
 801292e:	460c      	mov	r4, r1
 8012930:	d904      	bls.n	801293c <_raise_r+0x14>
 8012932:	2316      	movs	r3, #22
 8012934:	6003      	str	r3, [r0, #0]
 8012936:	f04f 30ff 	mov.w	r0, #4294967295
 801293a:	bd38      	pop	{r3, r4, r5, pc}
 801293c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801293e:	b112      	cbz	r2, 8012946 <_raise_r+0x1e>
 8012940:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012944:	b94b      	cbnz	r3, 801295a <_raise_r+0x32>
 8012946:	4628      	mov	r0, r5
 8012948:	f000 f830 	bl	80129ac <_getpid_r>
 801294c:	4622      	mov	r2, r4
 801294e:	4601      	mov	r1, r0
 8012950:	4628      	mov	r0, r5
 8012952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012956:	f000 b817 	b.w	8012988 <_kill_r>
 801295a:	2b01      	cmp	r3, #1
 801295c:	d00a      	beq.n	8012974 <_raise_r+0x4c>
 801295e:	1c59      	adds	r1, r3, #1
 8012960:	d103      	bne.n	801296a <_raise_r+0x42>
 8012962:	2316      	movs	r3, #22
 8012964:	6003      	str	r3, [r0, #0]
 8012966:	2001      	movs	r0, #1
 8012968:	e7e7      	b.n	801293a <_raise_r+0x12>
 801296a:	2100      	movs	r1, #0
 801296c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012970:	4620      	mov	r0, r4
 8012972:	4798      	blx	r3
 8012974:	2000      	movs	r0, #0
 8012976:	e7e0      	b.n	801293a <_raise_r+0x12>

08012978 <raise>:
 8012978:	4b02      	ldr	r3, [pc, #8]	@ (8012984 <raise+0xc>)
 801297a:	4601      	mov	r1, r0
 801297c:	6818      	ldr	r0, [r3, #0]
 801297e:	f7ff bfd3 	b.w	8012928 <_raise_r>
 8012982:	bf00      	nop
 8012984:	200000c8 	.word	0x200000c8

08012988 <_kill_r>:
 8012988:	b538      	push	{r3, r4, r5, lr}
 801298a:	4d07      	ldr	r5, [pc, #28]	@ (80129a8 <_kill_r+0x20>)
 801298c:	2300      	movs	r3, #0
 801298e:	4604      	mov	r4, r0
 8012990:	4608      	mov	r0, r1
 8012992:	4611      	mov	r1, r2
 8012994:	602b      	str	r3, [r5, #0]
 8012996:	f7ef feaa 	bl	80026ee <_kill>
 801299a:	1c43      	adds	r3, r0, #1
 801299c:	d102      	bne.n	80129a4 <_kill_r+0x1c>
 801299e:	682b      	ldr	r3, [r5, #0]
 80129a0:	b103      	cbz	r3, 80129a4 <_kill_r+0x1c>
 80129a2:	6023      	str	r3, [r4, #0]
 80129a4:	bd38      	pop	{r3, r4, r5, pc}
 80129a6:	bf00      	nop
 80129a8:	20003344 	.word	0x20003344

080129ac <_getpid_r>:
 80129ac:	f7ef be97 	b.w	80026de <_getpid>

080129b0 <_malloc_usable_size_r>:
 80129b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129b4:	1f18      	subs	r0, r3, #4
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	bfbc      	itt	lt
 80129ba:	580b      	ldrlt	r3, [r1, r0]
 80129bc:	18c0      	addlt	r0, r0, r3
 80129be:	4770      	bx	lr

080129c0 <atan2f>:
 80129c0:	f000 b800 	b.w	80129c4 <__ieee754_atan2f>

080129c4 <__ieee754_atan2f>:
 80129c4:	ee10 2a90 	vmov	r2, s1
 80129c8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80129cc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80129d0:	b510      	push	{r4, lr}
 80129d2:	eef0 7a40 	vmov.f32	s15, s0
 80129d6:	d806      	bhi.n	80129e6 <__ieee754_atan2f+0x22>
 80129d8:	ee10 0a10 	vmov	r0, s0
 80129dc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80129e0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80129e4:	d904      	bls.n	80129f0 <__ieee754_atan2f+0x2c>
 80129e6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80129ea:	eeb0 0a67 	vmov.f32	s0, s15
 80129ee:	bd10      	pop	{r4, pc}
 80129f0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80129f4:	d103      	bne.n	80129fe <__ieee754_atan2f+0x3a>
 80129f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129fa:	f000 b883 	b.w	8012b04 <atanf>
 80129fe:	1794      	asrs	r4, r2, #30
 8012a00:	f004 0402 	and.w	r4, r4, #2
 8012a04:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012a08:	b943      	cbnz	r3, 8012a1c <__ieee754_atan2f+0x58>
 8012a0a:	2c02      	cmp	r4, #2
 8012a0c:	d05e      	beq.n	8012acc <__ieee754_atan2f+0x108>
 8012a0e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012ae0 <__ieee754_atan2f+0x11c>
 8012a12:	2c03      	cmp	r4, #3
 8012a14:	bf08      	it	eq
 8012a16:	eef0 7a47 	vmoveq.f32	s15, s14
 8012a1a:	e7e6      	b.n	80129ea <__ieee754_atan2f+0x26>
 8012a1c:	b941      	cbnz	r1, 8012a30 <__ieee754_atan2f+0x6c>
 8012a1e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8012ae4 <__ieee754_atan2f+0x120>
 8012a22:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012ae8 <__ieee754_atan2f+0x124>
 8012a26:	2800      	cmp	r0, #0
 8012a28:	bfb8      	it	lt
 8012a2a:	eef0 7a47 	vmovlt.f32	s15, s14
 8012a2e:	e7dc      	b.n	80129ea <__ieee754_atan2f+0x26>
 8012a30:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012a34:	d110      	bne.n	8012a58 <__ieee754_atan2f+0x94>
 8012a36:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012a3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8012a3e:	d107      	bne.n	8012a50 <__ieee754_atan2f+0x8c>
 8012a40:	2c02      	cmp	r4, #2
 8012a42:	d846      	bhi.n	8012ad2 <__ieee754_atan2f+0x10e>
 8012a44:	4b29      	ldr	r3, [pc, #164]	@ (8012aec <__ieee754_atan2f+0x128>)
 8012a46:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012a4a:	edd3 7a00 	vldr	s15, [r3]
 8012a4e:	e7cc      	b.n	80129ea <__ieee754_atan2f+0x26>
 8012a50:	2c02      	cmp	r4, #2
 8012a52:	d841      	bhi.n	8012ad8 <__ieee754_atan2f+0x114>
 8012a54:	4b26      	ldr	r3, [pc, #152]	@ (8012af0 <__ieee754_atan2f+0x12c>)
 8012a56:	e7f6      	b.n	8012a46 <__ieee754_atan2f+0x82>
 8012a58:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012a5c:	d0df      	beq.n	8012a1e <__ieee754_atan2f+0x5a>
 8012a5e:	1a5b      	subs	r3, r3, r1
 8012a60:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8012a64:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012a68:	da1a      	bge.n	8012aa0 <__ieee754_atan2f+0xdc>
 8012a6a:	2a00      	cmp	r2, #0
 8012a6c:	da01      	bge.n	8012a72 <__ieee754_atan2f+0xae>
 8012a6e:	313c      	adds	r1, #60	@ 0x3c
 8012a70:	db19      	blt.n	8012aa6 <__ieee754_atan2f+0xe2>
 8012a72:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012a76:	f000 f919 	bl	8012cac <fabsf>
 8012a7a:	f000 f843 	bl	8012b04 <atanf>
 8012a7e:	eef0 7a40 	vmov.f32	s15, s0
 8012a82:	2c01      	cmp	r4, #1
 8012a84:	d012      	beq.n	8012aac <__ieee754_atan2f+0xe8>
 8012a86:	2c02      	cmp	r4, #2
 8012a88:	d017      	beq.n	8012aba <__ieee754_atan2f+0xf6>
 8012a8a:	2c00      	cmp	r4, #0
 8012a8c:	d0ad      	beq.n	80129ea <__ieee754_atan2f+0x26>
 8012a8e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8012af4 <__ieee754_atan2f+0x130>
 8012a92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012a96:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8012af8 <__ieee754_atan2f+0x134>
 8012a9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a9e:	e7a4      	b.n	80129ea <__ieee754_atan2f+0x26>
 8012aa0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8012ae4 <__ieee754_atan2f+0x120>
 8012aa4:	e7ed      	b.n	8012a82 <__ieee754_atan2f+0xbe>
 8012aa6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012afc <__ieee754_atan2f+0x138>
 8012aaa:	e7ea      	b.n	8012a82 <__ieee754_atan2f+0xbe>
 8012aac:	ee17 3a90 	vmov	r3, s15
 8012ab0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012ab4:	ee07 3a90 	vmov	s15, r3
 8012ab8:	e797      	b.n	80129ea <__ieee754_atan2f+0x26>
 8012aba:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012af4 <__ieee754_atan2f+0x130>
 8012abe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012ac2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8012af8 <__ieee754_atan2f+0x134>
 8012ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012aca:	e78e      	b.n	80129ea <__ieee754_atan2f+0x26>
 8012acc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8012af8 <__ieee754_atan2f+0x134>
 8012ad0:	e78b      	b.n	80129ea <__ieee754_atan2f+0x26>
 8012ad2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8012b00 <__ieee754_atan2f+0x13c>
 8012ad6:	e788      	b.n	80129ea <__ieee754_atan2f+0x26>
 8012ad8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8012afc <__ieee754_atan2f+0x138>
 8012adc:	e785      	b.n	80129ea <__ieee754_atan2f+0x26>
 8012ade:	bf00      	nop
 8012ae0:	c0490fdb 	.word	0xc0490fdb
 8012ae4:	3fc90fdb 	.word	0x3fc90fdb
 8012ae8:	bfc90fdb 	.word	0xbfc90fdb
 8012aec:	08013a20 	.word	0x08013a20
 8012af0:	08013a14 	.word	0x08013a14
 8012af4:	33bbbd2e 	.word	0x33bbbd2e
 8012af8:	40490fdb 	.word	0x40490fdb
 8012afc:	00000000 	.word	0x00000000
 8012b00:	3f490fdb 	.word	0x3f490fdb

08012b04 <atanf>:
 8012b04:	b538      	push	{r3, r4, r5, lr}
 8012b06:	ee10 5a10 	vmov	r5, s0
 8012b0a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8012b0e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8012b12:	eef0 7a40 	vmov.f32	s15, s0
 8012b16:	d310      	bcc.n	8012b3a <atanf+0x36>
 8012b18:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8012b1c:	d904      	bls.n	8012b28 <atanf+0x24>
 8012b1e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012b22:	eeb0 0a67 	vmov.f32	s0, s15
 8012b26:	bd38      	pop	{r3, r4, r5, pc}
 8012b28:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012c60 <atanf+0x15c>
 8012b2c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012c64 <atanf+0x160>
 8012b30:	2d00      	cmp	r5, #0
 8012b32:	bfc8      	it	gt
 8012b34:	eef0 7a47 	vmovgt.f32	s15, s14
 8012b38:	e7f3      	b.n	8012b22 <atanf+0x1e>
 8012b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8012c68 <atanf+0x164>)
 8012b3c:	429c      	cmp	r4, r3
 8012b3e:	d810      	bhi.n	8012b62 <atanf+0x5e>
 8012b40:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8012b44:	d20a      	bcs.n	8012b5c <atanf+0x58>
 8012b46:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8012c6c <atanf+0x168>
 8012b4a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012b52:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5a:	dce2      	bgt.n	8012b22 <atanf+0x1e>
 8012b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b60:	e013      	b.n	8012b8a <atanf+0x86>
 8012b62:	f000 f8a3 	bl	8012cac <fabsf>
 8012b66:	4b42      	ldr	r3, [pc, #264]	@ (8012c70 <atanf+0x16c>)
 8012b68:	429c      	cmp	r4, r3
 8012b6a:	d84f      	bhi.n	8012c0c <atanf+0x108>
 8012b6c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8012b70:	429c      	cmp	r4, r3
 8012b72:	d841      	bhi.n	8012bf8 <atanf+0xf4>
 8012b74:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8012b78:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012b7c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012b80:	2300      	movs	r3, #0
 8012b82:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012b86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012b8a:	1c5a      	adds	r2, r3, #1
 8012b8c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012b90:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012c74 <atanf+0x170>
 8012b94:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8012c78 <atanf+0x174>
 8012b98:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8012c7c <atanf+0x178>
 8012b9c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012ba0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012ba4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8012c80 <atanf+0x17c>
 8012ba8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012bac:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012c84 <atanf+0x180>
 8012bb0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012bb4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012c88 <atanf+0x184>
 8012bb8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012bbc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012c8c <atanf+0x188>
 8012bc0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012bc4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8012c90 <atanf+0x18c>
 8012bc8:	eea6 5a87 	vfma.f32	s10, s13, s14
 8012bcc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012c94 <atanf+0x190>
 8012bd0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012bd4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8012c98 <atanf+0x194>
 8012bd8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8012bdc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8012c9c <atanf+0x198>
 8012be0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012be4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012be8:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012bec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012bf0:	d121      	bne.n	8012c36 <atanf+0x132>
 8012bf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012bf6:	e794      	b.n	8012b22 <atanf+0x1e>
 8012bf8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012bfc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012c00:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012c04:	2301      	movs	r3, #1
 8012c06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012c0a:	e7be      	b.n	8012b8a <atanf+0x86>
 8012c0c:	4b24      	ldr	r3, [pc, #144]	@ (8012ca0 <atanf+0x19c>)
 8012c0e:	429c      	cmp	r4, r3
 8012c10:	d80b      	bhi.n	8012c2a <atanf+0x126>
 8012c12:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8012c16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012c1a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012c1e:	2302      	movs	r3, #2
 8012c20:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012c28:	e7af      	b.n	8012b8a <atanf+0x86>
 8012c2a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012c2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012c32:	2303      	movs	r3, #3
 8012c34:	e7a9      	b.n	8012b8a <atanf+0x86>
 8012c36:	4a1b      	ldr	r2, [pc, #108]	@ (8012ca4 <atanf+0x1a0>)
 8012c38:	491b      	ldr	r1, [pc, #108]	@ (8012ca8 <atanf+0x1a4>)
 8012c3a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012c3e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012c42:	edd3 6a00 	vldr	s13, [r3]
 8012c46:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012c4a:	2d00      	cmp	r5, #0
 8012c4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c50:	edd2 7a00 	vldr	s15, [r2]
 8012c54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c58:	bfb8      	it	lt
 8012c5a:	eef1 7a67 	vneglt.f32	s15, s15
 8012c5e:	e760      	b.n	8012b22 <atanf+0x1e>
 8012c60:	bfc90fdb 	.word	0xbfc90fdb
 8012c64:	3fc90fdb 	.word	0x3fc90fdb
 8012c68:	3edfffff 	.word	0x3edfffff
 8012c6c:	7149f2ca 	.word	0x7149f2ca
 8012c70:	3f97ffff 	.word	0x3f97ffff
 8012c74:	3c8569d7 	.word	0x3c8569d7
 8012c78:	3d4bda59 	.word	0x3d4bda59
 8012c7c:	bd6ef16b 	.word	0xbd6ef16b
 8012c80:	3d886b35 	.word	0x3d886b35
 8012c84:	3dba2e6e 	.word	0x3dba2e6e
 8012c88:	3e124925 	.word	0x3e124925
 8012c8c:	3eaaaaab 	.word	0x3eaaaaab
 8012c90:	bd15a221 	.word	0xbd15a221
 8012c94:	bd9d8795 	.word	0xbd9d8795
 8012c98:	bde38e38 	.word	0xbde38e38
 8012c9c:	be4ccccd 	.word	0xbe4ccccd
 8012ca0:	401bffff 	.word	0x401bffff
 8012ca4:	08013a3c 	.word	0x08013a3c
 8012ca8:	08013a2c 	.word	0x08013a2c

08012cac <fabsf>:
 8012cac:	ee10 3a10 	vmov	r3, s0
 8012cb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012cb4:	ee00 3a10 	vmov	s0, r3
 8012cb8:	4770      	bx	lr
	...

08012cbc <_init>:
 8012cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cbe:	bf00      	nop
 8012cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cc2:	bc08      	pop	{r3}
 8012cc4:	469e      	mov	lr, r3
 8012cc6:	4770      	bx	lr

08012cc8 <_fini>:
 8012cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cca:	bf00      	nop
 8012ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cce:	bc08      	pop	{r3}
 8012cd0:	469e      	mov	lr, r3
 8012cd2:	4770      	bx	lr
